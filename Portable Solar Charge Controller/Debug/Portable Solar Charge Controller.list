
Portable Solar Charge Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9c8  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800dc78  0800dc78  0000ec78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e044  0800e044  0000f044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e04c  0800e04c  0000f04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e050  0800e050  0000f050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800e054  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000358  240001dc  0800e230  000101dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000534  0800e230  00010534  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b557  00000000  00000000  0001020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003655  00000000  00000000  0002b761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001640  00000000  00000000  0002edb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001139  00000000  00000000  000303f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034c08  00000000  00000000  00031531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001eb4e  00000000  00000000  00066139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157bba  00000000  00000000  00084c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dc841  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c98  00000000  00000000  001dc884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000086  00000000  00000000  001e351c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001dc 	.word	0x240001dc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800dc60 	.word	0x0800dc60

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e0 	.word	0x240001e0
 80002ec:	0800dc60 	.word	0x0800dc60

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b988 	b.w	80006c8 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	468e      	mov	lr, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	4688      	mov	r8, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d962      	bls.n	80004ac <__udivmoddi4+0xdc>
 80003e6:	fab2 f682 	clz	r6, r2
 80003ea:	b14e      	cbz	r6, 8000400 <__udivmoddi4+0x30>
 80003ec:	f1c6 0320 	rsb	r3, r6, #32
 80003f0:	fa01 f806 	lsl.w	r8, r1, r6
 80003f4:	fa20 f303 	lsr.w	r3, r0, r3
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	ea43 0808 	orr.w	r8, r3, r8
 80003fe:	40b4      	lsls	r4, r6
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fbb8 f1fe 	udiv	r1, r8, lr
 800040c:	0c23      	lsrs	r3, r4, #16
 800040e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fb01 f20c 	mul.w	r2, r1, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0x62>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f101 30ff 	add.w	r0, r1, #4294967295
 8000424:	f080 80ea 	bcs.w	80005fc <__udivmoddi4+0x22c>
 8000428:	429a      	cmp	r2, r3
 800042a:	f240 80e7 	bls.w	80005fc <__udivmoddi4+0x22c>
 800042e:	3902      	subs	r1, #2
 8000430:	443b      	add	r3, r7
 8000432:	1a9a      	subs	r2, r3, r2
 8000434:	b2a3      	uxth	r3, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb00 fc0c 	mul.w	ip, r0, ip
 8000446:	459c      	cmp	ip, r3
 8000448:	d909      	bls.n	800045e <__udivmoddi4+0x8e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000450:	f080 80d6 	bcs.w	8000600 <__udivmoddi4+0x230>
 8000454:	459c      	cmp	ip, r3
 8000456:	f240 80d3 	bls.w	8000600 <__udivmoddi4+0x230>
 800045a:	443b      	add	r3, r7
 800045c:	3802      	subs	r0, #2
 800045e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000462:	eba3 030c 	sub.w	r3, r3, ip
 8000466:	2100      	movs	r1, #0
 8000468:	b11d      	cbz	r5, 8000472 <__udivmoddi4+0xa2>
 800046a:	40f3      	lsrs	r3, r6
 800046c:	2200      	movs	r2, #0
 800046e:	e9c5 3200 	strd	r3, r2, [r5]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d905      	bls.n	8000486 <__udivmoddi4+0xb6>
 800047a:	b10d      	cbz	r5, 8000480 <__udivmoddi4+0xb0>
 800047c:	e9c5 0100 	strd	r0, r1, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	4608      	mov	r0, r1
 8000484:	e7f5      	b.n	8000472 <__udivmoddi4+0xa2>
 8000486:	fab3 f183 	clz	r1, r3
 800048a:	2900      	cmp	r1, #0
 800048c:	d146      	bne.n	800051c <__udivmoddi4+0x14c>
 800048e:	4573      	cmp	r3, lr
 8000490:	d302      	bcc.n	8000498 <__udivmoddi4+0xc8>
 8000492:	4282      	cmp	r2, r0
 8000494:	f200 8105 	bhi.w	80006a2 <__udivmoddi4+0x2d2>
 8000498:	1a84      	subs	r4, r0, r2
 800049a:	eb6e 0203 	sbc.w	r2, lr, r3
 800049e:	2001      	movs	r0, #1
 80004a0:	4690      	mov	r8, r2
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d0e5      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004a6:	e9c5 4800 	strd	r4, r8, [r5]
 80004aa:	e7e2      	b.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f000 8090 	beq.w	80005d2 <__udivmoddi4+0x202>
 80004b2:	fab2 f682 	clz	r6, r2
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	f040 80a4 	bne.w	8000604 <__udivmoddi4+0x234>
 80004bc:	1a8a      	subs	r2, r1, r2
 80004be:	0c03      	lsrs	r3, r0, #16
 80004c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c4:	b280      	uxth	r0, r0
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	2101      	movs	r1, #1
 80004ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80004d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004d6:	fb04 f20c 	mul.w	r2, r4, ip
 80004da:	429a      	cmp	r2, r3
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x11e>
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004e4:	d202      	bcs.n	80004ec <__udivmoddi4+0x11c>
 80004e6:	429a      	cmp	r2, r3
 80004e8:	f200 80e0 	bhi.w	80006ac <__udivmoddi4+0x2dc>
 80004ec:	46c4      	mov	ip, r8
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004fc:	fb02 f404 	mul.w	r4, r2, r4
 8000500:	429c      	cmp	r4, r3
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x144>
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	f102 30ff 	add.w	r0, r2, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x142>
 800050c:	429c      	cmp	r4, r3
 800050e:	f200 80ca 	bhi.w	80006a6 <__udivmoddi4+0x2d6>
 8000512:	4602      	mov	r2, r0
 8000514:	1b1b      	subs	r3, r3, r4
 8000516:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800051a:	e7a5      	b.n	8000468 <__udivmoddi4+0x98>
 800051c:	f1c1 0620 	rsb	r6, r1, #32
 8000520:	408b      	lsls	r3, r1
 8000522:	fa22 f706 	lsr.w	r7, r2, r6
 8000526:	431f      	orrs	r7, r3
 8000528:	fa0e f401 	lsl.w	r4, lr, r1
 800052c:	fa20 f306 	lsr.w	r3, r0, r6
 8000530:	fa2e fe06 	lsr.w	lr, lr, r6
 8000534:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000538:	4323      	orrs	r3, r4
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	fa1f fc87 	uxth.w	ip, r7
 8000542:	fbbe f0f9 	udiv	r0, lr, r9
 8000546:	0c1c      	lsrs	r4, r3, #16
 8000548:	fb09 ee10 	mls	lr, r9, r0, lr
 800054c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000550:	fb00 fe0c 	mul.w	lr, r0, ip
 8000554:	45a6      	cmp	lr, r4
 8000556:	fa02 f201 	lsl.w	r2, r2, r1
 800055a:	d909      	bls.n	8000570 <__udivmoddi4+0x1a0>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000562:	f080 809c 	bcs.w	800069e <__udivmoddi4+0x2ce>
 8000566:	45a6      	cmp	lr, r4
 8000568:	f240 8099 	bls.w	800069e <__udivmoddi4+0x2ce>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	eba4 040e 	sub.w	r4, r4, lr
 8000574:	fa1f fe83 	uxth.w	lr, r3
 8000578:	fbb4 f3f9 	udiv	r3, r4, r9
 800057c:	fb09 4413 	mls	r4, r9, r3, r4
 8000580:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000584:	fb03 fc0c 	mul.w	ip, r3, ip
 8000588:	45a4      	cmp	ip, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x1ce>
 800058c:	193c      	adds	r4, r7, r4
 800058e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000592:	f080 8082 	bcs.w	800069a <__udivmoddi4+0x2ca>
 8000596:	45a4      	cmp	ip, r4
 8000598:	d97f      	bls.n	800069a <__udivmoddi4+0x2ca>
 800059a:	3b02      	subs	r3, #2
 800059c:	443c      	add	r4, r7
 800059e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005a2:	eba4 040c 	sub.w	r4, r4, ip
 80005a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005aa:	4564      	cmp	r4, ip
 80005ac:	4673      	mov	r3, lr
 80005ae:	46e1      	mov	r9, ip
 80005b0:	d362      	bcc.n	8000678 <__udivmoddi4+0x2a8>
 80005b2:	d05f      	beq.n	8000674 <__udivmoddi4+0x2a4>
 80005b4:	b15d      	cbz	r5, 80005ce <__udivmoddi4+0x1fe>
 80005b6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ba:	eb64 0409 	sbc.w	r4, r4, r9
 80005be:	fa04 f606 	lsl.w	r6, r4, r6
 80005c2:	fa22 f301 	lsr.w	r3, r2, r1
 80005c6:	431e      	orrs	r6, r3
 80005c8:	40cc      	lsrs	r4, r1
 80005ca:	e9c5 6400 	strd	r6, r4, [r5]
 80005ce:	2100      	movs	r1, #0
 80005d0:	e74f      	b.n	8000472 <__udivmoddi4+0xa2>
 80005d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005d6:	0c01      	lsrs	r1, r0, #16
 80005d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005dc:	b280      	uxth	r0, r0
 80005de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005e2:	463b      	mov	r3, r7
 80005e4:	4638      	mov	r0, r7
 80005e6:	463c      	mov	r4, r7
 80005e8:	46b8      	mov	r8, r7
 80005ea:	46be      	mov	lr, r7
 80005ec:	2620      	movs	r6, #32
 80005ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80005f2:	eba2 0208 	sub.w	r2, r2, r8
 80005f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005fa:	e766      	b.n	80004ca <__udivmoddi4+0xfa>
 80005fc:	4601      	mov	r1, r0
 80005fe:	e718      	b.n	8000432 <__udivmoddi4+0x62>
 8000600:	4610      	mov	r0, r2
 8000602:	e72c      	b.n	800045e <__udivmoddi4+0x8e>
 8000604:	f1c6 0220 	rsb	r2, r6, #32
 8000608:	fa2e f302 	lsr.w	r3, lr, r2
 800060c:	40b7      	lsls	r7, r6
 800060e:	40b1      	lsls	r1, r6
 8000610:	fa20 f202 	lsr.w	r2, r0, r2
 8000614:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000618:	430a      	orrs	r2, r1
 800061a:	fbb3 f8fe 	udiv	r8, r3, lr
 800061e:	b2bc      	uxth	r4, r7
 8000620:	fb0e 3318 	mls	r3, lr, r8, r3
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062a:	fb08 f904 	mul.w	r9, r8, r4
 800062e:	40b0      	lsls	r0, r6
 8000630:	4589      	cmp	r9, r1
 8000632:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000636:	b280      	uxth	r0, r0
 8000638:	d93e      	bls.n	80006b8 <__udivmoddi4+0x2e8>
 800063a:	1879      	adds	r1, r7, r1
 800063c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000640:	d201      	bcs.n	8000646 <__udivmoddi4+0x276>
 8000642:	4589      	cmp	r9, r1
 8000644:	d81f      	bhi.n	8000686 <__udivmoddi4+0x2b6>
 8000646:	eba1 0109 	sub.w	r1, r1, r9
 800064a:	fbb1 f9fe 	udiv	r9, r1, lr
 800064e:	fb09 f804 	mul.w	r8, r9, r4
 8000652:	fb0e 1119 	mls	r1, lr, r9, r1
 8000656:	b292      	uxth	r2, r2
 8000658:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800065c:	4542      	cmp	r2, r8
 800065e:	d229      	bcs.n	80006b4 <__udivmoddi4+0x2e4>
 8000660:	18ba      	adds	r2, r7, r2
 8000662:	f109 31ff 	add.w	r1, r9, #4294967295
 8000666:	d2c4      	bcs.n	80005f2 <__udivmoddi4+0x222>
 8000668:	4542      	cmp	r2, r8
 800066a:	d2c2      	bcs.n	80005f2 <__udivmoddi4+0x222>
 800066c:	f1a9 0102 	sub.w	r1, r9, #2
 8000670:	443a      	add	r2, r7
 8000672:	e7be      	b.n	80005f2 <__udivmoddi4+0x222>
 8000674:	45f0      	cmp	r8, lr
 8000676:	d29d      	bcs.n	80005b4 <__udivmoddi4+0x1e4>
 8000678:	ebbe 0302 	subs.w	r3, lr, r2
 800067c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000680:	3801      	subs	r0, #1
 8000682:	46e1      	mov	r9, ip
 8000684:	e796      	b.n	80005b4 <__udivmoddi4+0x1e4>
 8000686:	eba7 0909 	sub.w	r9, r7, r9
 800068a:	4449      	add	r1, r9
 800068c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000690:	fbb1 f9fe 	udiv	r9, r1, lr
 8000694:	fb09 f804 	mul.w	r8, r9, r4
 8000698:	e7db      	b.n	8000652 <__udivmoddi4+0x282>
 800069a:	4673      	mov	r3, lr
 800069c:	e77f      	b.n	800059e <__udivmoddi4+0x1ce>
 800069e:	4650      	mov	r0, sl
 80006a0:	e766      	b.n	8000570 <__udivmoddi4+0x1a0>
 80006a2:	4608      	mov	r0, r1
 80006a4:	e6fd      	b.n	80004a2 <__udivmoddi4+0xd2>
 80006a6:	443b      	add	r3, r7
 80006a8:	3a02      	subs	r2, #2
 80006aa:	e733      	b.n	8000514 <__udivmoddi4+0x144>
 80006ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80006b0:	443b      	add	r3, r7
 80006b2:	e71c      	b.n	80004ee <__udivmoddi4+0x11e>
 80006b4:	4649      	mov	r1, r9
 80006b6:	e79c      	b.n	80005f2 <__udivmoddi4+0x222>
 80006b8:	eba1 0109 	sub.w	r1, r1, r9
 80006bc:	46c4      	mov	ip, r8
 80006be:	fbb1 f9fe 	udiv	r9, r1, lr
 80006c2:	fb09 f804 	mul.w	r8, r9, r4
 80006c6:	e7c4      	b.n	8000652 <__udivmoddi4+0x282>

080006c8 <__aeabi_idiv0>:
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <HAL_ADC_ConvCpltCallback>:
#include "Adc.h"
#include"Solar_Operations.h"
ADC_HandleTypeDef hadc1;
volatile uint16_t ADC_VAL[3];

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc){
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
//	scaled_SV=(ADC_VAL[0]/65535.0)*3.30;
//	scaled_BV=(ADC_VAL[1]/65535.0)*3.30;
//	scaled_BC=(ADC_VAL[2]/65535.0)*3.30;
//	printf("BV = %0.2f\t SV = %0.2f\n",scaled_BV,scaled_SV);

}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
//////
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	615a      	str	r2, [r3, #20]
 8000702:	619a      	str	r2, [r3, #24]
//////
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000704:	4b3d      	ldr	r3, [pc, #244]	@ (80007fc <MX_ADC1_Init+0x11c>)
 8000706:	4a3e      	ldr	r2, [pc, #248]	@ (8000800 <MX_ADC1_Init+0x120>)
 8000708:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800070a:	4b3c      	ldr	r3, [pc, #240]	@ (80007fc <MX_ADC1_Init+0x11c>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000710:	4b3a      	ldr	r3, [pc, #232]	@ (80007fc <MX_ADC1_Init+0x11c>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000716:	4b39      	ldr	r3, [pc, #228]	@ (80007fc <MX_ADC1_Init+0x11c>)
 8000718:	2201      	movs	r2, #1
 800071a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800071c:	4b37      	ldr	r3, [pc, #220]	@ (80007fc <MX_ADC1_Init+0x11c>)
 800071e:	2208      	movs	r2, #8
 8000720:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000722:	4b36      	ldr	r3, [pc, #216]	@ (80007fc <MX_ADC1_Init+0x11c>)
 8000724:	2200      	movs	r2, #0
 8000726:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000728:	4b34      	ldr	r3, [pc, #208]	@ (80007fc <MX_ADC1_Init+0x11c>)
 800072a:	2200      	movs	r2, #0
 800072c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 3;
 800072e:	4b33      	ldr	r3, [pc, #204]	@ (80007fc <MX_ADC1_Init+0x11c>)
 8000730:	2203      	movs	r2, #3
 8000732:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000734:	4b31      	ldr	r3, [pc, #196]	@ (80007fc <MX_ADC1_Init+0x11c>)
 8000736:	2200      	movs	r2, #0
 8000738:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073a:	4b30      	ldr	r3, [pc, #192]	@ (80007fc <MX_ADC1_Init+0x11c>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000740:	4b2e      	ldr	r3, [pc, #184]	@ (80007fc <MX_ADC1_Init+0x11c>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000746:	4b2d      	ldr	r3, [pc, #180]	@ (80007fc <MX_ADC1_Init+0x11c>)
 8000748:	2201      	movs	r2, #1
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800074c:	4b2b      	ldr	r3, [pc, #172]	@ (80007fc <MX_ADC1_Init+0x11c>)
 800074e:	2200      	movs	r2, #0
 8000750:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000752:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <MX_ADC1_Init+0x11c>)
 8000754:	2200      	movs	r2, #0
 8000756:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000758:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <MX_ADC1_Init+0x11c>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000760:	4826      	ldr	r0, [pc, #152]	@ (80007fc <MX_ADC1_Init+0x11c>)
 8000762:	f001 fad5 	bl	8001d10 <HAL_ADC_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800076c:	f000 fbc8 	bl	8000f00 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4820      	ldr	r0, [pc, #128]	@ (80007fc <MX_ADC1_Init+0x11c>)
 800077c:	f002 fa64 	bl	8002c48 <HAL_ADCEx_MultiModeConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000786:	f000 fbbb 	bl	8000f00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800078a:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <MX_ADC1_Init+0x124>)
 800078c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078e:	2306      	movs	r3, #6
 8000790:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000796:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800079a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800079c:	2304      	movs	r3, #4
 800079e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4813      	ldr	r0, [pc, #76]	@ (80007fc <MX_ADC1_Init+0x11c>)
 80007ae:	f001 fcd1 	bl	8002154 <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80007b8:	f000 fba2 	bl	8000f00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_ADC1_Init+0x128>)
 80007be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007c0:	230c      	movs	r3, #12
 80007c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	480c      	ldr	r0, [pc, #48]	@ (80007fc <MX_ADC1_Init+0x11c>)
 80007ca:	f001 fcc3 	bl	8002154 <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80007d4:	f000 fb94 	bl	8000f00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_ADC1_Init+0x12c>)
 80007da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007dc:	2312      	movs	r3, #18
 80007de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_ADC1_Init+0x11c>)
 80007e6:	f001 fcb5 	bl	8002154 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80007f0:	f000 fb86 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
//////
  /* USER CODE END ADC1_Init 2 */
}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	@ 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	240001f8 	.word	0x240001f8
 8000800:	40022000 	.word	0x40022000
 8000804:	1d500080 	.word	0x1d500080
 8000808:	21800100 	.word	0x21800100
 800080c:	25b00200 	.word	0x25b00200

08000810 <get_calibrated_voltage>:



 void get_calibrated_voltage(){
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	@ 0x28
 8000814:	af04      	add	r7, sp, #16
	 int adc_channel_count = sizeof(ADC_VAL)/sizeof(ADC_VAL[0]);
 8000816:	2303      	movs	r3, #3
 8000818:	613b      	str	r3, [r7, #16]
	 float calibrated_voltage[3]={0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
	 for(int i=0;i<100;i++){
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e066      	b.n	80008f8 <get_calibrated_voltage+0xe8>
	 HAL_ADCEx_Calibration_Start (&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);		// TO set zero offset at 0V
 800082a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800082e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000832:	4853      	ldr	r0, [pc, #332]	@ (8000980 <get_calibrated_voltage+0x170>)
 8000834:	f002 f9a4 	bl	8002b80 <HAL_ADCEx_Calibration_Start>
	 HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_VAL, adc_channel_count);
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	461a      	mov	r2, r3
 800083c:	4951      	ldr	r1, [pc, #324]	@ (8000984 <get_calibrated_voltage+0x174>)
 800083e:	4850      	ldr	r0, [pc, #320]	@ (8000980 <get_calibrated_voltage+0x170>)
 8000840:	f001 fbc0 	bl	8001fc4 <HAL_ADC_Start_DMA>
	 calibrated_voltage[0] += (float)(ADC_VAL[0]/65535.0)*3.30;
 8000844:	4b4f      	ldr	r3, [pc, #316]	@ (8000984 <get_calibrated_voltage+0x174>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	b29b      	uxth	r3, r3
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000852:	ed9f 5b47 	vldr	d5, [pc, #284]	@ 8000970 <get_calibrated_voltage+0x160>
 8000856:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800085a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800085e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000862:	ed9f 6b45 	vldr	d6, [pc, #276]	@ 8000978 <get_calibrated_voltage+0x168>
 8000866:	ee27 6b06 	vmul.f64	d6, d7, d6
 800086a:	edd7 7a01 	vldr	s15, [r7, #4]
 800086e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000872:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000876:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800087a:	edc7 7a01 	vstr	s15, [r7, #4]
	 calibrated_voltage[1] += (float)(ADC_VAL[1]/65535.0)*3.30;
 800087e:	4b41      	ldr	r3, [pc, #260]	@ (8000984 <get_calibrated_voltage+0x174>)
 8000880:	885b      	ldrh	r3, [r3, #2]
 8000882:	b29b      	uxth	r3, r3
 8000884:	ee07 3a90 	vmov	s15, r3
 8000888:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800088c:	ed9f 5b38 	vldr	d5, [pc, #224]	@ 8000970 <get_calibrated_voltage+0x160>
 8000890:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000894:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000898:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800089c:	ed9f 6b36 	vldr	d6, [pc, #216]	@ 8000978 <get_calibrated_voltage+0x168>
 80008a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80008a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008b4:	edc7 7a02 	vstr	s15, [r7, #8]
	 calibrated_voltage[2] += (float)(ADC_VAL[2]/65535.0)*3.30;
 80008b8:	4b32      	ldr	r3, [pc, #200]	@ (8000984 <get_calibrated_voltage+0x174>)
 80008ba:	889b      	ldrh	r3, [r3, #4]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	ee07 3a90 	vmov	s15, r3
 80008c2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008c6:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8000970 <get_calibrated_voltage+0x160>
 80008ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008d6:	ed9f 6b28 	vldr	d6, [pc, #160]	@ 8000978 <get_calibrated_voltage+0x168>
 80008da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008de:	edd7 7a03 	vldr	s15, [r7, #12]
 80008e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ee:	edc7 7a03 	vstr	s15, [r7, #12]
	 for(int i=0;i<100;i++){
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	3301      	adds	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	2b63      	cmp	r3, #99	@ 0x63
 80008fc:	dd95      	ble.n	800082a <get_calibrated_voltage+0x1a>
	 }
	 scaled_SV = (calibrated_voltage[0] / 100);
 80008fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8000902:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000988 <get_calibrated_voltage+0x178>
 8000906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800090a:	4b20      	ldr	r3, [pc, #128]	@ (800098c <get_calibrated_voltage+0x17c>)
 800090c:	edc3 7a00 	vstr	s15, [r3]
	 scaled_BV = (calibrated_voltage[1] / 100);
 8000910:	ed97 7a02 	vldr	s14, [r7, #8]
 8000914:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8000988 <get_calibrated_voltage+0x178>
 8000918:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800091c:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <get_calibrated_voltage+0x180>)
 800091e:	edc3 7a00 	vstr	s15, [r3]
	 scaled_BC = (calibrated_voltage[2] / 100);
 8000922:	ed97 7a03 	vldr	s14, [r7, #12]
 8000926:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000988 <get_calibrated_voltage+0x178>
 800092a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800092e:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <get_calibrated_voltage+0x184>)
 8000930:	edc3 7a00 	vstr	s15, [r3]
	 printf("BV = %0.2f\t SV = %0.2f\tBC = %0.2f\n",scaled_BV,scaled_SV,scaled_BC);
 8000934:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <get_calibrated_voltage+0x180>)
 8000936:	edd3 7a00 	vldr	s15, [r3]
 800093a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <get_calibrated_voltage+0x17c>)
 8000940:	edd3 7a00 	vldr	s15, [r3]
 8000944:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <get_calibrated_voltage+0x184>)
 800094a:	edd3 6a00 	vldr	s13, [r3]
 800094e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000952:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000956:	ed8d 7b00 	vstr	d7, [sp]
 800095a:	ec53 2b15 	vmov	r2, r3, d5
 800095e:	480e      	ldr	r0, [pc, #56]	@ (8000998 <get_calibrated_voltage+0x188>)
 8000960:	f00b fa72 	bl	800be48 <iprintf>
 }
 8000964:	bf00      	nop
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	f3af 8000 	nop.w
 8000970:	00000000 	.word	0x00000000
 8000974:	40efffe0 	.word	0x40efffe0
 8000978:	66666666 	.word	0x66666666
 800097c:	400a6666 	.word	0x400a6666
 8000980:	240001f8 	.word	0x240001f8
 8000984:	2400025c 	.word	0x2400025c
 8000988:	42c80000 	.word	0x42c80000
 800098c:	24000268 	.word	0x24000268
 8000990:	2400026c 	.word	0x2400026c
 8000994:	24000270 	.word	0x24000270
 8000998:	0800dc78 	.word	0x0800dc78

0800099c <SystemClock_Config>:
 *      Author: adeel.akhtar
 */

#include "Clock_Config.h"
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b09c      	sub	sp, #112	@ 0x70
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a6:	224c      	movs	r2, #76	@ 0x4c
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f00b faa1 	bl	800bef2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2220      	movs	r2, #32
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f00b fa9b 	bl	800bef2 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80009bc:	4b2f      	ldr	r3, [pc, #188]	@ (8000a7c <SystemClock_Config+0xe0>)
 80009be:	f04f 32ff 	mov.w	r2, #4294967295
 80009c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009c6:	2004      	movs	r0, #4
 80009c8:	f004 fe8c 	bl	80056e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009cc:	2300      	movs	r3, #0
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a80 <SystemClock_Config+0xe4>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000a80 <SystemClock_Config+0xe4>)
 80009d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b28      	ldr	r3, [pc, #160]	@ (8000a80 <SystemClock_Config+0xe4>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009e8:	bf00      	nop
 80009ea:	4b25      	ldr	r3, [pc, #148]	@ (8000a80 <SystemClock_Config+0xe4>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009f6:	d1f8      	bne.n	80009ea <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f8:	2302      	movs	r3, #2
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000a00:	2340      	movs	r3, #64	@ 0x40
 8000a02:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a04:	2302      	movs	r3, #2
 8000a06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000a10:	2309      	movs	r3, #9
 8000a12:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a20:	230c      	movs	r3, #12
 8000a22:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a30:	4618      	mov	r0, r3
 8000a32:	f004 feb1 	bl	8005798 <HAL_RCC_OscConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a3c:	f000 fa60 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	233f      	movs	r3, #63	@ 0x3f
 8000a42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a44:	2303      	movs	r3, #3
 8000a46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2101      	movs	r1, #1
 8000a64:	4618      	mov	r0, r3
 8000a66:	f005 fac9 	bl	8005ffc <HAL_RCC_ClockConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000a70:	f000 fa46 	bl	8000f00 <Error_Handler>
  }
}
 8000a74:	bf00      	nop
 8000a76:	3770      	adds	r7, #112	@ 0x70
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58024400 	.word	0x58024400
 8000a80:	58024800 	.word	0x58024800

08000a84 <MX_GPIO_Init>:




 void MX_GPIO_Init(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
////
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <MX_GPIO_Init+0x8c>)
 8000a8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a90:	4a1f      	ldr	r2, [pc, #124]	@ (8000b10 <MX_GPIO_Init+0x8c>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <MX_GPIO_Init+0x8c>)
 8000a9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa8:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <MX_GPIO_Init+0x8c>)
 8000aaa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aae:	4a18      	ldr	r2, [pc, #96]	@ (8000b10 <MX_GPIO_Init+0x8c>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ab8:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <MX_GPIO_Init+0x8c>)
 8000aba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <MX_GPIO_Init+0x8c>)
 8000ac8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000acc:	4a10      	ldr	r2, [pc, #64]	@ (8000b10 <MX_GPIO_Init+0x8c>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <MX_GPIO_Init+0x8c>)
 8000ad8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <MX_GPIO_Init+0x8c>)
 8000ae6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aea:	4a09      	ldr	r2, [pc, #36]	@ (8000b10 <MX_GPIO_Init+0x8c>)
 8000aec:	f043 0310 	orr.w	r3, r3, #16
 8000af0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <MX_GPIO_Init+0x8c>)
 8000af6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000afa:	f003 0310 	and.w	r3, r3, #16
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
////
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	58024400 	.word	0x58024400
 8000b14:	00000000 	.word	0x00000000

08000b18 <set_duty_cycle>:
 *  Created on: Mar 27, 2025
 *      Author: adeel.akhtar
 */
#include <Pwm_Operations.h>
int dutycycle=0;
void set_duty_cycle(int duty_percent){
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	dutycycle=(duty_percent/100.0)*3590;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	ee07 3a90 	vmov	s15, r3
 8000b26:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b2a:	ed9f 5b15 	vldr	d5, [pc, #84]	@ 8000b80 <set_duty_cycle+0x68>
 8000b2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b32:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 8000b88 <set_duty_cycle+0x70>
 8000b36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b3a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b3e:	ee17 2a90 	vmov	r2, s15
 8000b42:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <set_duty_cycle+0x78>)
 8000b44:	601a      	str	r2, [r3, #0]

	if (dutycycle < min_ticks)
 8000b46:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <set_duty_cycle+0x78>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	da02      	bge.n	8000b54 <set_duty_cycle+0x3c>
		{
	        dutycycle = min_ticks;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <set_duty_cycle+0x78>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
	    }

	if (dutycycle > max_ticks)
 8000b54:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <set_duty_cycle+0x78>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f5b3 6f4a 	cmp.w	r3, #3232	@ 0xca0
 8000b5c:	db03      	blt.n	8000b66 <set_duty_cycle+0x4e>
		{
	        dutycycle = max_ticks;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <set_duty_cycle+0x78>)
 8000b60:	f640 429f 	movw	r2, #3231	@ 0xc9f
 8000b64:	601a      	str	r2, [r3, #0]
	    }


	TIM1->CCR1 = dutycycle;
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <set_duty_cycle+0x78>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <set_duty_cycle+0x7c>)
 8000b6c:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	f3af 8000 	nop.w
 8000b80:	00000000 	.word	0x00000000
 8000b84:	40590000 	.word	0x40590000
 8000b88:	00000000 	.word	0x00000000
 8000b8c:	40ac0c00 	.word	0x40ac0c00
 8000b90:	24000264 	.word	0x24000264
 8000b94:	40010000 	.word	0x40010000

08000b98 <decrement_duty_cycle>:

void decrement_duty_cycle(){
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

    dutycycle -= IDD_ticks;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <decrement_duty_cycle+0x60>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	ee07 3a90 	vmov	s15, r3
 8000ba4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ba8:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8000bf0 <decrement_duty_cycle+0x58>
 8000bac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000bb0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000bb4:	ee17 2a90 	vmov	r2, s15
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <decrement_duty_cycle+0x60>)
 8000bba:	601a      	str	r2, [r3, #0]
    if (dutycycle < min_ticks)
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <decrement_duty_cycle+0x60>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	da02      	bge.n	8000bca <decrement_duty_cycle+0x32>
    {
        dutycycle = min_ticks;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <decrement_duty_cycle+0x60>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
    }

    if (dutycycle > max_ticks)
 8000bca:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <decrement_duty_cycle+0x60>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f5b3 6f4a 	cmp.w	r3, #3232	@ 0xca0
 8000bd2:	db03      	blt.n	8000bdc <decrement_duty_cycle+0x44>
    {
        dutycycle = max_ticks;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <decrement_duty_cycle+0x60>)
 8000bd6:	f640 429f 	movw	r2, #3231	@ 0xc9f
 8000bda:	601a      	str	r2, [r3, #0]
    }

    TIM1->CCR1=dutycycle;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <decrement_duty_cycle+0x60>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <decrement_duty_cycle+0x64>)
 8000be2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	cccccccd 	.word	0xcccccccd
 8000bf4:	401ccccc 	.word	0x401ccccc
 8000bf8:	24000264 	.word	0x24000264
 8000bfc:	40010000 	.word	0x40010000

08000c00 <increment_duty_cycle>:

void increment_duty_cycle(){
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

    dutycycle += IDD_ticks;
 8000c04:	4b16      	ldr	r3, [pc, #88]	@ (8000c60 <increment_duty_cycle+0x60>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	ee07 3a90 	vmov	s15, r3
 8000c0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c10:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8000c58 <increment_duty_cycle+0x58>
 8000c14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c18:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c1c:	ee17 2a90 	vmov	r2, s15
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <increment_duty_cycle+0x60>)
 8000c22:	601a      	str	r2, [r3, #0]

    if (dutycycle < min_ticks)
 8000c24:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <increment_duty_cycle+0x60>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	da02      	bge.n	8000c32 <increment_duty_cycle+0x32>
    {
        dutycycle = min_ticks;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <increment_duty_cycle+0x60>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
    }

    if (dutycycle > max_ticks)
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <increment_duty_cycle+0x60>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f5b3 6f4a 	cmp.w	r3, #3232	@ 0xca0
 8000c3a:	db03      	blt.n	8000c44 <increment_duty_cycle+0x44>
    {
        dutycycle = max_ticks;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <increment_duty_cycle+0x60>)
 8000c3e:	f640 429f 	movw	r2, #3231	@ 0xc9f
 8000c42:	601a      	str	r2, [r3, #0]
    }

    TIM1->CCR1=dutycycle;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <increment_duty_cycle+0x60>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <increment_duty_cycle+0x64>)
 8000c4a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	cccccccd 	.word	0xcccccccd
 8000c5c:	401ccccc 	.word	0x401ccccc
 8000c60:	24000264 	.word	0x24000264
 8000c64:	40010000 	.word	0x40010000

08000c68 <get_inputs>:
float scaled_BV=0;                  //scaled battery voltage
float scaled_BC=0;                  //scaled battery current
float battery_power = 0;

//-----------------------------------------------------------------------------------------------------------------------------------------------
void get_inputs(){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	get_calibrated_voltage();
 8000c6c:	f7ff fdd0 	bl	8000810 <get_calibrated_voltage>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <MX_TIM1_Init>:
#include "Timer.h"

TIM_HandleTypeDef htim1;

 void MX_TIM1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b09c      	sub	sp, #112	@ 0x70
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c94:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2234      	movs	r2, #52	@ 0x34
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f00b f91f 	bl	800bef2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cb4:	4b47      	ldr	r3, [pc, #284]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000cb6:	4a48      	ldr	r2, [pc, #288]	@ (8000dd8 <MX_TIM1_Init+0x164>)
 8000cb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cba:	4b46      	ldr	r3, [pc, #280]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b44      	ldr	r3, [pc, #272]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3590;
 8000cc6:	4b43      	ldr	r3, [pc, #268]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000cc8:	f640 6206 	movw	r2, #3590	@ 0xe06
 8000ccc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cce:	4b41      	ldr	r3, [pc, #260]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cda:	4b3e      	ldr	r3, [pc, #248]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000cdc:	2280      	movs	r2, #128	@ 0x80
 8000cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ce0:	483c      	ldr	r0, [pc, #240]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000ce2:	f008 f921 	bl	8008f28 <HAL_TIM_Base_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000cec:	f000 f908 	bl	8000f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cf6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4835      	ldr	r0, [pc, #212]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000cfe:	f008 fbed 	bl	80094dc <HAL_TIM_ConfigClockSource>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d08:	f000 f8fa 	bl	8000f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d0c:	4831      	ldr	r0, [pc, #196]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000d0e:	f008 f962 	bl	8008fd6 <HAL_TIM_PWM_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d18:	f000 f8f2 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4829      	ldr	r0, [pc, #164]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000d30:	f009 f906 	bl	8009f40 <HAL_TIMEx_MasterConfigSynchronization>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000d3a:	f000 f8e1 	bl	8000f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3e:	2360      	movs	r3, #96	@ 0x60
 8000d40:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d46:	2300      	movs	r3, #0
 8000d48:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4619      	mov	r1, r3
 8000d62:	481c      	ldr	r0, [pc, #112]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000d64:	f008 faa6 	bl	80092b4 <HAL_TIM_PWM_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000d6e:	f000 f8c7 	bl	8000f00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000da8:	f009 f958 	bl	800a05c <HAL_TIMEx_ConfigBreakDeadTime>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000db2:	f000 f8a5 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000db6:	4807      	ldr	r0, [pc, #28]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000db8:	f000 f9ce 	bl	8001158 <HAL_TIM_MspPostInit>
  TIM1->CCR1 = 0;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <MX_TIM1_Init+0x164>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4803      	ldr	r0, [pc, #12]	@ (8000dd4 <MX_TIM1_Init+0x160>)
 8000dc6:	f008 f967 	bl	8009098 <HAL_TIM_PWM_Start>
}
 8000dca:	bf00      	nop
 8000dcc:	3770      	adds	r7, #112	@ 0x70
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	24000274 	.word	0x24000274
 8000dd8:	40010000 	.word	0x40010000

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000de0:	f000 f862 	bl	8000ea8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de4:	f000 fc9e 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de8:	f7ff fdd8 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dec:	f7ff fe4a 	bl	8000a84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000df0:	f000 f83a 	bl	8000e68 <MX_DMA_Init>
  MX_TIM1_Init();
 8000df4:	f7ff ff3e 	bl	8000c74 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000df8:	f7ff fc72 	bl	80006e0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <main+0x84>)
 8000dfe:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e02:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e04:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <main+0x84>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <main+0x84>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000e10:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <main+0x84>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <main+0x84>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000e1c:	4910      	ldr	r1, [pc, #64]	@ (8000e60 <main+0x84>)
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 fbaa 	bl	8001578 <BSP_COM_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <main+0x52>
  {
    Error_Handler();
 8000e2a:	f000 f869 	bl	8000f00 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  set_duty_cycle(42);
 8000e2e:	202a      	movs	r0, #42	@ 0x2a
 8000e30:	f7ff fe72 	bl	8000b18 <set_duty_cycle>

  while (1)
  {
	get_inputs();
 8000e34:	f7ff ff18 	bl	8000c68 <get_inputs>
	if(scaled_SV>1){
 8000e38:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <main+0x88>)
 8000e3a:	edd3 7a00 	vldr	s15, [r3]
 8000e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4a:	dd02      	ble.n	8000e52 <main+0x76>
		increment_duty_cycle();
 8000e4c:	f7ff fed8 	bl	8000c00 <increment_duty_cycle>
 8000e50:	e001      	b.n	8000e56 <main+0x7a>
	}
	else{
		decrement_duty_cycle();
 8000e52:	f7ff fea1 	bl	8000b98 <decrement_duty_cycle>
	}
	 HAL_Delay(100);
 8000e56:	2064      	movs	r0, #100	@ 0x64
 8000e58:	f000 fcf6 	bl	8001848 <HAL_Delay>
	get_inputs();
 8000e5c:	e7ea      	b.n	8000e34 <main+0x58>
 8000e5e:	bf00      	nop
 8000e60:	240002c0 	.word	0x240002c0
 8000e64:	24000268 	.word	0x24000268

08000e68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <MX_DMA_Init+0x3c>)
 8000e70:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000e74:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea4 <MX_DMA_Init+0x3c>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <MX_DMA_Init+0x3c>)
 8000e80:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	200b      	movs	r0, #11
 8000e92:	f002 f850 	bl	8002f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e96:	200b      	movs	r0, #11
 8000e98:	f002 f867 	bl	8002f6a <HAL_NVIC_EnableIRQ>

}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	58024400 	.word	0x58024400

08000ea8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eba:	f002 f871 	bl	8002fa0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000eca:	231f      	movs	r3, #31
 8000ecc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ece:	2387      	movs	r3, #135	@ 0x87
 8000ed0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000eda:	2301      	movs	r3, #1
 8000edc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eea:	463b      	mov	r3, r7
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 f88f 	bl	8003010 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f002 f86c 	bl	8002fd0 <HAL_MPU_Enable>

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <HAL_MspInit+0x30>)
 8000f18:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000f1c:	4a08      	ldr	r2, [pc, #32]	@ (8000f40 <HAL_MspInit+0x30>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_MspInit+0x30>)
 8000f28:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	58024400 	.word	0x58024400

08000f44 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0bc      	sub	sp, #240	@ 0xf0
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f5c:	f107 0318 	add.w	r3, r7, #24
 8000f60:	22c0      	movs	r2, #192	@ 0xc0
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f00a ffc4 	bl	800bef2 <memset>
  if(hadc->Instance==ADC1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a62      	ldr	r2, [pc, #392]	@ (80010f8 <HAL_ADC_MspInit+0x1b4>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	f040 80bc 	bne.w	80010ee <HAL_ADC_MspInit+0x1aa>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000f82:	2320      	movs	r3, #32
 8000f84:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000f86:	2381      	movs	r3, #129	@ 0x81
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 6;
 8000f8a:	2306      	movs	r3, #6
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000f96:	2340      	movs	r3, #64	@ 0x40
 8000f98:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	4618      	mov	r0, r3
 8000fae:	f005 fbb1 	bl	8006714 <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000fb8:	f7ff ffa2 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fbc:	4b4f      	ldr	r3, [pc, #316]	@ (80010fc <HAL_ADC_MspInit+0x1b8>)
 8000fbe:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000fc2:	4a4e      	ldr	r2, [pc, #312]	@ (80010fc <HAL_ADC_MspInit+0x1b8>)
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80010fc <HAL_ADC_MspInit+0x1b8>)
 8000fce:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000fd2:	f003 0320 	and.w	r3, r3, #32
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b48      	ldr	r3, [pc, #288]	@ (80010fc <HAL_ADC_MspInit+0x1b8>)
 8000fdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fe0:	4a46      	ldr	r2, [pc, #280]	@ (80010fc <HAL_ADC_MspInit+0x1b8>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fea:	4b44      	ldr	r3, [pc, #272]	@ (80010fc <HAL_ADC_MspInit+0x1b8>)
 8000fec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff8:	4b40      	ldr	r3, [pc, #256]	@ (80010fc <HAL_ADC_MspInit+0x1b8>)
 8000ffa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ffe:	4a3f      	ldr	r2, [pc, #252]	@ (80010fc <HAL_ADC_MspInit+0x1b8>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001008:	4b3c      	ldr	r3, [pc, #240]	@ (80010fc <HAL_ADC_MspInit+0x1b8>)
 800100a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b39      	ldr	r3, [pc, #228]	@ (80010fc <HAL_ADC_MspInit+0x1b8>)
 8001018:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800101c:	4a37      	ldr	r2, [pc, #220]	@ (80010fc <HAL_ADC_MspInit+0x1b8>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001026:	4b35      	ldr	r3, [pc, #212]	@ (80010fc <HAL_ADC_MspInit+0x1b8>)
 8001028:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001034:	2380      	movs	r3, #128	@ 0x80
 8001036:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800103a:	2303      	movs	r3, #3
 800103c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800104a:	4619      	mov	r1, r3
 800104c:	482c      	ldr	r0, [pc, #176]	@ (8001100 <HAL_ADC_MspInit+0x1bc>)
 800104e:	f004 f999 	bl	8005384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001052:	2320      	movs	r3, #32
 8001054:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001058:	2303      	movs	r3, #3
 800105a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001064:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001068:	4619      	mov	r1, r3
 800106a:	4826      	ldr	r0, [pc, #152]	@ (8001104 <HAL_ADC_MspInit+0x1c0>)
 800106c:	f004 f98a 	bl	8005384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001070:	2301      	movs	r3, #1
 8001072:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001076:	2303      	movs	r3, #3
 8001078:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001086:	4619      	mov	r1, r3
 8001088:	481f      	ldr	r0, [pc, #124]	@ (8001108 <HAL_ADC_MspInit+0x1c4>)
 800108a:	f004 f97b 	bl	8005384 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800108e:	4b1f      	ldr	r3, [pc, #124]	@ (800110c <HAL_ADC_MspInit+0x1c8>)
 8001090:	4a1f      	ldr	r2, [pc, #124]	@ (8001110 <HAL_ADC_MspInit+0x1cc>)
 8001092:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001094:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <HAL_ADC_MspInit+0x1c8>)
 8001096:	2209      	movs	r2, #9
 8001098:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109a:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <HAL_ADC_MspInit+0x1c8>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <HAL_ADC_MspInit+0x1c8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010a6:	4b19      	ldr	r3, [pc, #100]	@ (800110c <HAL_ADC_MspInit+0x1c8>)
 80010a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ae:	4b17      	ldr	r3, [pc, #92]	@ (800110c <HAL_ADC_MspInit+0x1c8>)
 80010b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <HAL_ADC_MspInit+0x1c8>)
 80010b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <HAL_ADC_MspInit+0x1c8>)
 80010c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <HAL_ADC_MspInit+0x1c8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <HAL_ADC_MspInit+0x1c8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010d2:	480e      	ldr	r0, [pc, #56]	@ (800110c <HAL_ADC_MspInit+0x1c8>)
 80010d4:	f001 ffdc 	bl	8003090 <HAL_DMA_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_ADC_MspInit+0x19e>
    {
      Error_Handler();
 80010de:	f7ff ff0f 	bl	8000f00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a09      	ldr	r2, [pc, #36]	@ (800110c <HAL_ADC_MspInit+0x1c8>)
 80010e6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80010e8:	4a08      	ldr	r2, [pc, #32]	@ (800110c <HAL_ADC_MspInit+0x1c8>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010ee:	bf00      	nop
 80010f0:	37f0      	adds	r7, #240	@ 0xf0
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40022000 	.word	0x40022000
 80010fc:	58024400 	.word	0x58024400
 8001100:	58020000 	.word	0x58020000
 8001104:	58020800 	.word	0x58020800
 8001108:	58020400 	.word	0x58020400
 800110c:	240002d0 	.word	0x240002d0
 8001110:	40020010 	.word	0x40020010

08001114 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <HAL_TIM_Base_MspInit+0x3c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10e      	bne.n	8001144 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <HAL_TIM_Base_MspInit+0x40>)
 8001128:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800112c:	4a09      	ldr	r2, [pc, #36]	@ (8001154 <HAL_TIM_Base_MspInit+0x40>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <HAL_TIM_Base_MspInit+0x40>)
 8001138:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	40010000 	.word	0x40010000
 8001154:	58024400 	.word	0x58024400

08001158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a13      	ldr	r2, [pc, #76]	@ (80011c4 <HAL_TIM_MspPostInit+0x6c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d11f      	bne.n	80011ba <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <HAL_TIM_MspPostInit+0x70>)
 800117c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001180:	4a11      	ldr	r2, [pc, #68]	@ (80011c8 <HAL_TIM_MspPostInit+0x70>)
 8001182:	f043 0310 	orr.w	r3, r3, #16
 8001186:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800118a:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <HAL_TIM_MspPostInit+0x70>)
 800118c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001190:	f003 0310 	and.w	r3, r3, #16
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001198:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800119c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <HAL_TIM_MspPostInit+0x74>)
 80011b6:	f004 f8e5 	bl	8005384 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40010000 	.word	0x40010000
 80011c8:	58024400 	.word	0x58024400
 80011cc:	58021000 	.word	0x58021000

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <NMI_Handler+0x4>

080011d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <MemManage_Handler+0x4>

080011e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001226:	f000 faef 	bl	8001808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001234:	4802      	ldr	r0, [pc, #8]	@ (8001240 <DMA1_Stream0_IRQHandler+0x10>)
 8001236:	f002 fd23 	bl	8003c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	240002d0 	.word	0x240002d0

08001244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return 1;
 8001248:	2301      	movs	r3, #1
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_kill>:

int _kill(int pid, int sig)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800125e:	f00a fe9b 	bl	800bf98 <__errno>
 8001262:	4603      	mov	r3, r0
 8001264:	2216      	movs	r2, #22
 8001266:	601a      	str	r2, [r3, #0]
  return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_exit>:

void _exit (int status)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ffe7 	bl	8001254 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001286:	bf00      	nop
 8001288:	e7fd      	b.n	8001286 <_exit+0x12>

0800128a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e00a      	b.n	80012b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800129c:	f3af 8000 	nop.w
 80012a0:	4601      	mov	r1, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	60ba      	str	r2, [r7, #8]
 80012a8:	b2ca      	uxtb	r2, r1
 80012aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbf0      	blt.n	800129c <_read+0x12>
  }

  return len;
 80012ba:	687b      	ldr	r3, [r7, #4]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	e009      	b.n	80012ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	60ba      	str	r2, [r7, #8]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f9ac 	bl	800163c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3301      	adds	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dbf1      	blt.n	80012d6 <_write+0x12>
  }
  return len;
 80012f2:	687b      	ldr	r3, [r7, #4]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_close>:

int _close(int file)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001324:	605a      	str	r2, [r3, #4]
  return 0;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_isatty>:

int _isatty(int file)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800133c:	2301      	movs	r3, #1
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800134a:	b480      	push	{r7}
 800134c:	b085      	sub	sp, #20
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	@ (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f00a fe00 	bl	800bf98 <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	@ (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	24100000 	.word	0x24100000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	24000348 	.word	0x24000348
 80013cc:	24000538 	.word	0x24000538

080013d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013d4:	4b3e      	ldr	r3, [pc, #248]	@ (80014d0 <SystemInit+0x100>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013da:	4a3d      	ldr	r2, [pc, #244]	@ (80014d0 <SystemInit+0x100>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013e4:	4b3b      	ldr	r3, [pc, #236]	@ (80014d4 <SystemInit+0x104>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 030f 	and.w	r3, r3, #15
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d807      	bhi.n	8001400 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013f0:	4b38      	ldr	r3, [pc, #224]	@ (80014d4 <SystemInit+0x104>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 030f 	bic.w	r3, r3, #15
 80013f8:	4a36      	ldr	r2, [pc, #216]	@ (80014d4 <SystemInit+0x104>)
 80013fa:	f043 0303 	orr.w	r3, r3, #3
 80013fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001400:	4b35      	ldr	r3, [pc, #212]	@ (80014d8 <SystemInit+0x108>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a34      	ldr	r2, [pc, #208]	@ (80014d8 <SystemInit+0x108>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800140c:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <SystemInit+0x108>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001412:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <SystemInit+0x108>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4930      	ldr	r1, [pc, #192]	@ (80014d8 <SystemInit+0x108>)
 8001418:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <SystemInit+0x10c>)
 800141a:	4013      	ands	r3, r2
 800141c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800141e:	4b2d      	ldr	r3, [pc, #180]	@ (80014d4 <SystemInit+0x104>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800142a:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <SystemInit+0x104>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 030f 	bic.w	r3, r3, #15
 8001432:	4a28      	ldr	r2, [pc, #160]	@ (80014d4 <SystemInit+0x104>)
 8001434:	f043 0303 	orr.w	r3, r3, #3
 8001438:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <SystemInit+0x108>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001440:	4b25      	ldr	r3, [pc, #148]	@ (80014d8 <SystemInit+0x108>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001446:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <SystemInit+0x108>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800144c:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <SystemInit+0x108>)
 800144e:	4a24      	ldr	r2, [pc, #144]	@ (80014e0 <SystemInit+0x110>)
 8001450:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <SystemInit+0x108>)
 8001454:	4a23      	ldr	r2, [pc, #140]	@ (80014e4 <SystemInit+0x114>)
 8001456:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001458:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <SystemInit+0x108>)
 800145a:	4a23      	ldr	r2, [pc, #140]	@ (80014e8 <SystemInit+0x118>)
 800145c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <SystemInit+0x108>)
 8001460:	2200      	movs	r2, #0
 8001462:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001464:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <SystemInit+0x108>)
 8001466:	4a20      	ldr	r2, [pc, #128]	@ (80014e8 <SystemInit+0x118>)
 8001468:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800146a:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <SystemInit+0x108>)
 800146c:	2200      	movs	r2, #0
 800146e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <SystemInit+0x108>)
 8001472:	4a1d      	ldr	r2, [pc, #116]	@ (80014e8 <SystemInit+0x118>)
 8001474:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <SystemInit+0x108>)
 8001478:	2200      	movs	r2, #0
 800147a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800147c:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <SystemInit+0x108>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a15      	ldr	r2, [pc, #84]	@ (80014d8 <SystemInit+0x108>)
 8001482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001486:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <SystemInit+0x108>)
 800148a:	2200      	movs	r2, #0
 800148c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <SystemInit+0x108>)
 8001490:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001494:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d113      	bne.n	80014c4 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800149c:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <SystemInit+0x108>)
 800149e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80014a2:	4a0d      	ldr	r2, [pc, #52]	@ (80014d8 <SystemInit+0x108>)
 80014a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014a8:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <SystemInit+0x11c>)
 80014ae:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014b2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <SystemInit+0x108>)
 80014b6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80014ba:	4a07      	ldr	r2, [pc, #28]	@ (80014d8 <SystemInit+0x108>)
 80014bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014c0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00
 80014d4:	52002000 	.word	0x52002000
 80014d8:	58024400 	.word	0x58024400
 80014dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80014e0:	02020200 	.word	0x02020200
 80014e4:	01ff0000 	.word	0x01ff0000
 80014e8:	01010280 	.word	0x01010280
 80014ec:	52004000 	.word	0x52004000

080014f0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <ExitRun0Mode+0x2c>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4a08      	ldr	r2, [pc, #32]	@ (800151c <ExitRun0Mode+0x2c>)
 80014fa:	f023 0302 	bic.w	r3, r3, #2
 80014fe:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001500:	bf00      	nop
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <ExitRun0Mode+0x2c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f9      	beq.n	8001502 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800150e:	bf00      	nop
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	58024800 	.word	0x58024800

08001520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001520:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800155c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001524:	f7ff ffe4 	bl	80014f0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001528:	f7ff ff52 	bl	80013d0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800152e:	490d      	ldr	r1, [pc, #52]	@ (8001564 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001530:	4a0d      	ldr	r2, [pc, #52]	@ (8001568 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001544:	4c0a      	ldr	r4, [pc, #40]	@ (8001570 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001552:	f00a fd27 	bl	800bfa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001556:	f7ff fc41 	bl	8000ddc <main>
  bx  lr
 800155a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800155c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001560:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001564:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001568:	0800e054 	.word	0x0800e054
  ldr r2, =_sbss
 800156c:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001570:	24000534 	.word	0x24000534

08001574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC_IRQHandler>
	...

08001578 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800158e:	f06f 0301 	mvn.w	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	e018      	b.n	80015c8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2294      	movs	r2, #148	@ 0x94
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	4a0d      	ldr	r2, [pc, #52]	@ (80015d4 <BSP_COM_Init+0x5c>)
 80015a0:	4413      	add	r3, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f866 	bl	8001674 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2294      	movs	r2, #148	@ 0x94
 80015ac:	fb02 f303 	mul.w	r3, r2, r3
 80015b0:	4a08      	ldr	r2, [pc, #32]	@ (80015d4 <BSP_COM_Init+0x5c>)
 80015b2:	4413      	add	r3, r2
 80015b4:	6839      	ldr	r1, [r7, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f80e 	bl	80015d8 <MX_USART3_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80015c2:	f06f 0303 	mvn.w	r3, #3
 80015c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80015c8:	68fb      	ldr	r3, [r7, #12]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2400034c 	.word	0x2400034c

080015d8 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <MX_USART3_Init+0x60>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	220c      	movs	r2, #12
 80015f6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	895b      	ldrh	r3, [r3, #10]
 80015fc:	461a      	mov	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	891b      	ldrh	r3, [r3, #8]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	899b      	ldrh	r3, [r3, #12]
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001624:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f008 fda4 	bl	800a174 <HAL_UART_Init>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	24000008 	.word	0x24000008

0800163c <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <__io_putchar+0x30>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	2394      	movs	r3, #148	@ 0x94
 800164c:	fb02 f303 	mul.w	r3, r2, r3
 8001650:	4a07      	ldr	r2, [pc, #28]	@ (8001670 <__io_putchar+0x34>)
 8001652:	1898      	adds	r0, r3, r2
 8001654:	1d39      	adds	r1, r7, #4
 8001656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800165a:	2201      	movs	r2, #1
 800165c:	f008 fde4 	bl	800a228 <HAL_UART_Transmit>
  return ch;
 8001660:	687b      	ldr	r3, [r7, #4]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	240003e0 	.word	0x240003e0
 8001670:	2400034c 	.word	0x2400034c

08001674 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800167c:	4b27      	ldr	r3, [pc, #156]	@ (800171c <COM1_MspInit+0xa8>)
 800167e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001682:	4a26      	ldr	r2, [pc, #152]	@ (800171c <COM1_MspInit+0xa8>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800168c:	4b23      	ldr	r3, [pc, #140]	@ (800171c <COM1_MspInit+0xa8>)
 800168e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <COM1_MspInit+0xa8>)
 800169c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016a0:	4a1e      	ldr	r2, [pc, #120]	@ (800171c <COM1_MspInit+0xa8>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016aa:	4b1c      	ldr	r3, [pc, #112]	@ (800171c <COM1_MspInit+0xa8>)
 80016ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80016b8:	4b18      	ldr	r3, [pc, #96]	@ (800171c <COM1_MspInit+0xa8>)
 80016ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80016be:	4a17      	ldr	r2, [pc, #92]	@ (800171c <COM1_MspInit+0xa8>)
 80016c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016c4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <COM1_MspInit+0xa8>)
 80016ca:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80016ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80016d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016da:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e0:	2302      	movs	r3, #2
 80016e2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80016e8:	2307      	movs	r3, #7
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	480b      	ldr	r0, [pc, #44]	@ (8001720 <COM1_MspInit+0xac>)
 80016f4:	f003 fe46 	bl	8005384 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80016f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016fc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001702:	2307      	movs	r3, #7
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4804      	ldr	r0, [pc, #16]	@ (8001720 <COM1_MspInit+0xac>)
 800170e:	f003 fe39 	bl	8005384 <HAL_GPIO_Init>
}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	@ 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	58024400 	.word	0x58024400
 8001720:	58020c00 	.word	0x58020c00

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172a:	2003      	movs	r0, #3
 800172c:	f001 fbf8 	bl	8002f20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001730:	f004 fe1a 	bl	8006368 <HAL_RCC_GetSysClockFreq>
 8001734:	4602      	mov	r2, r0
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_Init+0x68>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	0a1b      	lsrs	r3, r3, #8
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	4913      	ldr	r1, [pc, #76]	@ (8001790 <HAL_Init+0x6c>)
 8001742:	5ccb      	ldrb	r3, [r1, r3]
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	fa22 f303 	lsr.w	r3, r2, r3
 800174c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800174e:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_Init+0x68>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	4a0e      	ldr	r2, [pc, #56]	@ (8001790 <HAL_Init+0x6c>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	f003 031f 	and.w	r3, r3, #31
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	fa22 f303 	lsr.w	r3, r2, r3
 8001764:	4a0b      	ldr	r2, [pc, #44]	@ (8001794 <HAL_Init+0x70>)
 8001766:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001768:	4a0b      	ldr	r2, [pc, #44]	@ (8001798 <HAL_Init+0x74>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176e:	2000      	movs	r0, #0
 8001770:	f000 f814 	bl	800179c <HAL_InitTick>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e002      	b.n	8001784 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800177e:	f7ff fbc7 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	58024400 	.word	0x58024400
 8001790:	0800dc9c 	.word	0x0800dc9c
 8001794:	24000004 	.word	0x24000004
 8001798:	24000000 	.word	0x24000000

0800179c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017a4:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_InitTick+0x60>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e021      	b.n	80017f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017b0:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <HAL_InitTick+0x64>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_InitTick+0x60>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017be:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 fbdd 	bl	8002f86 <HAL_SYSTICK_Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00e      	b.n	80017f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d80a      	bhi.n	80017f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017dc:	2200      	movs	r2, #0
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f001 fba7 	bl	8002f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e8:	4a06      	ldr	r2, [pc, #24]	@ (8001804 <HAL_InitTick+0x68>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e000      	b.n	80017f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	24000010 	.word	0x24000010
 8001800:	24000000 	.word	0x24000000
 8001804:	2400000c 	.word	0x2400000c

08001808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_IncTick+0x20>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_IncTick+0x24>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a04      	ldr	r2, [pc, #16]	@ (800182c <HAL_IncTick+0x24>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	24000010 	.word	0x24000010
 800182c:	240003e4 	.word	0x240003e4

08001830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return uwTick;
 8001834:	4b03      	ldr	r3, [pc, #12]	@ (8001844 <HAL_GetTick+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	240003e4 	.word	0x240003e4

08001848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff ffee 	bl	8001830 <HAL_GetTick>
 8001854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d005      	beq.n	800186e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001862:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <HAL_Delay+0x44>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800186e:	bf00      	nop
 8001870:	f7ff ffde 	bl	8001830 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d8f7      	bhi.n	8001870 <HAL_Delay+0x28>
  {
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	24000010 	.word	0x24000010

08001890 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	609a      	str	r2, [r3, #8]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	609a      	str	r2, [r3, #8]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001908:	2b00      	cmp	r3, #0
 800190a:	d107      	bne.n	800191c <LL_ADC_SetChannelPreselection+0x24>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	0e9b      	lsrs	r3, r3, #26
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	2201      	movs	r2, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	e015      	b.n	8001948 <LL_ADC_SetChannelPreselection+0x50>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	fa93 f3a3 	rbit	r3, r3
 8001926:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001932:	2320      	movs	r3, #32
 8001934:	e003      	b.n	800193e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f003 031f 	and.w	r3, r3, #31
 8001942:	2201      	movs	r2, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	69d2      	ldr	r2, [r2, #28]
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001952:	bf00      	nop
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800195e:	b480      	push	{r7}
 8001960:	b087      	sub	sp, #28
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3360      	adds	r3, #96	@ 0x60
 8001970:	461a      	mov	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	430b      	orrs	r3, r1
 800198c:	431a      	orrs	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001992:	bf00      	nop
 8001994:	371c      	adds	r7, #28
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800199e:	b480      	push	{r7}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	431a      	orrs	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	611a      	str	r2, [r3, #16]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3360      	adds	r3, #96	@ 0x60
 80019e0:	461a      	mov	r2, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	431a      	orrs	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	601a      	str	r2, [r3, #0]
  }
}
 80019fa:	bf00      	nop
 80019fc:	371c      	adds	r7, #28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3330      	adds	r3, #48	@ 0x30
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	4413      	add	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	211f      	movs	r1, #31
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	401a      	ands	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	0e9b      	lsrs	r3, r3, #26
 8001a64:	f003 011f 	and.w	r1, r3, #31
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	431a      	orrs	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a78:	bf00      	nop
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60da      	str	r2, [r3, #12]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b087      	sub	sp, #28
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3314      	adds	r3, #20
 8001aba:	461a      	mov	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	0e5b      	lsrs	r3, r3, #25
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	4413      	add	r3, r2
 8001ac8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	0d1b      	lsrs	r3, r3, #20
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	2107      	movs	r1, #7
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	401a      	ands	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	0d1b      	lsrs	r3, r3, #20
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	431a      	orrs	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0318 	and.w	r3, r3, #24
 8001b22:	4908      	ldr	r1, [pc, #32]	@ (8001b44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b24:	40d9      	lsrs	r1, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	400b      	ands	r3, r1
 8001b2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	000fffff 	.word	0x000fffff

08001b48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 031f 	and.w	r3, r3, #31
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	4b04      	ldr	r3, [pc, #16]	@ (8001b84 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6093      	str	r3, [r2, #8]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	5fffffc0 	.word	0x5fffffc0

08001b88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b9c:	d101      	bne.n	8001ba2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	6fffffc0 	.word	0x6fffffc0

08001bd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bec:	d101      	bne.n	8001bf2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <LL_ADC_Enable+0x24>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	f043 0201 	orr.w	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	7fffffc0 	.word	0x7fffffc0

08001c28 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <LL_ADC_Disable+0x24>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	f043 0202 	orr.w	r2, r3, #2
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	7fffffc0 	.word	0x7fffffc0

08001c50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <LL_ADC_IsEnabled+0x18>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <LL_ADC_IsEnabled+0x1a>
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d101      	bne.n	8001c8e <LL_ADC_IsDisableOngoing+0x18>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <LL_ADC_IsDisableOngoing+0x1a>
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <LL_ADC_REG_StartConversion+0x24>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	f043 0204 	orr.w	r2, r3, #4
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	7fffffc0 	.word	0x7fffffc0

08001cc4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d101      	bne.n	8001cdc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d101      	bne.n	8001d02 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b089      	sub	sp, #36	@ 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e138      	b.n	8001f9c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff f903 	bl	8000f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff19 	bl	8001b88 <LL_ADC_IsDeepPowerDownEnabled>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d004      	beq.n	8001d66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff feff 	bl	8001b64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff34 	bl	8001bd8 <LL_ADC_IsInternalRegulatorEnabled>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d114      	bne.n	8001da0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff18 	bl	8001bb0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d80:	4b88      	ldr	r3, [pc, #544]	@ (8001fa4 <HAL_ADC_Init+0x294>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	4a88      	ldr	r2, [pc, #544]	@ (8001fa8 <HAL_ADC_Init+0x298>)
 8001d88:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8c:	099b      	lsrs	r3, r3, #6
 8001d8e:	3301      	adds	r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d92:	e002      	b.n	8001d9a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f9      	bne.n	8001d94 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff17 	bl	8001bd8 <LL_ADC_IsInternalRegulatorEnabled>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10d      	bne.n	8001dcc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db4:	f043 0210 	orr.w	r2, r3, #16
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff77 	bl	8001cc4 <LL_ADC_REG_IsConversionOngoing>
 8001dd6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f040 80d2 	bne.w	8001f8a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f040 80ce 	bne.w	8001f8a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001df6:	f043 0202 	orr.w	r2, r3, #2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff24 	bl	8001c50 <LL_ADC_IsEnabled>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d110      	bne.n	8001e30 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e0e:	4867      	ldr	r0, [pc, #412]	@ (8001fac <HAL_ADC_Init+0x29c>)
 8001e10:	f7ff ff1e 	bl	8001c50 <LL_ADC_IsEnabled>
 8001e14:	4604      	mov	r4, r0
 8001e16:	4866      	ldr	r0, [pc, #408]	@ (8001fb0 <HAL_ADC_Init+0x2a0>)
 8001e18:	f7ff ff1a 	bl	8001c50 <LL_ADC_IsEnabled>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4323      	orrs	r3, r4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4862      	ldr	r0, [pc, #392]	@ (8001fb4 <HAL_ADC_Init+0x2a4>)
 8001e2c:	f7ff fd30 	bl	8001890 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7d5b      	ldrb	r3, [r3, #21]
 8001e34:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e3a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001e40:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7f1b      	ldrb	r3, [r3, #28]
 8001e46:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7f1b      	ldrb	r3, [r3, #28]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d106      	bne.n	8001e62 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	045b      	lsls	r3, r3, #17
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e76:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb8 <HAL_ADC_Init+0x2a8>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	69b9      	ldr	r1, [r7, #24]
 8001e8e:	430b      	orrs	r3, r1
 8001e90:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff14 	bl	8001cc4 <LL_ADC_REG_IsConversionOngoing>
 8001e9c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff21 	bl	8001cea <LL_ADC_INJ_IsConversionOngoing>
 8001ea8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d14a      	bne.n	8001f46 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d147      	bne.n	8001f46 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7d1b      	ldrb	r3, [r3, #20]
 8001eba:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	4b3c      	ldr	r3, [pc, #240]	@ (8001fbc <HAL_ADC_Init+0x2ac>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	69b9      	ldr	r1, [r7, #24]
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d11b      	bne.n	8001f1a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	4b34      	ldr	r3, [pc, #208]	@ (8001fc0 <HAL_ADC_Init+0x2b0>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ef6:	3a01      	subs	r2, #1
 8001ef8:	0411      	lsls	r1, r2, #16
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001efe:	4311      	orrs	r1, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f04:	4311      	orrs	r1, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	611a      	str	r2, [r3, #16]
 8001f18:	e007      	b.n	8001f2a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fcf5 	bl	8002930 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10c      	bne.n	8001f68 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f54:	f023 010f 	bic.w	r1, r3, #15
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	1e5a      	subs	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f66:	e007      	b.n	8001f78 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 020f 	bic.w	r2, r2, #15
 8001f76:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7c:	f023 0303 	bic.w	r3, r3, #3
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f88:	e007      	b.n	8001f9a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8e:	f043 0210 	orr.w	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3724      	adds	r7, #36	@ 0x24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd90      	pop	{r4, r7, pc}
 8001fa4:	24000000 	.word	0x24000000
 8001fa8:	053e2d63 	.word	0x053e2d63
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40022100 	.word	0x40022100
 8001fb4:	40022300 	.word	0x40022300
 8001fb8:	fff0c003 	.word	0xfff0c003
 8001fbc:	ffffbffc 	.word	0xffffbffc
 8001fc0:	fc00f81e 	.word	0xfc00f81e

08001fc4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fd0:	484f      	ldr	r0, [pc, #316]	@ (8002110 <HAL_ADC_Start_DMA+0x14c>)
 8001fd2:	f7ff fdb9 	bl	8001b48 <LL_ADC_GetMultimode>
 8001fd6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fe71 	bl	8001cc4 <LL_ADC_REG_IsConversionOngoing>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f040 808c 	bne.w	8002102 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_Start_DMA+0x34>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e087      	b.n	8002108 <HAL_ADC_Start_DMA+0x144>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b05      	cmp	r3, #5
 800200a:	d002      	beq.n	8002012 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	2b09      	cmp	r3, #9
 8002010:	d170      	bne.n	80020f4 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fb1c 	bl	8002650 <ADC_Enable>
 8002018:	4603      	mov	r3, r0
 800201a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d163      	bne.n	80020ea <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002026:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <HAL_ADC_Start_DMA+0x150>)
 8002028:	4013      	ands	r3, r2
 800202a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a38      	ldr	r2, [pc, #224]	@ (8002118 <HAL_ADC_Start_DMA+0x154>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d002      	beq.n	8002042 <HAL_ADC_Start_DMA+0x7e>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	e000      	b.n	8002044 <HAL_ADC_Start_DMA+0x80>
 8002042:	4b36      	ldr	r3, [pc, #216]	@ (800211c <HAL_ADC_Start_DMA+0x158>)
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	4293      	cmp	r3, r2
 800204a:	d002      	beq.n	8002052 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d105      	bne.n	800205e <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002056:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002062:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d006      	beq.n	8002078 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	f023 0206 	bic.w	r2, r3, #6
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	659a      	str	r2, [r3, #88]	@ 0x58
 8002076:	e002      	b.n	800207e <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	4a27      	ldr	r2, [pc, #156]	@ (8002120 <HAL_ADC_Start_DMA+0x15c>)
 8002084:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	4a26      	ldr	r2, [pc, #152]	@ (8002124 <HAL_ADC_Start_DMA+0x160>)
 800208c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	4a25      	ldr	r2, [pc, #148]	@ (8002128 <HAL_ADC_Start_DMA+0x164>)
 8002094:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	221c      	movs	r2, #28
 800209c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0210 	orr.w	r2, r2, #16
 80020b4:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020be:	4619      	mov	r1, r3
 80020c0:	4610      	mov	r0, r2
 80020c2:	f7ff fcdf 	bl	8001a84 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3340      	adds	r3, #64	@ 0x40
 80020d0:	4619      	mov	r1, r3
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f001 fb69 	bl	80037ac <HAL_DMA_Start_IT>
 80020da:	4603      	mov	r3, r0
 80020dc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fdda 	bl	8001c9c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80020e8:	e00d      	b.n	8002106 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80020f2:	e008      	b.n	8002106 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002100:	e001      	b.n	8002106 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002102:	2302      	movs	r3, #2
 8002104:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002106:	7dfb      	ldrb	r3, [r7, #23]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40022300 	.word	0x40022300
 8002114:	fffff0fe 	.word	0xfffff0fe
 8002118:	40022100 	.word	0x40022100
 800211c:	40022000 	.word	0x40022000
 8002120:	08002807 	.word	0x08002807
 8002124:	080028df 	.word	0x080028df
 8002128:	080028fb 	.word	0x080028fb

0800212c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b08d      	sub	sp, #52	@ 0x34
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4a5b      	ldr	r2, [pc, #364]	@ (80022dc <HAL_ADC_ConfigChannel+0x188>)
 800216e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x2a>
 800217a:	2302      	movs	r3, #2
 800217c:	e263      	b.n	8002646 <HAL_ADC_ConfigChannel+0x4f2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fd9a 	bl	8001cc4 <LL_ADC_REG_IsConversionOngoing>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 8248 	bne.w	8002628 <HAL_ADC_ConfigChannel+0x4d4>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	db2c      	blt.n	80021fa <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d108      	bne.n	80021be <HAL_ADC_ConfigChannel+0x6a>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0e9b      	lsrs	r3, r3, #26
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	2201      	movs	r2, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	e016      	b.n	80021ec <HAL_ADC_ConfigChannel+0x98>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	613b      	str	r3, [r7, #16]
  return result;
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80021d6:	2320      	movs	r3, #32
 80021d8:	e003      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	fab3 f383 	clz	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	2201      	movs	r2, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	69d1      	ldr	r1, [r2, #28]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	430b      	orrs	r3, r1
 80021f8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	f7ff fc10 	bl	8001a2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fd57 	bl	8001cc4 <LL_ADC_REG_IsConversionOngoing>
 8002216:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fd64 	bl	8001cea <LL_ADC_INJ_IsConversionOngoing>
 8002222:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002226:	2b00      	cmp	r3, #0
 8002228:	f040 80a2 	bne.w	8002370 <HAL_ADC_ConfigChannel+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800222c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 809e 	bne.w	8002370 <HAL_ADC_ConfigChannel+0x21c>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6819      	ldr	r1, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	461a      	mov	r2, r3
 8002242:	f7ff fc32 	bl	8001aaa <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10b      	bne.n	800226c <HAL_ADC_ConfigChannel+0x118>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	695a      	ldr	r2, [r3, #20]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	e00a      	b.n	8002282 <HAL_ADC_ConfigChannel+0x12e>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d029      	beq.n	80022e0 <HAL_ADC_ConfigChannel+0x18c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6919      	ldr	r1, [r3, #16]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	f7ff fb60 	bl	800195e <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6919      	ldr	r1, [r3, #16]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	7e5b      	ldrb	r3, [r3, #25]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d102      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x160>
 80022ae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80022b2:	e000      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x162>
 80022b4:	2300      	movs	r3, #0
 80022b6:	461a      	mov	r2, r3
 80022b8:	f7ff fb8a 	bl	80019d0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6919      	ldr	r1, [r3, #16]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	7e1b      	ldrb	r3, [r3, #24]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d102      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x17e>
 80022cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022d0:	e000      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x180>
 80022d2:	2300      	movs	r3, #0
 80022d4:	461a      	mov	r2, r3
 80022d6:	f7ff fb62 	bl	800199e <LL_ADC_SetDataRightShift>
 80022da:	e049      	b.n	8002370 <HAL_ADC_ConfigChannel+0x21c>
 80022dc:	47ff0000 	.word	0x47ff0000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	069b      	lsls	r3, r3, #26
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d107      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1b0>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002302:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800230a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	069b      	lsls	r3, r3, #26
 8002314:	429a      	cmp	r2, r3
 8002316:	d107      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x1d4>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002326:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800232e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	069b      	lsls	r3, r3, #26
 8002338:	429a      	cmp	r2, r3
 800233a:	d107      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1f8>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800234a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002352:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	069b      	lsls	r3, r3, #26
 800235c:	429a      	cmp	r2, r3
 800235e:	d107      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x21c>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800236e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fc6b 	bl	8001c50 <LL_ADC_IsEnabled>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	f040 815c 	bne.w	800263a <HAL_ADC_ConfigChannel+0x4e6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6819      	ldr	r1, [r3, #0]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	461a      	mov	r2, r3
 8002390:	f7ff fbb6 	bl	8001b00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a89      	ldr	r2, [pc, #548]	@ (80025c0 <HAL_ADC_ConfigChannel+0x46c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	f040 809a 	bne.w	80024d4 <HAL_ADC_ConfigChannel+0x380>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4986      	ldr	r1, [pc, #536]	@ (80025c4 <HAL_ADC_ConfigChannel+0x470>)
 80023aa:	428b      	cmp	r3, r1
 80023ac:	d147      	bne.n	800243e <HAL_ADC_ConfigChannel+0x2ea>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4985      	ldr	r1, [pc, #532]	@ (80025c8 <HAL_ADC_ConfigChannel+0x474>)
 80023b4:	428b      	cmp	r3, r1
 80023b6:	d040      	beq.n	800243a <HAL_ADC_ConfigChannel+0x2e6>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4983      	ldr	r1, [pc, #524]	@ (80025cc <HAL_ADC_ConfigChannel+0x478>)
 80023be:	428b      	cmp	r3, r1
 80023c0:	d039      	beq.n	8002436 <HAL_ADC_ConfigChannel+0x2e2>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4982      	ldr	r1, [pc, #520]	@ (80025d0 <HAL_ADC_ConfigChannel+0x47c>)
 80023c8:	428b      	cmp	r3, r1
 80023ca:	d032      	beq.n	8002432 <HAL_ADC_ConfigChannel+0x2de>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4980      	ldr	r1, [pc, #512]	@ (80025d4 <HAL_ADC_ConfigChannel+0x480>)
 80023d2:	428b      	cmp	r3, r1
 80023d4:	d02b      	beq.n	800242e <HAL_ADC_ConfigChannel+0x2da>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	497f      	ldr	r1, [pc, #508]	@ (80025d8 <HAL_ADC_ConfigChannel+0x484>)
 80023dc:	428b      	cmp	r3, r1
 80023de:	d024      	beq.n	800242a <HAL_ADC_ConfigChannel+0x2d6>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	497d      	ldr	r1, [pc, #500]	@ (80025dc <HAL_ADC_ConfigChannel+0x488>)
 80023e6:	428b      	cmp	r3, r1
 80023e8:	d01d      	beq.n	8002426 <HAL_ADC_ConfigChannel+0x2d2>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	497c      	ldr	r1, [pc, #496]	@ (80025e0 <HAL_ADC_ConfigChannel+0x48c>)
 80023f0:	428b      	cmp	r3, r1
 80023f2:	d016      	beq.n	8002422 <HAL_ADC_ConfigChannel+0x2ce>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	497a      	ldr	r1, [pc, #488]	@ (80025e4 <HAL_ADC_ConfigChannel+0x490>)
 80023fa:	428b      	cmp	r3, r1
 80023fc:	d00f      	beq.n	800241e <HAL_ADC_ConfigChannel+0x2ca>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4979      	ldr	r1, [pc, #484]	@ (80025e8 <HAL_ADC_ConfigChannel+0x494>)
 8002404:	428b      	cmp	r3, r1
 8002406:	d008      	beq.n	800241a <HAL_ADC_ConfigChannel+0x2c6>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4977      	ldr	r1, [pc, #476]	@ (80025ec <HAL_ADC_ConfigChannel+0x498>)
 800240e:	428b      	cmp	r3, r1
 8002410:	d101      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x2c2>
 8002412:	4b77      	ldr	r3, [pc, #476]	@ (80025f0 <HAL_ADC_ConfigChannel+0x49c>)
 8002414:	e05a      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 8002416:	2300      	movs	r3, #0
 8002418:	e058      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 800241a:	4b76      	ldr	r3, [pc, #472]	@ (80025f4 <HAL_ADC_ConfigChannel+0x4a0>)
 800241c:	e056      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 800241e:	4b76      	ldr	r3, [pc, #472]	@ (80025f8 <HAL_ADC_ConfigChannel+0x4a4>)
 8002420:	e054      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 8002422:	4b70      	ldr	r3, [pc, #448]	@ (80025e4 <HAL_ADC_ConfigChannel+0x490>)
 8002424:	e052      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 8002426:	4b6e      	ldr	r3, [pc, #440]	@ (80025e0 <HAL_ADC_ConfigChannel+0x48c>)
 8002428:	e050      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 800242a:	4b74      	ldr	r3, [pc, #464]	@ (80025fc <HAL_ADC_ConfigChannel+0x4a8>)
 800242c:	e04e      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 800242e:	4b74      	ldr	r3, [pc, #464]	@ (8002600 <HAL_ADC_ConfigChannel+0x4ac>)
 8002430:	e04c      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 8002432:	4b74      	ldr	r3, [pc, #464]	@ (8002604 <HAL_ADC_ConfigChannel+0x4b0>)
 8002434:	e04a      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 8002436:	4b74      	ldr	r3, [pc, #464]	@ (8002608 <HAL_ADC_ConfigChannel+0x4b4>)
 8002438:	e048      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 800243a:	2301      	movs	r3, #1
 800243c:	e046      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4972      	ldr	r1, [pc, #456]	@ (800260c <HAL_ADC_ConfigChannel+0x4b8>)
 8002444:	428b      	cmp	r3, r1
 8002446:	d140      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x376>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	495e      	ldr	r1, [pc, #376]	@ (80025c8 <HAL_ADC_ConfigChannel+0x474>)
 800244e:	428b      	cmp	r3, r1
 8002450:	d039      	beq.n	80024c6 <HAL_ADC_ConfigChannel+0x372>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	495d      	ldr	r1, [pc, #372]	@ (80025cc <HAL_ADC_ConfigChannel+0x478>)
 8002458:	428b      	cmp	r3, r1
 800245a:	d032      	beq.n	80024c2 <HAL_ADC_ConfigChannel+0x36e>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	495b      	ldr	r1, [pc, #364]	@ (80025d0 <HAL_ADC_ConfigChannel+0x47c>)
 8002462:	428b      	cmp	r3, r1
 8002464:	d02b      	beq.n	80024be <HAL_ADC_ConfigChannel+0x36a>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	495a      	ldr	r1, [pc, #360]	@ (80025d4 <HAL_ADC_ConfigChannel+0x480>)
 800246c:	428b      	cmp	r3, r1
 800246e:	d024      	beq.n	80024ba <HAL_ADC_ConfigChannel+0x366>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4958      	ldr	r1, [pc, #352]	@ (80025d8 <HAL_ADC_ConfigChannel+0x484>)
 8002476:	428b      	cmp	r3, r1
 8002478:	d01d      	beq.n	80024b6 <HAL_ADC_ConfigChannel+0x362>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4957      	ldr	r1, [pc, #348]	@ (80025dc <HAL_ADC_ConfigChannel+0x488>)
 8002480:	428b      	cmp	r3, r1
 8002482:	d016      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x35e>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4955      	ldr	r1, [pc, #340]	@ (80025e0 <HAL_ADC_ConfigChannel+0x48c>)
 800248a:	428b      	cmp	r3, r1
 800248c:	d00f      	beq.n	80024ae <HAL_ADC_ConfigChannel+0x35a>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4954      	ldr	r1, [pc, #336]	@ (80025e4 <HAL_ADC_ConfigChannel+0x490>)
 8002494:	428b      	cmp	r3, r1
 8002496:	d008      	beq.n	80024aa <HAL_ADC_ConfigChannel+0x356>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4953      	ldr	r1, [pc, #332]	@ (80025ec <HAL_ADC_ConfigChannel+0x498>)
 800249e:	428b      	cmp	r3, r1
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x352>
 80024a2:	4b53      	ldr	r3, [pc, #332]	@ (80025f0 <HAL_ADC_ConfigChannel+0x49c>)
 80024a4:	e012      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 80024a6:	2300      	movs	r3, #0
 80024a8:	e010      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 80024aa:	4b53      	ldr	r3, [pc, #332]	@ (80025f8 <HAL_ADC_ConfigChannel+0x4a4>)
 80024ac:	e00e      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 80024ae:	4b4d      	ldr	r3, [pc, #308]	@ (80025e4 <HAL_ADC_ConfigChannel+0x490>)
 80024b0:	e00c      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 80024b2:	4b4b      	ldr	r3, [pc, #300]	@ (80025e0 <HAL_ADC_ConfigChannel+0x48c>)
 80024b4:	e00a      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 80024b6:	4b51      	ldr	r3, [pc, #324]	@ (80025fc <HAL_ADC_ConfigChannel+0x4a8>)
 80024b8:	e008      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 80024ba:	4b51      	ldr	r3, [pc, #324]	@ (8002600 <HAL_ADC_ConfigChannel+0x4ac>)
 80024bc:	e006      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 80024be:	4b51      	ldr	r3, [pc, #324]	@ (8002604 <HAL_ADC_ConfigChannel+0x4b0>)
 80024c0:	e004      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 80024c2:	4b51      	ldr	r3, [pc, #324]	@ (8002608 <HAL_ADC_ConfigChannel+0x4b4>)
 80024c4:	e002      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_ADC_ConfigChannel+0x378>
 80024ca:	2300      	movs	r3, #0
 80024cc:	4619      	mov	r1, r3
 80024ce:	4610      	mov	r0, r2
 80024d0:	f7ff fa12 	bl	80018f8 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f280 80ae 	bge.w	800263a <HAL_ADC_ConfigChannel+0x4e6>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024de:	484c      	ldr	r0, [pc, #304]	@ (8002610 <HAL_ADC_ConfigChannel+0x4bc>)
 80024e0:	f7ff f9fc 	bl	80018dc <LL_ADC_GetCommonPathInternalCh>
 80024e4:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024e6:	4837      	ldr	r0, [pc, #220]	@ (80025c4 <HAL_ADC_ConfigChannel+0x470>)
 80024e8:	f7ff fbb2 	bl	8001c50 <LL_ADC_IsEnabled>
 80024ec:	4604      	mov	r4, r0
 80024ee:	4847      	ldr	r0, [pc, #284]	@ (800260c <HAL_ADC_ConfigChannel+0x4b8>)
 80024f0:	f7ff fbae 	bl	8001c50 <LL_ADC_IsEnabled>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4323      	orrs	r3, r4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d156      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x456>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a44      	ldr	r2, [pc, #272]	@ (8002614 <HAL_ADC_ConfigChannel+0x4c0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d123      	bne.n	800254e <HAL_ADC_ConfigChannel+0x3fa>
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11e      	bne.n	800254e <HAL_ADC_ConfigChannel+0x3fa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a3d      	ldr	r2, [pc, #244]	@ (800260c <HAL_ADC_ConfigChannel+0x4b8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	f040 808f 	bne.w	800263a <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002522:	4619      	mov	r1, r3
 8002524:	483a      	ldr	r0, [pc, #232]	@ (8002610 <HAL_ADC_ConfigChannel+0x4bc>)
 8002526:	f7ff f9c6 	bl	80018b6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800252a:	4b3b      	ldr	r3, [pc, #236]	@ (8002618 <HAL_ADC_ConfigChannel+0x4c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	099b      	lsrs	r3, r3, #6
 8002530:	4a3a      	ldr	r2, [pc, #232]	@ (800261c <HAL_ADC_ConfigChannel+0x4c8>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	099b      	lsrs	r3, r3, #6
 8002538:	3301      	adds	r3, #1
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800253e:	e002      	b.n	8002546 <HAL_ADC_ConfigChannel+0x3f2>
              {
                wait_loop_index--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3b01      	subs	r3, #1
 8002544:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f9      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x3ec>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800254c:	e075      	b.n	800263a <HAL_ADC_ConfigChannel+0x4e6>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a33      	ldr	r2, [pc, #204]	@ (8002620 <HAL_ADC_ConfigChannel+0x4cc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d111      	bne.n	800257c <HAL_ADC_ConfigChannel+0x428>
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10c      	bne.n	800257c <HAL_ADC_ConfigChannel+0x428>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a29      	ldr	r2, [pc, #164]	@ (800260c <HAL_ADC_ConfigChannel+0x4b8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d166      	bne.n	800263a <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002572:	4619      	mov	r1, r3
 8002574:	4826      	ldr	r0, [pc, #152]	@ (8002610 <HAL_ADC_ConfigChannel+0x4bc>)
 8002576:	f7ff f99e 	bl	80018b6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800257a:	e05e      	b.n	800263a <HAL_ADC_ConfigChannel+0x4e6>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a28      	ldr	r2, [pc, #160]	@ (8002624 <HAL_ADC_ConfigChannel+0x4d0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d159      	bne.n	800263a <HAL_ADC_ConfigChannel+0x4e6>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d154      	bne.n	800263a <HAL_ADC_ConfigChannel+0x4e6>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1d      	ldr	r2, [pc, #116]	@ (800260c <HAL_ADC_ConfigChannel+0x4b8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d14f      	bne.n	800263a <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025a0:	4619      	mov	r1, r3
 80025a2:	481b      	ldr	r0, [pc, #108]	@ (8002610 <HAL_ADC_ConfigChannel+0x4bc>)
 80025a4:	f7ff f987 	bl	80018b6 <LL_ADC_SetCommonPathInternalCh>
 80025a8:	e047      	b.n	800263a <HAL_ADC_ConfigChannel+0x4e6>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ae:	f043 0220 	orr.w	r2, r3, #32
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80025bc:	e03d      	b.n	800263a <HAL_ADC_ConfigChannel+0x4e6>
 80025be:	bf00      	nop
 80025c0:	47ff0000 	.word	0x47ff0000
 80025c4:	40022000 	.word	0x40022000
 80025c8:	04300002 	.word	0x04300002
 80025cc:	08600004 	.word	0x08600004
 80025d0:	0c900008 	.word	0x0c900008
 80025d4:	10c00010 	.word	0x10c00010
 80025d8:	14f00020 	.word	0x14f00020
 80025dc:	2a000400 	.word	0x2a000400
 80025e0:	2e300800 	.word	0x2e300800
 80025e4:	32601000 	.word	0x32601000
 80025e8:	43210000 	.word	0x43210000
 80025ec:	4b840000 	.word	0x4b840000
 80025f0:	4fb80000 	.word	0x4fb80000
 80025f4:	47520000 	.word	0x47520000
 80025f8:	36902000 	.word	0x36902000
 80025fc:	25b00200 	.word	0x25b00200
 8002600:	21800100 	.word	0x21800100
 8002604:	1d500080 	.word	0x1d500080
 8002608:	19200040 	.word	0x19200040
 800260c:	40022100 	.word	0x40022100
 8002610:	40022300 	.word	0x40022300
 8002614:	cb840000 	.word	0xcb840000
 8002618:	24000000 	.word	0x24000000
 800261c:	053e2d63 	.word	0x053e2d63
 8002620:	bac04000 	.word	0xbac04000
 8002624:	cfb80000 	.word	0xcfb80000
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002642:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002646:	4618      	mov	r0, r3
 8002648:	3734      	adds	r7, #52	@ 0x34
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
 800264e:	bf00      	nop

08002650 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff faf7 	bl	8001c50 <LL_ADC_IsEnabled>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d161      	bne.n	800272c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	4b32      	ldr	r3, [pc, #200]	@ (8002738 <ADC_Enable+0xe8>)
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00d      	beq.n	8002692 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267a:	f043 0210 	orr.w	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e04d      	b.n	800272e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fab2 	bl	8001c00 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800269c:	f7ff f8c8 	bl	8001830 <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026a2:	4826      	ldr	r0, [pc, #152]	@ (800273c <ADC_Enable+0xec>)
 80026a4:	f7ff fa50 	bl	8001b48 <LL_ADC_GetMultimode>
 80026a8:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a24      	ldr	r2, [pc, #144]	@ (8002740 <ADC_Enable+0xf0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d002      	beq.n	80026ba <ADC_Enable+0x6a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	e000      	b.n	80026bc <ADC_Enable+0x6c>
 80026ba:	4b22      	ldr	r3, [pc, #136]	@ (8002744 <ADC_Enable+0xf4>)
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d02c      	beq.n	800271e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d130      	bne.n	800272c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ca:	e028      	b.n	800271e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fabd 	bl	8001c50 <LL_ADC_IsEnabled>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d104      	bne.n	80026e6 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fa8d 	bl	8001c00 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026e6:	f7ff f8a3 	bl	8001830 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d914      	bls.n	800271e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d00d      	beq.n	800271e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002706:	f043 0210 	orr.w	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002712:	f043 0201 	orr.w	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e007      	b.n	800272e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d1cf      	bne.n	80026cc <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	8000003f 	.word	0x8000003f
 800273c:	40022300 	.word	0x40022300
 8002740:	40022100 	.word	0x40022100
 8002744:	40022000 	.word	0x40022000

08002748 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fa8e 	bl	8001c76 <LL_ADC_IsDisableOngoing>
 800275a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fa75 	bl	8001c50 <LL_ADC_IsEnabled>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d047      	beq.n	80027fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d144      	bne.n	80027fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 030d 	and.w	r3, r3, #13
 800277c:	2b01      	cmp	r3, #1
 800277e:	d10c      	bne.n	800279a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fa4f 	bl	8001c28 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2203      	movs	r2, #3
 8002790:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002792:	f7ff f84d 	bl	8001830 <HAL_GetTick>
 8002796:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002798:	e029      	b.n	80027ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279e:	f043 0210 	orr.w	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e023      	b.n	80027fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027b6:	f7ff f83b 	bl	8001830 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d914      	bls.n	80027ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00d      	beq.n	80027ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d6:	f043 0210 	orr.w	r2, r3, #16
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e2:	f043 0201 	orr.w	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e007      	b.n	80027fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1dc      	bne.n	80027b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002812:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002818:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800281c:	2b00      	cmp	r3, #0
 800281e:	d14b      	bne.n	80028b8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d021      	beq.n	800287e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff f8e1 	bl	8001a06 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d032      	beq.n	80028b0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d12b      	bne.n	80028b0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002868:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d11f      	bne.n	80028b0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54
 800287c:	e018      	b.n	80028b0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d111      	bne.n	80028b0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002890:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a8:	f043 0201 	orr.w	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7fd ff0b 	bl	80006cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028b6:	e00e      	b.n	80028d6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7ff fc3b 	bl	8002140 <HAL_ADC_ErrorCallback>
}
 80028ca:	e004      	b.n	80028d6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	4798      	blx	r3
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7ff fc1d 	bl	800212c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002906:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002918:	f043 0204 	orr.w	r2, r3, #4
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f7ff fc0d 	bl	8002140 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002938:	4b60      	ldr	r3, [pc, #384]	@ (8002abc <ADC_ConfigureBoostMode+0x18c>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01c      	beq.n	800297e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002944:	f003 fe8a 	bl	800665c <HAL_RCC_GetHCLKFreq>
 8002948:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002952:	d010      	beq.n	8002976 <ADC_ConfigureBoostMode+0x46>
 8002954:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002958:	d873      	bhi.n	8002a42 <ADC_ConfigureBoostMode+0x112>
 800295a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800295e:	d002      	beq.n	8002966 <ADC_ConfigureBoostMode+0x36>
 8002960:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002964:	d16d      	bne.n	8002a42 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	0c1b      	lsrs	r3, r3, #16
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002972:	60fb      	str	r3, [r7, #12]
        break;
 8002974:	e068      	b.n	8002a48 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	089b      	lsrs	r3, r3, #2
 800297a:	60fb      	str	r3, [r7, #12]
        break;
 800297c:	e064      	b.n	8002a48 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800297e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002982:	f04f 0100 	mov.w	r1, #0
 8002986:	f005 f883 	bl	8007a90 <HAL_RCCEx_GetPeriphCLKFreq>
 800298a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002994:	d051      	beq.n	8002a3a <ADC_ConfigureBoostMode+0x10a>
 8002996:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800299a:	d854      	bhi.n	8002a46 <ADC_ConfigureBoostMode+0x116>
 800299c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80029a0:	d047      	beq.n	8002a32 <ADC_ConfigureBoostMode+0x102>
 80029a2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80029a6:	d84e      	bhi.n	8002a46 <ADC_ConfigureBoostMode+0x116>
 80029a8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80029ac:	d03d      	beq.n	8002a2a <ADC_ConfigureBoostMode+0xfa>
 80029ae:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80029b2:	d848      	bhi.n	8002a46 <ADC_ConfigureBoostMode+0x116>
 80029b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029b8:	d033      	beq.n	8002a22 <ADC_ConfigureBoostMode+0xf2>
 80029ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029be:	d842      	bhi.n	8002a46 <ADC_ConfigureBoostMode+0x116>
 80029c0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80029c4:	d029      	beq.n	8002a1a <ADC_ConfigureBoostMode+0xea>
 80029c6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80029ca:	d83c      	bhi.n	8002a46 <ADC_ConfigureBoostMode+0x116>
 80029cc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80029d0:	d01a      	beq.n	8002a08 <ADC_ConfigureBoostMode+0xd8>
 80029d2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80029d6:	d836      	bhi.n	8002a46 <ADC_ConfigureBoostMode+0x116>
 80029d8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80029dc:	d014      	beq.n	8002a08 <ADC_ConfigureBoostMode+0xd8>
 80029de:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80029e2:	d830      	bhi.n	8002a46 <ADC_ConfigureBoostMode+0x116>
 80029e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029e8:	d00e      	beq.n	8002a08 <ADC_ConfigureBoostMode+0xd8>
 80029ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029ee:	d82a      	bhi.n	8002a46 <ADC_ConfigureBoostMode+0x116>
 80029f0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80029f4:	d008      	beq.n	8002a08 <ADC_ConfigureBoostMode+0xd8>
 80029f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80029fa:	d824      	bhi.n	8002a46 <ADC_ConfigureBoostMode+0x116>
 80029fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a00:	d002      	beq.n	8002a08 <ADC_ConfigureBoostMode+0xd8>
 8002a02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a06:	d11e      	bne.n	8002a46 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	0c9b      	lsrs	r3, r3, #18
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a16:	60fb      	str	r3, [r7, #12]
        break;
 8002a18:	e016      	b.n	8002a48 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	60fb      	str	r3, [r7, #12]
        break;
 8002a20:	e012      	b.n	8002a48 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	60fb      	str	r3, [r7, #12]
        break;
 8002a28:	e00e      	b.n	8002a48 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	60fb      	str	r3, [r7, #12]
        break;
 8002a30:	e00a      	b.n	8002a48 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	09db      	lsrs	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]
        break;
 8002a38:	e006      	b.n	8002a48 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	60fb      	str	r3, [r7, #12]
        break;
 8002a40:	e002      	b.n	8002a48 <ADC_ConfigureBoostMode+0x118>
        break;
 8002a42:	bf00      	nop
 8002a44:	e000      	b.n	8002a48 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002a46:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac0 <ADC_ConfigureBoostMode+0x190>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d808      	bhi.n	8002a68 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002a64:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a66:	e025      	b.n	8002ab4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a16      	ldr	r2, [pc, #88]	@ (8002ac4 <ADC_ConfigureBoostMode+0x194>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d80a      	bhi.n	8002a86 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a82:	609a      	str	r2, [r3, #8]
}
 8002a84:	e016      	b.n	8002ab4 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4a0f      	ldr	r2, [pc, #60]	@ (8002ac8 <ADC_ConfigureBoostMode+0x198>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d80a      	bhi.n	8002aa4 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa0:	609a      	str	r2, [r3, #8]
}
 8002aa2:	e007      	b.n	8002ab4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002ab2:	609a      	str	r2, [r3, #8]
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40022300 	.word	0x40022300
 8002ac0:	005f5e10 	.word	0x005f5e10
 8002ac4:	00bebc20 	.word	0x00bebc20
 8002ac8:	017d7840 	.word	0x017d7840

08002acc <LL_ADC_IsEnabled>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <LL_ADC_IsEnabled+0x18>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <LL_ADC_IsEnabled+0x1a>
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <LL_ADC_StartCalibration>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <LL_ADC_StartCalibration+0x38>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b14:	430a      	orrs	r2, r1
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	3ffeffc0 	.word	0x3ffeffc0

08002b30 <LL_ADC_IsCalibrationOnGoing>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b44:	d101      	bne.n	8002b4a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d101      	bne.n	8002b70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_ADCEx_Calibration_Start+0x1e>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e04c      	b.n	8002c38 <HAL_ADCEx_Calibration_Start+0xb8>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f7ff fdce 	bl	8002748 <ADC_Disable>
 8002bac:	4603      	mov	r3, r0
 8002bae:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d135      	bne.n	8002c22 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002bba:	4b21      	ldr	r3, [pc, #132]	@ (8002c40 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	f043 0202 	orr.w	r2, r3, #2
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff90 	bl	8002af4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002bd4:	e014      	b.n	8002c00 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4a19      	ldr	r2, [pc, #100]	@ (8002c44 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d30d      	bcc.n	8002c00 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be8:	f023 0312 	bic.w	r3, r3, #18
 8002bec:	f043 0210 	orr.w	r2, r3, #16
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e01b      	b.n	8002c38 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff93 	bl	8002b30 <LL_ADC_IsCalibrationOnGoing>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1e2      	bne.n	8002bd6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c14:	f023 0303 	bic.w	r3, r3, #3
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c20:	e005      	b.n	8002c2e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c26:	f043 0210 	orr.w	r2, r3, #16
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	ffffeefd 	.word	0xffffeefd
 8002c44:	25c3f800 	.word	0x25c3f800

08002c48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b09f      	sub	sp, #124	@ 0x7c
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e080      	b.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d102      	bne.n	8002c86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c80:	4b3c      	ldr	r3, [pc, #240]	@ (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	e001      	b.n	8002c8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c94:	f043 0220 	orr.w	r2, r3, #32
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e05f      	b.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff ff54 	bl	8002b58 <LL_ADC_REG_IsConversionOngoing>
 8002cb0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ff4e 	bl	8002b58 <LL_ADC_REG_IsConversionOngoing>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d141      	bne.n	8002d46 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002cc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d13e      	bne.n	8002d46 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002cca:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ce4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ce6:	4822      	ldr	r0, [pc, #136]	@ (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ce8:	f7ff fef0 	bl	8002acc <LL_ADC_IsEnabled>
 8002cec:	4604      	mov	r4, r0
 8002cee:	4821      	ldr	r0, [pc, #132]	@ (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002cf0:	f7ff feec 	bl	8002acc <LL_ADC_IsEnabled>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4323      	orrs	r3, r4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d12e      	bne.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	4b1e      	ldr	r3, [pc, #120]	@ (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	6811      	ldr	r1, [r2, #0]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	6892      	ldr	r2, [r2, #8]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d12:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d14:	e021      	b.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002d16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d20:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d22:	4813      	ldr	r0, [pc, #76]	@ (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002d24:	f7ff fed2 	bl	8002acc <LL_ADC_IsEnabled>
 8002d28:	4604      	mov	r4, r0
 8002d2a:	4812      	ldr	r0, [pc, #72]	@ (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002d2c:	f7ff fece 	bl	8002acc <LL_ADC_IsEnabled>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4323      	orrs	r3, r4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d110      	bne.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d42:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d44:	e009      	b.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4a:	f043 0220 	orr.w	r2, r3, #32
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002d58:	e000      	b.n	8002d5c <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d5a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d64:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	377c      	adds	r7, #124	@ 0x7c
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd90      	pop	{r4, r7, pc}
 8002d70:	40022000 	.word	0x40022000
 8002d74:	40022100 	.word	0x40022100
 8002d78:	40022300 	.word	0x40022300
 8002d7c:	fffff0e0 	.word	0xfffff0e0

08002d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d90:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002da8:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dae:	4a04      	ldr	r2, [pc, #16]	@ (8002dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	60d3      	str	r3, [r2, #12]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00
 8002dc4:	05fa0000 	.word	0x05fa0000

08002dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dcc:	4b04      	ldr	r3, [pc, #16]	@ (8002de0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 0307 	and.w	r3, r3, #7
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	db0b      	blt.n	8002e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	f003 021f 	and.w	r2, r3, #31
 8002dfc:	4907      	ldr	r1, [pc, #28]	@ (8002e1c <__NVIC_EnableIRQ+0x38>)
 8002dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	2001      	movs	r0, #1
 8002e06:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	e000e100 	.word	0xe000e100

08002e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	6039      	str	r1, [r7, #0]
 8002e2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	db0a      	blt.n	8002e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	490c      	ldr	r1, [pc, #48]	@ (8002e6c <__NVIC_SetPriority+0x4c>)
 8002e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	440b      	add	r3, r1
 8002e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e48:	e00a      	b.n	8002e60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4908      	ldr	r1, [pc, #32]	@ (8002e70 <__NVIC_SetPriority+0x50>)
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	3b04      	subs	r3, #4
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	761a      	strb	r2, [r3, #24]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000e100 	.word	0xe000e100
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	@ 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f1c3 0307 	rsb	r3, r3, #7
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	bf28      	it	cs
 8002e92:	2304      	movcs	r3, #4
 8002e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d902      	bls.n	8002ea4 <NVIC_EncodePriority+0x30>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3b03      	subs	r3, #3
 8002ea2:	e000      	b.n	8002ea6 <NVIC_EncodePriority+0x32>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43d9      	mvns	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	4313      	orrs	r3, r2
         );
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3724      	adds	r7, #36	@ 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eec:	d301      	bcc.n	8002ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00f      	b.n	8002f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f1c <SysTick_Config+0x40>)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efa:	210f      	movs	r1, #15
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295
 8002f00:	f7ff ff8e 	bl	8002e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <SysTick_Config+0x40>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0a:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <SysTick_Config+0x40>)
 8002f0c:	2207      	movs	r2, #7
 8002f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	e000e010 	.word	0xe000e010

08002f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ff29 	bl	8002d80 <__NVIC_SetPriorityGrouping>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f44:	f7ff ff40 	bl	8002dc8 <__NVIC_GetPriorityGrouping>
 8002f48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	6978      	ldr	r0, [r7, #20]
 8002f50:	f7ff ff90 	bl	8002e74 <NVIC_EncodePriority>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff5f 	bl	8002e20 <__NVIC_SetPriority>
}
 8002f62:	bf00      	nop
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4603      	mov	r3, r0
 8002f72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff33 	bl	8002de4 <__NVIC_EnableIRQ>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ffa4 	bl	8002edc <SysTick_Config>
 8002f94:	4603      	mov	r3, r0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002fa4:	f3bf 8f5f 	dmb	sy
}
 8002fa8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002faa:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <HAL_MPU_Disable+0x28>)
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	4a06      	ldr	r2, [pc, #24]	@ (8002fc8 <HAL_MPU_Disable+0x28>)
 8002fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fb4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002fb6:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <HAL_MPU_Disable+0x2c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	605a      	str	r2, [r3, #4]
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000ed00 	.word	0xe000ed00
 8002fcc:	e000ed90 	.word	0xe000ed90

08002fd0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8003008 <HAL_MPU_Enable+0x38>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800300c <HAL_MPU_Enable+0x3c>)
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	4a09      	ldr	r2, [pc, #36]	@ (800300c <HAL_MPU_Enable+0x3c>)
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002fee:	f3bf 8f4f 	dsb	sy
}
 8002ff2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ff4:	f3bf 8f6f 	isb	sy
}
 8002ff8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	e000ed90 	.word	0xe000ed90
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	785a      	ldrb	r2, [r3, #1]
 800301c:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <HAL_MPU_ConfigRegion+0x7c>)
 800301e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003020:	4b1a      	ldr	r3, [pc, #104]	@ (800308c <HAL_MPU_ConfigRegion+0x7c>)
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	4a19      	ldr	r2, [pc, #100]	@ (800308c <HAL_MPU_ConfigRegion+0x7c>)
 8003026:	f023 0301 	bic.w	r3, r3, #1
 800302a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800302c:	4a17      	ldr	r2, [pc, #92]	@ (800308c <HAL_MPU_ConfigRegion+0x7c>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7b1b      	ldrb	r3, [r3, #12]
 8003038:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7adb      	ldrb	r3, [r3, #11]
 800303e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003040:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7a9b      	ldrb	r3, [r3, #10]
 8003046:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003048:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7b5b      	ldrb	r3, [r3, #13]
 800304e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003050:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7b9b      	ldrb	r3, [r3, #14]
 8003056:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003058:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	7bdb      	ldrb	r3, [r3, #15]
 800305e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003060:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7a5b      	ldrb	r3, [r3, #9]
 8003066:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003068:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7a1b      	ldrb	r3, [r3, #8]
 800306e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003070:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	7812      	ldrb	r2, [r2, #0]
 8003076:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003078:	4a04      	ldr	r2, [pc, #16]	@ (800308c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800307a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800307c:	6113      	str	r3, [r2, #16]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000ed90 	.word	0xe000ed90

08003090 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003098:	f7fe fbca 	bl	8001830 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e37d      	b.n	80037a4 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a66      	ldr	r2, [pc, #408]	@ (8003248 <HAL_DMA_Init+0x1b8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d04a      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a65      	ldr	r2, [pc, #404]	@ (800324c <HAL_DMA_Init+0x1bc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d045      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a63      	ldr	r2, [pc, #396]	@ (8003250 <HAL_DMA_Init+0x1c0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d040      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a62      	ldr	r2, [pc, #392]	@ (8003254 <HAL_DMA_Init+0x1c4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d03b      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a60      	ldr	r2, [pc, #384]	@ (8003258 <HAL_DMA_Init+0x1c8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d036      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a5f      	ldr	r2, [pc, #380]	@ (800325c <HAL_DMA_Init+0x1cc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d031      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003260 <HAL_DMA_Init+0x1d0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d02c      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a5c      	ldr	r2, [pc, #368]	@ (8003264 <HAL_DMA_Init+0x1d4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d027      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003268 <HAL_DMA_Init+0x1d8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d022      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a59      	ldr	r2, [pc, #356]	@ (800326c <HAL_DMA_Init+0x1dc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d01d      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a57      	ldr	r2, [pc, #348]	@ (8003270 <HAL_DMA_Init+0x1e0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d018      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a56      	ldr	r2, [pc, #344]	@ (8003274 <HAL_DMA_Init+0x1e4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a54      	ldr	r2, [pc, #336]	@ (8003278 <HAL_DMA_Init+0x1e8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00e      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a53      	ldr	r2, [pc, #332]	@ (800327c <HAL_DMA_Init+0x1ec>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d009      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a51      	ldr	r2, [pc, #324]	@ (8003280 <HAL_DMA_Init+0x1f0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d004      	beq.n	8003148 <HAL_DMA_Init+0xb8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a50      	ldr	r2, [pc, #320]	@ (8003284 <HAL_DMA_Init+0x1f4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <HAL_DMA_Init+0xbc>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_DMA_Init+0xbe>
 800314c:	2300      	movs	r3, #0
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 813c 	beq.w	80033cc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a37      	ldr	r2, [pc, #220]	@ (8003248 <HAL_DMA_Init+0x1b8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d04a      	beq.n	8003204 <HAL_DMA_Init+0x174>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a36      	ldr	r2, [pc, #216]	@ (800324c <HAL_DMA_Init+0x1bc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d045      	beq.n	8003204 <HAL_DMA_Init+0x174>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a34      	ldr	r2, [pc, #208]	@ (8003250 <HAL_DMA_Init+0x1c0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d040      	beq.n	8003204 <HAL_DMA_Init+0x174>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a33      	ldr	r2, [pc, #204]	@ (8003254 <HAL_DMA_Init+0x1c4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d03b      	beq.n	8003204 <HAL_DMA_Init+0x174>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a31      	ldr	r2, [pc, #196]	@ (8003258 <HAL_DMA_Init+0x1c8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d036      	beq.n	8003204 <HAL_DMA_Init+0x174>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a30      	ldr	r2, [pc, #192]	@ (800325c <HAL_DMA_Init+0x1cc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d031      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003260 <HAL_DMA_Init+0x1d0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02c      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003264 <HAL_DMA_Init+0x1d4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d027      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003268 <HAL_DMA_Init+0x1d8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d022      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a2a      	ldr	r2, [pc, #168]	@ (800326c <HAL_DMA_Init+0x1dc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d01d      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a28      	ldr	r2, [pc, #160]	@ (8003270 <HAL_DMA_Init+0x1e0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d018      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a27      	ldr	r2, [pc, #156]	@ (8003274 <HAL_DMA_Init+0x1e4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a25      	ldr	r2, [pc, #148]	@ (8003278 <HAL_DMA_Init+0x1e8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00e      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a24      	ldr	r2, [pc, #144]	@ (800327c <HAL_DMA_Init+0x1ec>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d009      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a22      	ldr	r2, [pc, #136]	@ (8003280 <HAL_DMA_Init+0x1f0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <HAL_DMA_Init+0x174>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a21      	ldr	r2, [pc, #132]	@ (8003284 <HAL_DMA_Init+0x1f4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d108      	bne.n	8003216 <HAL_DMA_Init+0x186>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e007      	b.n	8003226 <HAL_DMA_Init+0x196>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003226:	e02f      	b.n	8003288 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003228:	f7fe fb02 	bl	8001830 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b05      	cmp	r3, #5
 8003234:	d928      	bls.n	8003288 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2203      	movs	r2, #3
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e2ad      	b.n	80037a4 <HAL_DMA_Init+0x714>
 8003248:	40020010 	.word	0x40020010
 800324c:	40020028 	.word	0x40020028
 8003250:	40020040 	.word	0x40020040
 8003254:	40020058 	.word	0x40020058
 8003258:	40020070 	.word	0x40020070
 800325c:	40020088 	.word	0x40020088
 8003260:	400200a0 	.word	0x400200a0
 8003264:	400200b8 	.word	0x400200b8
 8003268:	40020410 	.word	0x40020410
 800326c:	40020428 	.word	0x40020428
 8003270:	40020440 	.word	0x40020440
 8003274:	40020458 	.word	0x40020458
 8003278:	40020470 	.word	0x40020470
 800327c:	40020488 	.word	0x40020488
 8003280:	400204a0 	.word	0x400204a0
 8003284:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1c8      	bne.n	8003228 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4b73      	ldr	r3, [pc, #460]	@ (8003470 <HAL_DMA_Init+0x3e0>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80032ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d107      	bne.n	80032ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	4313      	orrs	r3, r2
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b28      	cmp	r3, #40	@ 0x28
 80032f2:	d903      	bls.n	80032fc <HAL_DMA_Init+0x26c>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80032fa:	d91f      	bls.n	800333c <HAL_DMA_Init+0x2ac>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b3e      	cmp	r3, #62	@ 0x3e
 8003302:	d903      	bls.n	800330c <HAL_DMA_Init+0x27c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b42      	cmp	r3, #66	@ 0x42
 800330a:	d917      	bls.n	800333c <HAL_DMA_Init+0x2ac>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b46      	cmp	r3, #70	@ 0x46
 8003312:	d903      	bls.n	800331c <HAL_DMA_Init+0x28c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b48      	cmp	r3, #72	@ 0x48
 800331a:	d90f      	bls.n	800333c <HAL_DMA_Init+0x2ac>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b4e      	cmp	r3, #78	@ 0x4e
 8003322:	d903      	bls.n	800332c <HAL_DMA_Init+0x29c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b52      	cmp	r3, #82	@ 0x52
 800332a:	d907      	bls.n	800333c <HAL_DMA_Init+0x2ac>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b73      	cmp	r3, #115	@ 0x73
 8003332:	d905      	bls.n	8003340 <HAL_DMA_Init+0x2b0>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b77      	cmp	r3, #119	@ 0x77
 800333a:	d801      	bhi.n	8003340 <HAL_DMA_Init+0x2b0>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <HAL_DMA_Init+0x2b2>
 8003340:	2300      	movs	r3, #0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800334c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f023 0307 	bic.w	r3, r3, #7
 8003364:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	2b04      	cmp	r3, #4
 8003376:	d117      	bne.n	80033a8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00e      	beq.n	80033a8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f001 fe70 	bl	8005070 <DMA_CheckFifoParam>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2240      	movs	r2, #64	@ 0x40
 800339a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e1fd      	b.n	80037a4 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f001 fdab 	bl	8004f0c <DMA_CalcBaseAndBitshift>
 80033b6:	4603      	mov	r3, r0
 80033b8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	223f      	movs	r2, #63	@ 0x3f
 80033c4:	409a      	lsls	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	e0fd      	b.n	80035c8 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a28      	ldr	r2, [pc, #160]	@ (8003474 <HAL_DMA_Init+0x3e4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d04a      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a27      	ldr	r2, [pc, #156]	@ (8003478 <HAL_DMA_Init+0x3e8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d045      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a25      	ldr	r2, [pc, #148]	@ (800347c <HAL_DMA_Init+0x3ec>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d040      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a24      	ldr	r2, [pc, #144]	@ (8003480 <HAL_DMA_Init+0x3f0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d03b      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a22      	ldr	r2, [pc, #136]	@ (8003484 <HAL_DMA_Init+0x3f4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d036      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a21      	ldr	r2, [pc, #132]	@ (8003488 <HAL_DMA_Init+0x3f8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d031      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1f      	ldr	r2, [pc, #124]	@ (800348c <HAL_DMA_Init+0x3fc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d02c      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1e      	ldr	r2, [pc, #120]	@ (8003490 <HAL_DMA_Init+0x400>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d027      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1c      	ldr	r2, [pc, #112]	@ (8003494 <HAL_DMA_Init+0x404>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d022      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1b      	ldr	r2, [pc, #108]	@ (8003498 <HAL_DMA_Init+0x408>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d01d      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a19      	ldr	r2, [pc, #100]	@ (800349c <HAL_DMA_Init+0x40c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d018      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a18      	ldr	r2, [pc, #96]	@ (80034a0 <HAL_DMA_Init+0x410>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a16      	ldr	r2, [pc, #88]	@ (80034a4 <HAL_DMA_Init+0x414>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00e      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a15      	ldr	r2, [pc, #84]	@ (80034a8 <HAL_DMA_Init+0x418>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a13      	ldr	r2, [pc, #76]	@ (80034ac <HAL_DMA_Init+0x41c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d004      	beq.n	800346c <HAL_DMA_Init+0x3dc>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a12      	ldr	r2, [pc, #72]	@ (80034b0 <HAL_DMA_Init+0x420>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d123      	bne.n	80034b4 <HAL_DMA_Init+0x424>
 800346c:	2301      	movs	r3, #1
 800346e:	e022      	b.n	80034b6 <HAL_DMA_Init+0x426>
 8003470:	fe10803f 	.word	0xfe10803f
 8003474:	48022c08 	.word	0x48022c08
 8003478:	48022c1c 	.word	0x48022c1c
 800347c:	48022c30 	.word	0x48022c30
 8003480:	48022c44 	.word	0x48022c44
 8003484:	48022c58 	.word	0x48022c58
 8003488:	48022c6c 	.word	0x48022c6c
 800348c:	48022c80 	.word	0x48022c80
 8003490:	48022c94 	.word	0x48022c94
 8003494:	58025408 	.word	0x58025408
 8003498:	5802541c 	.word	0x5802541c
 800349c:	58025430 	.word	0x58025430
 80034a0:	58025444 	.word	0x58025444
 80034a4:	58025458 	.word	0x58025458
 80034a8:	5802546c 	.word	0x5802546c
 80034ac:	58025480 	.word	0x58025480
 80034b0:	58025494 	.word	0x58025494
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d07d      	beq.n	80035b6 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7f      	ldr	r2, [pc, #508]	@ (80036bc <HAL_DMA_Init+0x62c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d021      	beq.n	8003508 <HAL_DMA_Init+0x478>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a7d      	ldr	r2, [pc, #500]	@ (80036c0 <HAL_DMA_Init+0x630>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01c      	beq.n	8003508 <HAL_DMA_Init+0x478>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7c      	ldr	r2, [pc, #496]	@ (80036c4 <HAL_DMA_Init+0x634>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d017      	beq.n	8003508 <HAL_DMA_Init+0x478>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a7a      	ldr	r2, [pc, #488]	@ (80036c8 <HAL_DMA_Init+0x638>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d012      	beq.n	8003508 <HAL_DMA_Init+0x478>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a79      	ldr	r2, [pc, #484]	@ (80036cc <HAL_DMA_Init+0x63c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00d      	beq.n	8003508 <HAL_DMA_Init+0x478>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a77      	ldr	r2, [pc, #476]	@ (80036d0 <HAL_DMA_Init+0x640>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d008      	beq.n	8003508 <HAL_DMA_Init+0x478>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a76      	ldr	r2, [pc, #472]	@ (80036d4 <HAL_DMA_Init+0x644>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <HAL_DMA_Init+0x478>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a74      	ldr	r2, [pc, #464]	@ (80036d8 <HAL_DMA_Init+0x648>)
 8003506:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4b6e      	ldr	r3, [pc, #440]	@ (80036dc <HAL_DMA_Init+0x64c>)
 8003524:	4013      	ands	r3, r2
 8003526:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b40      	cmp	r3, #64	@ 0x40
 800352e:	d008      	beq.n	8003542 <HAL_DMA_Init+0x4b2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b80      	cmp	r3, #128	@ 0x80
 8003536:	d102      	bne.n	800353e <HAL_DMA_Init+0x4ae>
 8003538:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800353c:	e002      	b.n	8003544 <HAL_DMA_Init+0x4b4>
 800353e:	2300      	movs	r3, #0
 8003540:	e000      	b.n	8003544 <HAL_DMA_Init+0x4b4>
 8003542:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	68d2      	ldr	r2, [r2, #12]
 8003548:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800354a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003552:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800355a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003562:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800356a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003572:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	4b55      	ldr	r3, [pc, #340]	@ (80036e0 <HAL_DMA_Init+0x650>)
 800358a:	4413      	add	r3, r2
 800358c:	4a55      	ldr	r2, [pc, #340]	@ (80036e4 <HAL_DMA_Init+0x654>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	009a      	lsls	r2, r3, #2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f001 fcb6 	bl	8004f0c <DMA_CalcBaseAndBitshift>
 80035a0:	4603      	mov	r3, r0
 80035a2:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	2201      	movs	r2, #1
 80035ae:	409a      	lsls	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	e008      	b.n	80035c8 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2240      	movs	r2, #64	@ 0x40
 80035ba:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2203      	movs	r2, #3
 80035c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0ed      	b.n	80037a4 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a46      	ldr	r2, [pc, #280]	@ (80036e8 <HAL_DMA_Init+0x658>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d072      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a45      	ldr	r2, [pc, #276]	@ (80036ec <HAL_DMA_Init+0x65c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d06d      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a43      	ldr	r2, [pc, #268]	@ (80036f0 <HAL_DMA_Init+0x660>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d068      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a42      	ldr	r2, [pc, #264]	@ (80036f4 <HAL_DMA_Init+0x664>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d063      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a40      	ldr	r2, [pc, #256]	@ (80036f8 <HAL_DMA_Init+0x668>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d05e      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a3f      	ldr	r2, [pc, #252]	@ (80036fc <HAL_DMA_Init+0x66c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d059      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a3d      	ldr	r2, [pc, #244]	@ (8003700 <HAL_DMA_Init+0x670>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d054      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a3c      	ldr	r2, [pc, #240]	@ (8003704 <HAL_DMA_Init+0x674>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d04f      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a3a      	ldr	r2, [pc, #232]	@ (8003708 <HAL_DMA_Init+0x678>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d04a      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a39      	ldr	r2, [pc, #228]	@ (800370c <HAL_DMA_Init+0x67c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d045      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a37      	ldr	r2, [pc, #220]	@ (8003710 <HAL_DMA_Init+0x680>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d040      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a36      	ldr	r2, [pc, #216]	@ (8003714 <HAL_DMA_Init+0x684>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d03b      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a34      	ldr	r2, [pc, #208]	@ (8003718 <HAL_DMA_Init+0x688>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d036      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a33      	ldr	r2, [pc, #204]	@ (800371c <HAL_DMA_Init+0x68c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d031      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a31      	ldr	r2, [pc, #196]	@ (8003720 <HAL_DMA_Init+0x690>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d02c      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a30      	ldr	r2, [pc, #192]	@ (8003724 <HAL_DMA_Init+0x694>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d027      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a13      	ldr	r2, [pc, #76]	@ (80036bc <HAL_DMA_Init+0x62c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d022      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a12      	ldr	r2, [pc, #72]	@ (80036c0 <HAL_DMA_Init+0x630>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d01d      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a10      	ldr	r2, [pc, #64]	@ (80036c4 <HAL_DMA_Init+0x634>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d018      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a0f      	ldr	r2, [pc, #60]	@ (80036c8 <HAL_DMA_Init+0x638>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d013      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0d      	ldr	r2, [pc, #52]	@ (80036cc <HAL_DMA_Init+0x63c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00e      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a0c      	ldr	r2, [pc, #48]	@ (80036d0 <HAL_DMA_Init+0x640>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d009      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0a      	ldr	r2, [pc, #40]	@ (80036d4 <HAL_DMA_Init+0x644>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_DMA_Init+0x628>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a09      	ldr	r2, [pc, #36]	@ (80036d8 <HAL_DMA_Init+0x648>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d137      	bne.n	8003728 <HAL_DMA_Init+0x698>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e036      	b.n	800372a <HAL_DMA_Init+0x69a>
 80036bc:	58025408 	.word	0x58025408
 80036c0:	5802541c 	.word	0x5802541c
 80036c4:	58025430 	.word	0x58025430
 80036c8:	58025444 	.word	0x58025444
 80036cc:	58025458 	.word	0x58025458
 80036d0:	5802546c 	.word	0x5802546c
 80036d4:	58025480 	.word	0x58025480
 80036d8:	58025494 	.word	0x58025494
 80036dc:	fffe000f 	.word	0xfffe000f
 80036e0:	a7fdabf8 	.word	0xa7fdabf8
 80036e4:	cccccccd 	.word	0xcccccccd
 80036e8:	40020010 	.word	0x40020010
 80036ec:	40020028 	.word	0x40020028
 80036f0:	40020040 	.word	0x40020040
 80036f4:	40020058 	.word	0x40020058
 80036f8:	40020070 	.word	0x40020070
 80036fc:	40020088 	.word	0x40020088
 8003700:	400200a0 	.word	0x400200a0
 8003704:	400200b8 	.word	0x400200b8
 8003708:	40020410 	.word	0x40020410
 800370c:	40020428 	.word	0x40020428
 8003710:	40020440 	.word	0x40020440
 8003714:	40020458 	.word	0x40020458
 8003718:	40020470 	.word	0x40020470
 800371c:	40020488 	.word	0x40020488
 8003720:	400204a0 	.word	0x400204a0
 8003724:	400204b8 	.word	0x400204b8
 8003728:	2300      	movs	r3, #0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d032      	beq.n	8003794 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f001 fd1a 	bl	8005168 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b80      	cmp	r3, #128	@ 0x80
 800373a:	d102      	bne.n	8003742 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003756:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <HAL_DMA_Init+0x6f2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d80c      	bhi.n	8003782 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f001 fd97 	bl	800529c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	e008      	b.n	8003794 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e226      	b.n	8003c16 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_DMA_Start_IT+0x2a>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e21f      	b.n	8003c16 <HAL_DMA_Start_IT+0x46a>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	f040 820a 	bne.w	8003c00 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a68      	ldr	r2, [pc, #416]	@ (80039a0 <HAL_DMA_Start_IT+0x1f4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d04a      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a66      	ldr	r2, [pc, #408]	@ (80039a4 <HAL_DMA_Start_IT+0x1f8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d045      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a65      	ldr	r2, [pc, #404]	@ (80039a8 <HAL_DMA_Start_IT+0x1fc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d040      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a63      	ldr	r2, [pc, #396]	@ (80039ac <HAL_DMA_Start_IT+0x200>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d03b      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a62      	ldr	r2, [pc, #392]	@ (80039b0 <HAL_DMA_Start_IT+0x204>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d036      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a60      	ldr	r2, [pc, #384]	@ (80039b4 <HAL_DMA_Start_IT+0x208>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d031      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a5f      	ldr	r2, [pc, #380]	@ (80039b8 <HAL_DMA_Start_IT+0x20c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d02c      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a5d      	ldr	r2, [pc, #372]	@ (80039bc <HAL_DMA_Start_IT+0x210>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d027      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a5c      	ldr	r2, [pc, #368]	@ (80039c0 <HAL_DMA_Start_IT+0x214>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d022      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a5a      	ldr	r2, [pc, #360]	@ (80039c4 <HAL_DMA_Start_IT+0x218>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01d      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a59      	ldr	r2, [pc, #356]	@ (80039c8 <HAL_DMA_Start_IT+0x21c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d018      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a57      	ldr	r2, [pc, #348]	@ (80039cc <HAL_DMA_Start_IT+0x220>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a56      	ldr	r2, [pc, #344]	@ (80039d0 <HAL_DMA_Start_IT+0x224>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00e      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a54      	ldr	r2, [pc, #336]	@ (80039d4 <HAL_DMA_Start_IT+0x228>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d009      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a53      	ldr	r2, [pc, #332]	@ (80039d8 <HAL_DMA_Start_IT+0x22c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d004      	beq.n	800389a <HAL_DMA_Start_IT+0xee>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a51      	ldr	r2, [pc, #324]	@ (80039dc <HAL_DMA_Start_IT+0x230>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d108      	bne.n	80038ac <HAL_DMA_Start_IT+0x100>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e007      	b.n	80038bc <HAL_DMA_Start_IT+0x110>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f001 f93e 	bl	8004b44 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a34      	ldr	r2, [pc, #208]	@ (80039a0 <HAL_DMA_Start_IT+0x1f4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d04a      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a33      	ldr	r2, [pc, #204]	@ (80039a4 <HAL_DMA_Start_IT+0x1f8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d045      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a31      	ldr	r2, [pc, #196]	@ (80039a8 <HAL_DMA_Start_IT+0x1fc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d040      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a30      	ldr	r2, [pc, #192]	@ (80039ac <HAL_DMA_Start_IT+0x200>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d03b      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a2e      	ldr	r2, [pc, #184]	@ (80039b0 <HAL_DMA_Start_IT+0x204>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d036      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2d      	ldr	r2, [pc, #180]	@ (80039b4 <HAL_DMA_Start_IT+0x208>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d031      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2b      	ldr	r2, [pc, #172]	@ (80039b8 <HAL_DMA_Start_IT+0x20c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d02c      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2a      	ldr	r2, [pc, #168]	@ (80039bc <HAL_DMA_Start_IT+0x210>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d027      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a28      	ldr	r2, [pc, #160]	@ (80039c0 <HAL_DMA_Start_IT+0x214>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d022      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a27      	ldr	r2, [pc, #156]	@ (80039c4 <HAL_DMA_Start_IT+0x218>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d01d      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a25      	ldr	r2, [pc, #148]	@ (80039c8 <HAL_DMA_Start_IT+0x21c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d018      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a24      	ldr	r2, [pc, #144]	@ (80039cc <HAL_DMA_Start_IT+0x220>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d013      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a22      	ldr	r2, [pc, #136]	@ (80039d0 <HAL_DMA_Start_IT+0x224>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00e      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a21      	ldr	r2, [pc, #132]	@ (80039d4 <HAL_DMA_Start_IT+0x228>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d009      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1f      	ldr	r2, [pc, #124]	@ (80039d8 <HAL_DMA_Start_IT+0x22c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d004      	beq.n	8003968 <HAL_DMA_Start_IT+0x1bc>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1e      	ldr	r2, [pc, #120]	@ (80039dc <HAL_DMA_Start_IT+0x230>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <HAL_DMA_Start_IT+0x1c0>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_DMA_Start_IT+0x1c2>
 800396c:	2300      	movs	r3, #0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d036      	beq.n	80039e0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 021e 	bic.w	r2, r3, #30
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0216 	orr.w	r2, r2, #22
 8003984:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d03e      	beq.n	8003a0c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0208 	orr.w	r2, r2, #8
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e035      	b.n	8003a0c <HAL_DMA_Start_IT+0x260>
 80039a0:	40020010 	.word	0x40020010
 80039a4:	40020028 	.word	0x40020028
 80039a8:	40020040 	.word	0x40020040
 80039ac:	40020058 	.word	0x40020058
 80039b0:	40020070 	.word	0x40020070
 80039b4:	40020088 	.word	0x40020088
 80039b8:	400200a0 	.word	0x400200a0
 80039bc:	400200b8 	.word	0x400200b8
 80039c0:	40020410 	.word	0x40020410
 80039c4:	40020428 	.word	0x40020428
 80039c8:	40020440 	.word	0x40020440
 80039cc:	40020458 	.word	0x40020458
 80039d0:	40020470 	.word	0x40020470
 80039d4:	40020488 	.word	0x40020488
 80039d8:	400204a0 	.word	0x400204a0
 80039dc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 020e 	bic.w	r2, r3, #14
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 020a 	orr.w	r2, r2, #10
 80039f2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0204 	orr.w	r2, r2, #4
 8003a0a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a83      	ldr	r2, [pc, #524]	@ (8003c20 <HAL_DMA_Start_IT+0x474>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d072      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a82      	ldr	r2, [pc, #520]	@ (8003c24 <HAL_DMA_Start_IT+0x478>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d06d      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a80      	ldr	r2, [pc, #512]	@ (8003c28 <HAL_DMA_Start_IT+0x47c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d068      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a7f      	ldr	r2, [pc, #508]	@ (8003c2c <HAL_DMA_Start_IT+0x480>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d063      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a7d      	ldr	r2, [pc, #500]	@ (8003c30 <HAL_DMA_Start_IT+0x484>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d05e      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7c      	ldr	r2, [pc, #496]	@ (8003c34 <HAL_DMA_Start_IT+0x488>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d059      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a7a      	ldr	r2, [pc, #488]	@ (8003c38 <HAL_DMA_Start_IT+0x48c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d054      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a79      	ldr	r2, [pc, #484]	@ (8003c3c <HAL_DMA_Start_IT+0x490>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d04f      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a77      	ldr	r2, [pc, #476]	@ (8003c40 <HAL_DMA_Start_IT+0x494>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d04a      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a76      	ldr	r2, [pc, #472]	@ (8003c44 <HAL_DMA_Start_IT+0x498>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d045      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a74      	ldr	r2, [pc, #464]	@ (8003c48 <HAL_DMA_Start_IT+0x49c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d040      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a73      	ldr	r2, [pc, #460]	@ (8003c4c <HAL_DMA_Start_IT+0x4a0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d03b      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a71      	ldr	r2, [pc, #452]	@ (8003c50 <HAL_DMA_Start_IT+0x4a4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d036      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a70      	ldr	r2, [pc, #448]	@ (8003c54 <HAL_DMA_Start_IT+0x4a8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d031      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a6e      	ldr	r2, [pc, #440]	@ (8003c58 <HAL_DMA_Start_IT+0x4ac>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d02c      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a6d      	ldr	r2, [pc, #436]	@ (8003c5c <HAL_DMA_Start_IT+0x4b0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d027      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a6b      	ldr	r2, [pc, #428]	@ (8003c60 <HAL_DMA_Start_IT+0x4b4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d022      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6a      	ldr	r2, [pc, #424]	@ (8003c64 <HAL_DMA_Start_IT+0x4b8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d01d      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a68      	ldr	r2, [pc, #416]	@ (8003c68 <HAL_DMA_Start_IT+0x4bc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d018      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a67      	ldr	r2, [pc, #412]	@ (8003c6c <HAL_DMA_Start_IT+0x4c0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d013      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a65      	ldr	r2, [pc, #404]	@ (8003c70 <HAL_DMA_Start_IT+0x4c4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00e      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a64      	ldr	r2, [pc, #400]	@ (8003c74 <HAL_DMA_Start_IT+0x4c8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d009      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a62      	ldr	r2, [pc, #392]	@ (8003c78 <HAL_DMA_Start_IT+0x4cc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d004      	beq.n	8003afc <HAL_DMA_Start_IT+0x350>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a61      	ldr	r2, [pc, #388]	@ (8003c7c <HAL_DMA_Start_IT+0x4d0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d101      	bne.n	8003b00 <HAL_DMA_Start_IT+0x354>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <HAL_DMA_Start_IT+0x356>
 8003b00:	2300      	movs	r3, #0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01a      	beq.n	8003b3c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d007      	beq.n	8003b24 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b22:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b3a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a37      	ldr	r2, [pc, #220]	@ (8003c20 <HAL_DMA_Start_IT+0x474>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d04a      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a36      	ldr	r2, [pc, #216]	@ (8003c24 <HAL_DMA_Start_IT+0x478>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d045      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a34      	ldr	r2, [pc, #208]	@ (8003c28 <HAL_DMA_Start_IT+0x47c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d040      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a33      	ldr	r2, [pc, #204]	@ (8003c2c <HAL_DMA_Start_IT+0x480>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d03b      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a31      	ldr	r2, [pc, #196]	@ (8003c30 <HAL_DMA_Start_IT+0x484>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d036      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a30      	ldr	r2, [pc, #192]	@ (8003c34 <HAL_DMA_Start_IT+0x488>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d031      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003c38 <HAL_DMA_Start_IT+0x48c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d02c      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a2d      	ldr	r2, [pc, #180]	@ (8003c3c <HAL_DMA_Start_IT+0x490>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d027      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a2b      	ldr	r2, [pc, #172]	@ (8003c40 <HAL_DMA_Start_IT+0x494>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d022      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003c44 <HAL_DMA_Start_IT+0x498>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d01d      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a28      	ldr	r2, [pc, #160]	@ (8003c48 <HAL_DMA_Start_IT+0x49c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d018      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a27      	ldr	r2, [pc, #156]	@ (8003c4c <HAL_DMA_Start_IT+0x4a0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d013      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a25      	ldr	r2, [pc, #148]	@ (8003c50 <HAL_DMA_Start_IT+0x4a4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00e      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a24      	ldr	r2, [pc, #144]	@ (8003c54 <HAL_DMA_Start_IT+0x4a8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d009      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a22      	ldr	r2, [pc, #136]	@ (8003c58 <HAL_DMA_Start_IT+0x4ac>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d004      	beq.n	8003bdc <HAL_DMA_Start_IT+0x430>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a21      	ldr	r2, [pc, #132]	@ (8003c5c <HAL_DMA_Start_IT+0x4b0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d108      	bne.n	8003bee <HAL_DMA_Start_IT+0x442>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e012      	b.n	8003c14 <HAL_DMA_Start_IT+0x468>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0201 	orr.w	r2, r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e009      	b.n	8003c14 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40020010 	.word	0x40020010
 8003c24:	40020028 	.word	0x40020028
 8003c28:	40020040 	.word	0x40020040
 8003c2c:	40020058 	.word	0x40020058
 8003c30:	40020070 	.word	0x40020070
 8003c34:	40020088 	.word	0x40020088
 8003c38:	400200a0 	.word	0x400200a0
 8003c3c:	400200b8 	.word	0x400200b8
 8003c40:	40020410 	.word	0x40020410
 8003c44:	40020428 	.word	0x40020428
 8003c48:	40020440 	.word	0x40020440
 8003c4c:	40020458 	.word	0x40020458
 8003c50:	40020470 	.word	0x40020470
 8003c54:	40020488 	.word	0x40020488
 8003c58:	400204a0 	.word	0x400204a0
 8003c5c:	400204b8 	.word	0x400204b8
 8003c60:	58025408 	.word	0x58025408
 8003c64:	5802541c 	.word	0x5802541c
 8003c68:	58025430 	.word	0x58025430
 8003c6c:	58025444 	.word	0x58025444
 8003c70:	58025458 	.word	0x58025458
 8003c74:	5802546c 	.word	0x5802546c
 8003c78:	58025480 	.word	0x58025480
 8003c7c:	58025494 	.word	0x58025494

08003c80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	@ 0x28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c8c:	4b67      	ldr	r3, [pc, #412]	@ (8003e2c <HAL_DMA_IRQHandler+0x1ac>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a67      	ldr	r2, [pc, #412]	@ (8003e30 <HAL_DMA_IRQHandler+0x1b0>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	0a9b      	lsrs	r3, r3, #10
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a5f      	ldr	r2, [pc, #380]	@ (8003e34 <HAL_DMA_IRQHandler+0x1b4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d04a      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a5d      	ldr	r2, [pc, #372]	@ (8003e38 <HAL_DMA_IRQHandler+0x1b8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d045      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a5c      	ldr	r2, [pc, #368]	@ (8003e3c <HAL_DMA_IRQHandler+0x1bc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d040      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a5a      	ldr	r2, [pc, #360]	@ (8003e40 <HAL_DMA_IRQHandler+0x1c0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d03b      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a59      	ldr	r2, [pc, #356]	@ (8003e44 <HAL_DMA_IRQHandler+0x1c4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d036      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a57      	ldr	r2, [pc, #348]	@ (8003e48 <HAL_DMA_IRQHandler+0x1c8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d031      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a56      	ldr	r2, [pc, #344]	@ (8003e4c <HAL_DMA_IRQHandler+0x1cc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d02c      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a54      	ldr	r2, [pc, #336]	@ (8003e50 <HAL_DMA_IRQHandler+0x1d0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d027      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a53      	ldr	r2, [pc, #332]	@ (8003e54 <HAL_DMA_IRQHandler+0x1d4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d022      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a51      	ldr	r2, [pc, #324]	@ (8003e58 <HAL_DMA_IRQHandler+0x1d8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d01d      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a50      	ldr	r2, [pc, #320]	@ (8003e5c <HAL_DMA_IRQHandler+0x1dc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d018      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a4e      	ldr	r2, [pc, #312]	@ (8003e60 <HAL_DMA_IRQHandler+0x1e0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a4d      	ldr	r2, [pc, #308]	@ (8003e64 <HAL_DMA_IRQHandler+0x1e4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00e      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a4b      	ldr	r2, [pc, #300]	@ (8003e68 <HAL_DMA_IRQHandler+0x1e8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d009      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a4a      	ldr	r2, [pc, #296]	@ (8003e6c <HAL_DMA_IRQHandler+0x1ec>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d004      	beq.n	8003d52 <HAL_DMA_IRQHandler+0xd2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a48      	ldr	r2, [pc, #288]	@ (8003e70 <HAL_DMA_IRQHandler+0x1f0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d101      	bne.n	8003d56 <HAL_DMA_IRQHandler+0xd6>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <HAL_DMA_IRQHandler+0xd8>
 8003d56:	2300      	movs	r3, #0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 842b 	beq.w	80045b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2208      	movs	r2, #8
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80a2 	beq.w	8003eb8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2e      	ldr	r2, [pc, #184]	@ (8003e34 <HAL_DMA_IRQHandler+0x1b4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d04a      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2d      	ldr	r2, [pc, #180]	@ (8003e38 <HAL_DMA_IRQHandler+0x1b8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d045      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e3c <HAL_DMA_IRQHandler+0x1bc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d040      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a2a      	ldr	r2, [pc, #168]	@ (8003e40 <HAL_DMA_IRQHandler+0x1c0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d03b      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a28      	ldr	r2, [pc, #160]	@ (8003e44 <HAL_DMA_IRQHandler+0x1c4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d036      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a27      	ldr	r2, [pc, #156]	@ (8003e48 <HAL_DMA_IRQHandler+0x1c8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d031      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a25      	ldr	r2, [pc, #148]	@ (8003e4c <HAL_DMA_IRQHandler+0x1cc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d02c      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a24      	ldr	r2, [pc, #144]	@ (8003e50 <HAL_DMA_IRQHandler+0x1d0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d027      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a22      	ldr	r2, [pc, #136]	@ (8003e54 <HAL_DMA_IRQHandler+0x1d4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d022      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a21      	ldr	r2, [pc, #132]	@ (8003e58 <HAL_DMA_IRQHandler+0x1d8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d01d      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e5c <HAL_DMA_IRQHandler+0x1dc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d018      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e60 <HAL_DMA_IRQHandler+0x1e0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e64 <HAL_DMA_IRQHandler+0x1e4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8003e68 <HAL_DMA_IRQHandler+0x1e8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a19      	ldr	r2, [pc, #100]	@ (8003e6c <HAL_DMA_IRQHandler+0x1ec>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x194>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a18      	ldr	r2, [pc, #96]	@ (8003e70 <HAL_DMA_IRQHandler+0x1f0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d12f      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x1f4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	bf14      	ite	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	2300      	moveq	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	e02e      	b.n	8003e88 <HAL_DMA_IRQHandler+0x208>
 8003e2a:	bf00      	nop
 8003e2c:	24000000 	.word	0x24000000
 8003e30:	1b4e81b5 	.word	0x1b4e81b5
 8003e34:	40020010 	.word	0x40020010
 8003e38:	40020028 	.word	0x40020028
 8003e3c:	40020040 	.word	0x40020040
 8003e40:	40020058 	.word	0x40020058
 8003e44:	40020070 	.word	0x40020070
 8003e48:	40020088 	.word	0x40020088
 8003e4c:	400200a0 	.word	0x400200a0
 8003e50:	400200b8 	.word	0x400200b8
 8003e54:	40020410 	.word	0x40020410
 8003e58:	40020428 	.word	0x40020428
 8003e5c:	40020440 	.word	0x40020440
 8003e60:	40020458 	.word	0x40020458
 8003e64:	40020470 	.word	0x40020470
 8003e68:	40020488 	.word	0x40020488
 8003e6c:	400204a0 	.word	0x400204a0
 8003e70:	400204b8 	.word	0x400204b8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d015      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0204 	bic.w	r2, r2, #4
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb0:	f043 0201 	orr.w	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d06e      	beq.n	8003fac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a69      	ldr	r2, [pc, #420]	@ (8004078 <HAL_DMA_IRQHandler+0x3f8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d04a      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a67      	ldr	r2, [pc, #412]	@ (800407c <HAL_DMA_IRQHandler+0x3fc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d045      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a66      	ldr	r2, [pc, #408]	@ (8004080 <HAL_DMA_IRQHandler+0x400>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d040      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a64      	ldr	r2, [pc, #400]	@ (8004084 <HAL_DMA_IRQHandler+0x404>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d03b      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a63      	ldr	r2, [pc, #396]	@ (8004088 <HAL_DMA_IRQHandler+0x408>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d036      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a61      	ldr	r2, [pc, #388]	@ (800408c <HAL_DMA_IRQHandler+0x40c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d031      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a60      	ldr	r2, [pc, #384]	@ (8004090 <HAL_DMA_IRQHandler+0x410>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d02c      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a5e      	ldr	r2, [pc, #376]	@ (8004094 <HAL_DMA_IRQHandler+0x414>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d027      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a5d      	ldr	r2, [pc, #372]	@ (8004098 <HAL_DMA_IRQHandler+0x418>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d022      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a5b      	ldr	r2, [pc, #364]	@ (800409c <HAL_DMA_IRQHandler+0x41c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01d      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a5a      	ldr	r2, [pc, #360]	@ (80040a0 <HAL_DMA_IRQHandler+0x420>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d018      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a58      	ldr	r2, [pc, #352]	@ (80040a4 <HAL_DMA_IRQHandler+0x424>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a57      	ldr	r2, [pc, #348]	@ (80040a8 <HAL_DMA_IRQHandler+0x428>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00e      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a55      	ldr	r2, [pc, #340]	@ (80040ac <HAL_DMA_IRQHandler+0x42c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d009      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a54      	ldr	r2, [pc, #336]	@ (80040b0 <HAL_DMA_IRQHandler+0x430>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2ee>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a52      	ldr	r2, [pc, #328]	@ (80040b4 <HAL_DMA_IRQHandler+0x434>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d10a      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x304>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf14      	ite	ne
 8003f7c:	2301      	movne	r3, #1
 8003f7e:	2300      	moveq	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	e003      	b.n	8003f8c <HAL_DMA_IRQHandler+0x30c>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	2201      	movs	r2, #1
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa4:	f043 0202 	orr.w	r2, r3, #2
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 808f 	beq.w	80040e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8004078 <HAL_DMA_IRQHandler+0x3f8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d04a      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800407c <HAL_DMA_IRQHandler+0x3fc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d045      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a29      	ldr	r2, [pc, #164]	@ (8004080 <HAL_DMA_IRQHandler+0x400>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d040      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a27      	ldr	r2, [pc, #156]	@ (8004084 <HAL_DMA_IRQHandler+0x404>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d03b      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a26      	ldr	r2, [pc, #152]	@ (8004088 <HAL_DMA_IRQHandler+0x408>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d036      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a24      	ldr	r2, [pc, #144]	@ (800408c <HAL_DMA_IRQHandler+0x40c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d031      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a23      	ldr	r2, [pc, #140]	@ (8004090 <HAL_DMA_IRQHandler+0x410>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d02c      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a21      	ldr	r2, [pc, #132]	@ (8004094 <HAL_DMA_IRQHandler+0x414>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d027      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a20      	ldr	r2, [pc, #128]	@ (8004098 <HAL_DMA_IRQHandler+0x418>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d022      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1e      	ldr	r2, [pc, #120]	@ (800409c <HAL_DMA_IRQHandler+0x41c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01d      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1d      	ldr	r2, [pc, #116]	@ (80040a0 <HAL_DMA_IRQHandler+0x420>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d018      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1b      	ldr	r2, [pc, #108]	@ (80040a4 <HAL_DMA_IRQHandler+0x424>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1a      	ldr	r2, [pc, #104]	@ (80040a8 <HAL_DMA_IRQHandler+0x428>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00e      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a18      	ldr	r2, [pc, #96]	@ (80040ac <HAL_DMA_IRQHandler+0x42c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a17      	ldr	r2, [pc, #92]	@ (80040b0 <HAL_DMA_IRQHandler+0x430>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_DMA_IRQHandler+0x3e2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a15      	ldr	r2, [pc, #84]	@ (80040b4 <HAL_DMA_IRQHandler+0x434>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d12a      	bne.n	80040b8 <HAL_DMA_IRQHandler+0x438>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf14      	ite	ne
 8004070:	2301      	movne	r3, #1
 8004072:	2300      	moveq	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e023      	b.n	80040c0 <HAL_DMA_IRQHandler+0x440>
 8004078:	40020010 	.word	0x40020010
 800407c:	40020028 	.word	0x40020028
 8004080:	40020040 	.word	0x40020040
 8004084:	40020058 	.word	0x40020058
 8004088:	40020070 	.word	0x40020070
 800408c:	40020088 	.word	0x40020088
 8004090:	400200a0 	.word	0x400200a0
 8004094:	400200b8 	.word	0x400200b8
 8004098:	40020410 	.word	0x40020410
 800409c:	40020428 	.word	0x40020428
 80040a0:	40020440 	.word	0x40020440
 80040a4:	40020458 	.word	0x40020458
 80040a8:	40020470 	.word	0x40020470
 80040ac:	40020488 	.word	0x40020488
 80040b0:	400204a0 	.word	0x400204a0
 80040b4:	400204b8 	.word	0x400204b8
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2300      	movs	r3, #0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00d      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	2204      	movs	r2, #4
 80040ce:	409a      	lsls	r2, r3
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d8:	f043 0204 	orr.w	r2, r3, #4
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	2210      	movs	r2, #16
 80040ea:	409a      	lsls	r2, r3
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80a6 	beq.w	8004242 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a85      	ldr	r2, [pc, #532]	@ (8004310 <HAL_DMA_IRQHandler+0x690>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d04a      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a83      	ldr	r2, [pc, #524]	@ (8004314 <HAL_DMA_IRQHandler+0x694>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d045      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a82      	ldr	r2, [pc, #520]	@ (8004318 <HAL_DMA_IRQHandler+0x698>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d040      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a80      	ldr	r2, [pc, #512]	@ (800431c <HAL_DMA_IRQHandler+0x69c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d03b      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a7f      	ldr	r2, [pc, #508]	@ (8004320 <HAL_DMA_IRQHandler+0x6a0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d036      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a7d      	ldr	r2, [pc, #500]	@ (8004324 <HAL_DMA_IRQHandler+0x6a4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d031      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a7c      	ldr	r2, [pc, #496]	@ (8004328 <HAL_DMA_IRQHandler+0x6a8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d02c      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a7a      	ldr	r2, [pc, #488]	@ (800432c <HAL_DMA_IRQHandler+0x6ac>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d027      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a79      	ldr	r2, [pc, #484]	@ (8004330 <HAL_DMA_IRQHandler+0x6b0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d022      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a77      	ldr	r2, [pc, #476]	@ (8004334 <HAL_DMA_IRQHandler+0x6b4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01d      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a76      	ldr	r2, [pc, #472]	@ (8004338 <HAL_DMA_IRQHandler+0x6b8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d018      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a74      	ldr	r2, [pc, #464]	@ (800433c <HAL_DMA_IRQHandler+0x6bc>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a73      	ldr	r2, [pc, #460]	@ (8004340 <HAL_DMA_IRQHandler+0x6c0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00e      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a71      	ldr	r2, [pc, #452]	@ (8004344 <HAL_DMA_IRQHandler+0x6c4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d009      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a70      	ldr	r2, [pc, #448]	@ (8004348 <HAL_DMA_IRQHandler+0x6c8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_DMA_IRQHandler+0x516>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a6e      	ldr	r2, [pc, #440]	@ (800434c <HAL_DMA_IRQHandler+0x6cc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10a      	bne.n	80041ac <HAL_DMA_IRQHandler+0x52c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf14      	ite	ne
 80041a4:	2301      	movne	r3, #1
 80041a6:	2300      	moveq	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e009      	b.n	80041c0 <HAL_DMA_IRQHandler+0x540>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d03e      	beq.n	8004242 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	2210      	movs	r2, #16
 80041ce:	409a      	lsls	r2, r3
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d018      	beq.n	8004214 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d108      	bne.n	8004202 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d024      	beq.n	8004242 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	4798      	blx	r3
 8004200:	e01f      	b.n	8004242 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01b      	beq.n	8004242 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
 8004212:	e016      	b.n	8004242 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d107      	bne.n	8004232 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0208 	bic.w	r2, r2, #8
 8004230:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004246:	f003 031f 	and.w	r3, r3, #31
 800424a:	2220      	movs	r2, #32
 800424c:	409a      	lsls	r2, r3
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	4013      	ands	r3, r2
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8110 	beq.w	8004478 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2c      	ldr	r2, [pc, #176]	@ (8004310 <HAL_DMA_IRQHandler+0x690>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d04a      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2b      	ldr	r2, [pc, #172]	@ (8004314 <HAL_DMA_IRQHandler+0x694>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d045      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a29      	ldr	r2, [pc, #164]	@ (8004318 <HAL_DMA_IRQHandler+0x698>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d040      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a28      	ldr	r2, [pc, #160]	@ (800431c <HAL_DMA_IRQHandler+0x69c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d03b      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a26      	ldr	r2, [pc, #152]	@ (8004320 <HAL_DMA_IRQHandler+0x6a0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d036      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a25      	ldr	r2, [pc, #148]	@ (8004324 <HAL_DMA_IRQHandler+0x6a4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d031      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a23      	ldr	r2, [pc, #140]	@ (8004328 <HAL_DMA_IRQHandler+0x6a8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d02c      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a22      	ldr	r2, [pc, #136]	@ (800432c <HAL_DMA_IRQHandler+0x6ac>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d027      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a20      	ldr	r2, [pc, #128]	@ (8004330 <HAL_DMA_IRQHandler+0x6b0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d022      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004334 <HAL_DMA_IRQHandler+0x6b4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d01d      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004338 <HAL_DMA_IRQHandler+0x6b8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d018      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1c      	ldr	r2, [pc, #112]	@ (800433c <HAL_DMA_IRQHandler+0x6bc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d013      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004340 <HAL_DMA_IRQHandler+0x6c0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00e      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a19      	ldr	r2, [pc, #100]	@ (8004344 <HAL_DMA_IRQHandler+0x6c4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d009      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a17      	ldr	r2, [pc, #92]	@ (8004348 <HAL_DMA_IRQHandler+0x6c8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x678>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a16      	ldr	r2, [pc, #88]	@ (800434c <HAL_DMA_IRQHandler+0x6cc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d12b      	bne.n	8004350 <HAL_DMA_IRQHandler+0x6d0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b00      	cmp	r3, #0
 8004304:	bf14      	ite	ne
 8004306:	2301      	movne	r3, #1
 8004308:	2300      	moveq	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	e02a      	b.n	8004364 <HAL_DMA_IRQHandler+0x6e4>
 800430e:	bf00      	nop
 8004310:	40020010 	.word	0x40020010
 8004314:	40020028 	.word	0x40020028
 8004318:	40020040 	.word	0x40020040
 800431c:	40020058 	.word	0x40020058
 8004320:	40020070 	.word	0x40020070
 8004324:	40020088 	.word	0x40020088
 8004328:	400200a0 	.word	0x400200a0
 800432c:	400200b8 	.word	0x400200b8
 8004330:	40020410 	.word	0x40020410
 8004334:	40020428 	.word	0x40020428
 8004338:	40020440 	.word	0x40020440
 800433c:	40020458 	.word	0x40020458
 8004340:	40020470 	.word	0x40020470
 8004344:	40020488 	.word	0x40020488
 8004348:	400204a0 	.word	0x400204a0
 800434c:	400204b8 	.word	0x400204b8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	bf14      	ite	ne
 800435e:	2301      	movne	r3, #1
 8004360:	2300      	moveq	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8087 	beq.w	8004478 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	2220      	movs	r2, #32
 8004374:	409a      	lsls	r2, r3
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b04      	cmp	r3, #4
 8004384:	d139      	bne.n	80043fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0216 	bic.w	r2, r2, #22
 8004394:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <HAL_DMA_IRQHandler+0x736>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0208 	bic.w	r2, r2, #8
 80043c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	223f      	movs	r2, #63	@ 0x3f
 80043d0:	409a      	lsls	r2, r3
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 8382 	beq.w	8004af4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	4798      	blx	r3
          }
          return;
 80043f8:	e37c      	b.n	8004af4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d018      	beq.n	800443a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d108      	bne.n	8004428 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441a:	2b00      	cmp	r3, #0
 800441c:	d02c      	beq.n	8004478 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	4798      	blx	r3
 8004426:	e027      	b.n	8004478 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d023      	beq.n	8004478 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	4798      	blx	r3
 8004438:	e01e      	b.n	8004478 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10f      	bne.n	8004468 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0210 	bic.w	r2, r2, #16
 8004456:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 833e 	beq.w	8004afe <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 8088 	beq.w	80045a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2204      	movs	r2, #4
 8004494:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a89      	ldr	r2, [pc, #548]	@ (80046c4 <HAL_DMA_IRQHandler+0xa44>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d04a      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a88      	ldr	r2, [pc, #544]	@ (80046c8 <HAL_DMA_IRQHandler+0xa48>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d045      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a86      	ldr	r2, [pc, #536]	@ (80046cc <HAL_DMA_IRQHandler+0xa4c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d040      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a85      	ldr	r2, [pc, #532]	@ (80046d0 <HAL_DMA_IRQHandler+0xa50>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d03b      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a83      	ldr	r2, [pc, #524]	@ (80046d4 <HAL_DMA_IRQHandler+0xa54>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d036      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a82      	ldr	r2, [pc, #520]	@ (80046d8 <HAL_DMA_IRQHandler+0xa58>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d031      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a80      	ldr	r2, [pc, #512]	@ (80046dc <HAL_DMA_IRQHandler+0xa5c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d02c      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a7f      	ldr	r2, [pc, #508]	@ (80046e0 <HAL_DMA_IRQHandler+0xa60>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d027      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a7d      	ldr	r2, [pc, #500]	@ (80046e4 <HAL_DMA_IRQHandler+0xa64>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d022      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a7c      	ldr	r2, [pc, #496]	@ (80046e8 <HAL_DMA_IRQHandler+0xa68>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d01d      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a7a      	ldr	r2, [pc, #488]	@ (80046ec <HAL_DMA_IRQHandler+0xa6c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d018      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a79      	ldr	r2, [pc, #484]	@ (80046f0 <HAL_DMA_IRQHandler+0xa70>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d013      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a77      	ldr	r2, [pc, #476]	@ (80046f4 <HAL_DMA_IRQHandler+0xa74>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00e      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a76      	ldr	r2, [pc, #472]	@ (80046f8 <HAL_DMA_IRQHandler+0xa78>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d009      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a74      	ldr	r2, [pc, #464]	@ (80046fc <HAL_DMA_IRQHandler+0xa7c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <HAL_DMA_IRQHandler+0x8b8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a73      	ldr	r2, [pc, #460]	@ (8004700 <HAL_DMA_IRQHandler+0xa80>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d108      	bne.n	800454a <HAL_DMA_IRQHandler+0x8ca>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0201 	bic.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	e007      	b.n	800455a <HAL_DMA_IRQHandler+0x8da>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0201 	bic.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004562:	429a      	cmp	r2, r3
 8004564:	d307      	bcc.n	8004576 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1f2      	bne.n	800455a <HAL_DMA_IRQHandler+0x8da>
 8004574:	e000      	b.n	8004578 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004576:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2203      	movs	r2, #3
 800458a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800458e:	e003      	b.n	8004598 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 82aa 	beq.w	8004afe <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	4798      	blx	r3
 80045b2:	e2a4      	b.n	8004afe <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a52      	ldr	r2, [pc, #328]	@ (8004704 <HAL_DMA_IRQHandler+0xa84>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d04a      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a51      	ldr	r2, [pc, #324]	@ (8004708 <HAL_DMA_IRQHandler+0xa88>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d045      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a4f      	ldr	r2, [pc, #316]	@ (800470c <HAL_DMA_IRQHandler+0xa8c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d040      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a4e      	ldr	r2, [pc, #312]	@ (8004710 <HAL_DMA_IRQHandler+0xa90>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d03b      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a4c      	ldr	r2, [pc, #304]	@ (8004714 <HAL_DMA_IRQHandler+0xa94>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d036      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a4b      	ldr	r2, [pc, #300]	@ (8004718 <HAL_DMA_IRQHandler+0xa98>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d031      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a49      	ldr	r2, [pc, #292]	@ (800471c <HAL_DMA_IRQHandler+0xa9c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d02c      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a48      	ldr	r2, [pc, #288]	@ (8004720 <HAL_DMA_IRQHandler+0xaa0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d027      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a46      	ldr	r2, [pc, #280]	@ (8004724 <HAL_DMA_IRQHandler+0xaa4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d022      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a45      	ldr	r2, [pc, #276]	@ (8004728 <HAL_DMA_IRQHandler+0xaa8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d01d      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a43      	ldr	r2, [pc, #268]	@ (800472c <HAL_DMA_IRQHandler+0xaac>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d018      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a42      	ldr	r2, [pc, #264]	@ (8004730 <HAL_DMA_IRQHandler+0xab0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d013      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a40      	ldr	r2, [pc, #256]	@ (8004734 <HAL_DMA_IRQHandler+0xab4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00e      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a3f      	ldr	r2, [pc, #252]	@ (8004738 <HAL_DMA_IRQHandler+0xab8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a3d      	ldr	r2, [pc, #244]	@ (800473c <HAL_DMA_IRQHandler+0xabc>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d004      	beq.n	8004654 <HAL_DMA_IRQHandler+0x9d4>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a3c      	ldr	r2, [pc, #240]	@ (8004740 <HAL_DMA_IRQHandler+0xac0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d101      	bne.n	8004658 <HAL_DMA_IRQHandler+0x9d8>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <HAL_DMA_IRQHandler+0x9da>
 8004658:	2300      	movs	r3, #0
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 824f 	beq.w	8004afe <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	2204      	movs	r2, #4
 8004672:	409a      	lsls	r2, r3
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80dd 	beq.w	8004838 <HAL_DMA_IRQHandler+0xbb8>
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80d7 	beq.w	8004838 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	2204      	movs	r2, #4
 8004694:	409a      	lsls	r2, r3
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d059      	beq.n	8004758 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d14a      	bne.n	8004744 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 8220 	beq.w	8004af8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046c0:	e21a      	b.n	8004af8 <HAL_DMA_IRQHandler+0xe78>
 80046c2:	bf00      	nop
 80046c4:	40020010 	.word	0x40020010
 80046c8:	40020028 	.word	0x40020028
 80046cc:	40020040 	.word	0x40020040
 80046d0:	40020058 	.word	0x40020058
 80046d4:	40020070 	.word	0x40020070
 80046d8:	40020088 	.word	0x40020088
 80046dc:	400200a0 	.word	0x400200a0
 80046e0:	400200b8 	.word	0x400200b8
 80046e4:	40020410 	.word	0x40020410
 80046e8:	40020428 	.word	0x40020428
 80046ec:	40020440 	.word	0x40020440
 80046f0:	40020458 	.word	0x40020458
 80046f4:	40020470 	.word	0x40020470
 80046f8:	40020488 	.word	0x40020488
 80046fc:	400204a0 	.word	0x400204a0
 8004700:	400204b8 	.word	0x400204b8
 8004704:	48022c08 	.word	0x48022c08
 8004708:	48022c1c 	.word	0x48022c1c
 800470c:	48022c30 	.word	0x48022c30
 8004710:	48022c44 	.word	0x48022c44
 8004714:	48022c58 	.word	0x48022c58
 8004718:	48022c6c 	.word	0x48022c6c
 800471c:	48022c80 	.word	0x48022c80
 8004720:	48022c94 	.word	0x48022c94
 8004724:	58025408 	.word	0x58025408
 8004728:	5802541c 	.word	0x5802541c
 800472c:	58025430 	.word	0x58025430
 8004730:	58025444 	.word	0x58025444
 8004734:	58025458 	.word	0x58025458
 8004738:	5802546c 	.word	0x5802546c
 800473c:	58025480 	.word	0x58025480
 8004740:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 81d5 	beq.w	8004af8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004756:	e1cf      	b.n	8004af8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b00      	cmp	r3, #0
 8004760:	d160      	bne.n	8004824 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a7f      	ldr	r2, [pc, #508]	@ (8004964 <HAL_DMA_IRQHandler+0xce4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d04a      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a7d      	ldr	r2, [pc, #500]	@ (8004968 <HAL_DMA_IRQHandler+0xce8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d045      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a7c      	ldr	r2, [pc, #496]	@ (800496c <HAL_DMA_IRQHandler+0xcec>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d040      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a7a      	ldr	r2, [pc, #488]	@ (8004970 <HAL_DMA_IRQHandler+0xcf0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d03b      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a79      	ldr	r2, [pc, #484]	@ (8004974 <HAL_DMA_IRQHandler+0xcf4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d036      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a77      	ldr	r2, [pc, #476]	@ (8004978 <HAL_DMA_IRQHandler+0xcf8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d031      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a76      	ldr	r2, [pc, #472]	@ (800497c <HAL_DMA_IRQHandler+0xcfc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d02c      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a74      	ldr	r2, [pc, #464]	@ (8004980 <HAL_DMA_IRQHandler+0xd00>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d027      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a73      	ldr	r2, [pc, #460]	@ (8004984 <HAL_DMA_IRQHandler+0xd04>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d022      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a71      	ldr	r2, [pc, #452]	@ (8004988 <HAL_DMA_IRQHandler+0xd08>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01d      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a70      	ldr	r2, [pc, #448]	@ (800498c <HAL_DMA_IRQHandler+0xd0c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d018      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004990 <HAL_DMA_IRQHandler+0xd10>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6d      	ldr	r2, [pc, #436]	@ (8004994 <HAL_DMA_IRQHandler+0xd14>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00e      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a6b      	ldr	r2, [pc, #428]	@ (8004998 <HAL_DMA_IRQHandler+0xd18>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a6a      	ldr	r2, [pc, #424]	@ (800499c <HAL_DMA_IRQHandler+0xd1c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_DMA_IRQHandler+0xb82>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a68      	ldr	r2, [pc, #416]	@ (80049a0 <HAL_DMA_IRQHandler+0xd20>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d108      	bne.n	8004814 <HAL_DMA_IRQHandler+0xb94>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0208 	bic.w	r2, r2, #8
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e007      	b.n	8004824 <HAL_DMA_IRQHandler+0xba4>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0204 	bic.w	r2, r2, #4
 8004822:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8165 	beq.w	8004af8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004836:	e15f      	b.n	8004af8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	2202      	movs	r2, #2
 8004842:	409a      	lsls	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80c5 	beq.w	80049d8 <HAL_DMA_IRQHandler+0xd58>
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80bf 	beq.w	80049d8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	2202      	movs	r2, #2
 8004864:	409a      	lsls	r2, r3
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d018      	beq.n	80048a6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 813a 	beq.w	8004afc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004890:	e134      	b.n	8004afc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 8130 	beq.w	8004afc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048a4:	e12a      	b.n	8004afc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f040 8089 	bne.w	80049c4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004964 <HAL_DMA_IRQHandler+0xce4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d04a      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a29      	ldr	r2, [pc, #164]	@ (8004968 <HAL_DMA_IRQHandler+0xce8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d045      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a28      	ldr	r2, [pc, #160]	@ (800496c <HAL_DMA_IRQHandler+0xcec>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d040      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a26      	ldr	r2, [pc, #152]	@ (8004970 <HAL_DMA_IRQHandler+0xcf0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d03b      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a25      	ldr	r2, [pc, #148]	@ (8004974 <HAL_DMA_IRQHandler+0xcf4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d036      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a23      	ldr	r2, [pc, #140]	@ (8004978 <HAL_DMA_IRQHandler+0xcf8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d031      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a22      	ldr	r2, [pc, #136]	@ (800497c <HAL_DMA_IRQHandler+0xcfc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d02c      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a20      	ldr	r2, [pc, #128]	@ (8004980 <HAL_DMA_IRQHandler+0xd00>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d027      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1f      	ldr	r2, [pc, #124]	@ (8004984 <HAL_DMA_IRQHandler+0xd04>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d022      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1d      	ldr	r2, [pc, #116]	@ (8004988 <HAL_DMA_IRQHandler+0xd08>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01d      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1c      	ldr	r2, [pc, #112]	@ (800498c <HAL_DMA_IRQHandler+0xd0c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d018      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1a      	ldr	r2, [pc, #104]	@ (8004990 <HAL_DMA_IRQHandler+0xd10>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d013      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a19      	ldr	r2, [pc, #100]	@ (8004994 <HAL_DMA_IRQHandler+0xd14>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00e      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a17      	ldr	r2, [pc, #92]	@ (8004998 <HAL_DMA_IRQHandler+0xd18>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d009      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a16      	ldr	r2, [pc, #88]	@ (800499c <HAL_DMA_IRQHandler+0xd1c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d004      	beq.n	8004952 <HAL_DMA_IRQHandler+0xcd2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a14      	ldr	r2, [pc, #80]	@ (80049a0 <HAL_DMA_IRQHandler+0xd20>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d128      	bne.n	80049a4 <HAL_DMA_IRQHandler+0xd24>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0214 	bic.w	r2, r2, #20
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	e027      	b.n	80049b4 <HAL_DMA_IRQHandler+0xd34>
 8004964:	40020010 	.word	0x40020010
 8004968:	40020028 	.word	0x40020028
 800496c:	40020040 	.word	0x40020040
 8004970:	40020058 	.word	0x40020058
 8004974:	40020070 	.word	0x40020070
 8004978:	40020088 	.word	0x40020088
 800497c:	400200a0 	.word	0x400200a0
 8004980:	400200b8 	.word	0x400200b8
 8004984:	40020410 	.word	0x40020410
 8004988:	40020428 	.word	0x40020428
 800498c:	40020440 	.word	0x40020440
 8004990:	40020458 	.word	0x40020458
 8004994:	40020470 	.word	0x40020470
 8004998:	40020488 	.word	0x40020488
 800499c:	400204a0 	.word	0x400204a0
 80049a0:	400204b8 	.word	0x400204b8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 020a 	bic.w	r2, r2, #10
 80049b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8097 	beq.w	8004afc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049d6:	e091      	b.n	8004afc <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	2208      	movs	r2, #8
 80049e2:	409a      	lsls	r2, r3
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8088 	beq.w	8004afe <HAL_DMA_IRQHandler+0xe7e>
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8082 	beq.w	8004afe <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a41      	ldr	r2, [pc, #260]	@ (8004b04 <HAL_DMA_IRQHandler+0xe84>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d04a      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a3f      	ldr	r2, [pc, #252]	@ (8004b08 <HAL_DMA_IRQHandler+0xe88>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d045      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a3e      	ldr	r2, [pc, #248]	@ (8004b0c <HAL_DMA_IRQHandler+0xe8c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d040      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b10 <HAL_DMA_IRQHandler+0xe90>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d03b      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a3b      	ldr	r2, [pc, #236]	@ (8004b14 <HAL_DMA_IRQHandler+0xe94>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d036      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a39      	ldr	r2, [pc, #228]	@ (8004b18 <HAL_DMA_IRQHandler+0xe98>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d031      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a38      	ldr	r2, [pc, #224]	@ (8004b1c <HAL_DMA_IRQHandler+0xe9c>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d02c      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a36      	ldr	r2, [pc, #216]	@ (8004b20 <HAL_DMA_IRQHandler+0xea0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d027      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a35      	ldr	r2, [pc, #212]	@ (8004b24 <HAL_DMA_IRQHandler+0xea4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d022      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a33      	ldr	r2, [pc, #204]	@ (8004b28 <HAL_DMA_IRQHandler+0xea8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d01d      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a32      	ldr	r2, [pc, #200]	@ (8004b2c <HAL_DMA_IRQHandler+0xeac>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d018      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a30      	ldr	r2, [pc, #192]	@ (8004b30 <HAL_DMA_IRQHandler+0xeb0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2f      	ldr	r2, [pc, #188]	@ (8004b34 <HAL_DMA_IRQHandler+0xeb4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00e      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a2d      	ldr	r2, [pc, #180]	@ (8004b38 <HAL_DMA_IRQHandler+0xeb8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d009      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8004b3c <HAL_DMA_IRQHandler+0xebc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_DMA_IRQHandler+0xe1a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a2a      	ldr	r2, [pc, #168]	@ (8004b40 <HAL_DMA_IRQHandler+0xec0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d108      	bne.n	8004aac <HAL_DMA_IRQHandler+0xe2c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 021c 	bic.w	r2, r2, #28
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e007      	b.n	8004abc <HAL_DMA_IRQHandler+0xe3c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 020e 	bic.w	r2, r2, #14
 8004aba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4798      	blx	r3
 8004af2:	e004      	b.n	8004afe <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004af4:	bf00      	nop
 8004af6:	e002      	b.n	8004afe <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004af8:	bf00      	nop
 8004afa:	e000      	b.n	8004afe <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004afc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004afe:	3728      	adds	r7, #40	@ 0x28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40020010 	.word	0x40020010
 8004b08:	40020028 	.word	0x40020028
 8004b0c:	40020040 	.word	0x40020040
 8004b10:	40020058 	.word	0x40020058
 8004b14:	40020070 	.word	0x40020070
 8004b18:	40020088 	.word	0x40020088
 8004b1c:	400200a0 	.word	0x400200a0
 8004b20:	400200b8 	.word	0x400200b8
 8004b24:	40020410 	.word	0x40020410
 8004b28:	40020428 	.word	0x40020428
 8004b2c:	40020440 	.word	0x40020440
 8004b30:	40020458 	.word	0x40020458
 8004b34:	40020470 	.word	0x40020470
 8004b38:	40020488 	.word	0x40020488
 8004b3c:	400204a0 	.word	0x400204a0
 8004b40:	400204b8 	.word	0x400204b8

08004b44 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b56:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a7f      	ldr	r2, [pc, #508]	@ (8004d60 <DMA_SetConfig+0x21c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d072      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a7d      	ldr	r2, [pc, #500]	@ (8004d64 <DMA_SetConfig+0x220>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d06d      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a7c      	ldr	r2, [pc, #496]	@ (8004d68 <DMA_SetConfig+0x224>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d068      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a7a      	ldr	r2, [pc, #488]	@ (8004d6c <DMA_SetConfig+0x228>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d063      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a79      	ldr	r2, [pc, #484]	@ (8004d70 <DMA_SetConfig+0x22c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d05e      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a77      	ldr	r2, [pc, #476]	@ (8004d74 <DMA_SetConfig+0x230>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d059      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a76      	ldr	r2, [pc, #472]	@ (8004d78 <DMA_SetConfig+0x234>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d054      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a74      	ldr	r2, [pc, #464]	@ (8004d7c <DMA_SetConfig+0x238>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d04f      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a73      	ldr	r2, [pc, #460]	@ (8004d80 <DMA_SetConfig+0x23c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d04a      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a71      	ldr	r2, [pc, #452]	@ (8004d84 <DMA_SetConfig+0x240>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d045      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a70      	ldr	r2, [pc, #448]	@ (8004d88 <DMA_SetConfig+0x244>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d040      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a6e      	ldr	r2, [pc, #440]	@ (8004d8c <DMA_SetConfig+0x248>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d03b      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a6d      	ldr	r2, [pc, #436]	@ (8004d90 <DMA_SetConfig+0x24c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d036      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a6b      	ldr	r2, [pc, #428]	@ (8004d94 <DMA_SetConfig+0x250>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d031      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a6a      	ldr	r2, [pc, #424]	@ (8004d98 <DMA_SetConfig+0x254>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d02c      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a68      	ldr	r2, [pc, #416]	@ (8004d9c <DMA_SetConfig+0x258>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d027      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a67      	ldr	r2, [pc, #412]	@ (8004da0 <DMA_SetConfig+0x25c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d022      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a65      	ldr	r2, [pc, #404]	@ (8004da4 <DMA_SetConfig+0x260>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d01d      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a64      	ldr	r2, [pc, #400]	@ (8004da8 <DMA_SetConfig+0x264>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d018      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a62      	ldr	r2, [pc, #392]	@ (8004dac <DMA_SetConfig+0x268>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a61      	ldr	r2, [pc, #388]	@ (8004db0 <DMA_SetConfig+0x26c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00e      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a5f      	ldr	r2, [pc, #380]	@ (8004db4 <DMA_SetConfig+0x270>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d009      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a5e      	ldr	r2, [pc, #376]	@ (8004db8 <DMA_SetConfig+0x274>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <DMA_SetConfig+0x10a>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a5c      	ldr	r2, [pc, #368]	@ (8004dbc <DMA_SetConfig+0x278>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <DMA_SetConfig+0x10e>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <DMA_SetConfig+0x110>
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00d      	beq.n	8004c74 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c60:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c72:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a39      	ldr	r2, [pc, #228]	@ (8004d60 <DMA_SetConfig+0x21c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d04a      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a38      	ldr	r2, [pc, #224]	@ (8004d64 <DMA_SetConfig+0x220>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d045      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a36      	ldr	r2, [pc, #216]	@ (8004d68 <DMA_SetConfig+0x224>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d040      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a35      	ldr	r2, [pc, #212]	@ (8004d6c <DMA_SetConfig+0x228>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d03b      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a33      	ldr	r2, [pc, #204]	@ (8004d70 <DMA_SetConfig+0x22c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d036      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a32      	ldr	r2, [pc, #200]	@ (8004d74 <DMA_SetConfig+0x230>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d031      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a30      	ldr	r2, [pc, #192]	@ (8004d78 <DMA_SetConfig+0x234>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d02c      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8004d7c <DMA_SetConfig+0x238>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d027      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8004d80 <DMA_SetConfig+0x23c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d022      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8004d84 <DMA_SetConfig+0x240>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d01d      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8004d88 <DMA_SetConfig+0x244>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d018      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a29      	ldr	r2, [pc, #164]	@ (8004d8c <DMA_SetConfig+0x248>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a27      	ldr	r2, [pc, #156]	@ (8004d90 <DMA_SetConfig+0x24c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a26      	ldr	r2, [pc, #152]	@ (8004d94 <DMA_SetConfig+0x250>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a24      	ldr	r2, [pc, #144]	@ (8004d98 <DMA_SetConfig+0x254>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <DMA_SetConfig+0x1d0>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a23      	ldr	r2, [pc, #140]	@ (8004d9c <DMA_SetConfig+0x258>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d101      	bne.n	8004d18 <DMA_SetConfig+0x1d4>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <DMA_SetConfig+0x1d6>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d059      	beq.n	8004dd2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	223f      	movs	r2, #63	@ 0x3f
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d3c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b40      	cmp	r3, #64	@ 0x40
 8004d4c:	d138      	bne.n	8004dc0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d5e:	e0ae      	b.n	8004ebe <DMA_SetConfig+0x37a>
 8004d60:	40020010 	.word	0x40020010
 8004d64:	40020028 	.word	0x40020028
 8004d68:	40020040 	.word	0x40020040
 8004d6c:	40020058 	.word	0x40020058
 8004d70:	40020070 	.word	0x40020070
 8004d74:	40020088 	.word	0x40020088
 8004d78:	400200a0 	.word	0x400200a0
 8004d7c:	400200b8 	.word	0x400200b8
 8004d80:	40020410 	.word	0x40020410
 8004d84:	40020428 	.word	0x40020428
 8004d88:	40020440 	.word	0x40020440
 8004d8c:	40020458 	.word	0x40020458
 8004d90:	40020470 	.word	0x40020470
 8004d94:	40020488 	.word	0x40020488
 8004d98:	400204a0 	.word	0x400204a0
 8004d9c:	400204b8 	.word	0x400204b8
 8004da0:	58025408 	.word	0x58025408
 8004da4:	5802541c 	.word	0x5802541c
 8004da8:	58025430 	.word	0x58025430
 8004dac:	58025444 	.word	0x58025444
 8004db0:	58025458 	.word	0x58025458
 8004db4:	5802546c 	.word	0x5802546c
 8004db8:	58025480 	.word	0x58025480
 8004dbc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	60da      	str	r2, [r3, #12]
}
 8004dd0:	e075      	b.n	8004ebe <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a3d      	ldr	r2, [pc, #244]	@ (8004ecc <DMA_SetConfig+0x388>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d04a      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ed0 <DMA_SetConfig+0x38c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d045      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a3a      	ldr	r2, [pc, #232]	@ (8004ed4 <DMA_SetConfig+0x390>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d040      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a38      	ldr	r2, [pc, #224]	@ (8004ed8 <DMA_SetConfig+0x394>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d03b      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a37      	ldr	r2, [pc, #220]	@ (8004edc <DMA_SetConfig+0x398>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d036      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a35      	ldr	r2, [pc, #212]	@ (8004ee0 <DMA_SetConfig+0x39c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d031      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a34      	ldr	r2, [pc, #208]	@ (8004ee4 <DMA_SetConfig+0x3a0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d02c      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a32      	ldr	r2, [pc, #200]	@ (8004ee8 <DMA_SetConfig+0x3a4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d027      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a31      	ldr	r2, [pc, #196]	@ (8004eec <DMA_SetConfig+0x3a8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d022      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a2f      	ldr	r2, [pc, #188]	@ (8004ef0 <DMA_SetConfig+0x3ac>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01d      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ef4 <DMA_SetConfig+0x3b0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d018      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a2c      	ldr	r2, [pc, #176]	@ (8004ef8 <DMA_SetConfig+0x3b4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a2b      	ldr	r2, [pc, #172]	@ (8004efc <DMA_SetConfig+0x3b8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00e      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a29      	ldr	r2, [pc, #164]	@ (8004f00 <DMA_SetConfig+0x3bc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a28      	ldr	r2, [pc, #160]	@ (8004f04 <DMA_SetConfig+0x3c0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d004      	beq.n	8004e72 <DMA_SetConfig+0x32e>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a26      	ldr	r2, [pc, #152]	@ (8004f08 <DMA_SetConfig+0x3c4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d101      	bne.n	8004e76 <DMA_SetConfig+0x332>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <DMA_SetConfig+0x334>
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d020      	beq.n	8004ebe <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2201      	movs	r2, #1
 8004e86:	409a      	lsls	r2, r3
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b40      	cmp	r3, #64	@ 0x40
 8004e9a:	d108      	bne.n	8004eae <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	60da      	str	r2, [r3, #12]
}
 8004eac:	e007      	b.n	8004ebe <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	60da      	str	r2, [r3, #12]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	48022c08 	.word	0x48022c08
 8004ed0:	48022c1c 	.word	0x48022c1c
 8004ed4:	48022c30 	.word	0x48022c30
 8004ed8:	48022c44 	.word	0x48022c44
 8004edc:	48022c58 	.word	0x48022c58
 8004ee0:	48022c6c 	.word	0x48022c6c
 8004ee4:	48022c80 	.word	0x48022c80
 8004ee8:	48022c94 	.word	0x48022c94
 8004eec:	58025408 	.word	0x58025408
 8004ef0:	5802541c 	.word	0x5802541c
 8004ef4:	58025430 	.word	0x58025430
 8004ef8:	58025444 	.word	0x58025444
 8004efc:	58025458 	.word	0x58025458
 8004f00:	5802546c 	.word	0x5802546c
 8004f04:	58025480 	.word	0x58025480
 8004f08:	58025494 	.word	0x58025494

08004f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a42      	ldr	r2, [pc, #264]	@ (8005024 <DMA_CalcBaseAndBitshift+0x118>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d04a      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a41      	ldr	r2, [pc, #260]	@ (8005028 <DMA_CalcBaseAndBitshift+0x11c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d045      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a3f      	ldr	r2, [pc, #252]	@ (800502c <DMA_CalcBaseAndBitshift+0x120>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d040      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a3e      	ldr	r2, [pc, #248]	@ (8005030 <DMA_CalcBaseAndBitshift+0x124>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d03b      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a3c      	ldr	r2, [pc, #240]	@ (8005034 <DMA_CalcBaseAndBitshift+0x128>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d036      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a3b      	ldr	r2, [pc, #236]	@ (8005038 <DMA_CalcBaseAndBitshift+0x12c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d031      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a39      	ldr	r2, [pc, #228]	@ (800503c <DMA_CalcBaseAndBitshift+0x130>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d02c      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a38      	ldr	r2, [pc, #224]	@ (8005040 <DMA_CalcBaseAndBitshift+0x134>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d027      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a36      	ldr	r2, [pc, #216]	@ (8005044 <DMA_CalcBaseAndBitshift+0x138>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d022      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a35      	ldr	r2, [pc, #212]	@ (8005048 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d01d      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a33      	ldr	r2, [pc, #204]	@ (800504c <DMA_CalcBaseAndBitshift+0x140>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d018      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a32      	ldr	r2, [pc, #200]	@ (8005050 <DMA_CalcBaseAndBitshift+0x144>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a30      	ldr	r2, [pc, #192]	@ (8005054 <DMA_CalcBaseAndBitshift+0x148>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00e      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8005058 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d009      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800505c <DMA_CalcBaseAndBitshift+0x150>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a2c      	ldr	r2, [pc, #176]	@ (8005060 <DMA_CalcBaseAndBitshift+0x154>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d101      	bne.n	8004fb8 <DMA_CalcBaseAndBitshift+0xac>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <DMA_CalcBaseAndBitshift+0xae>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d024      	beq.n	8005008 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	3b10      	subs	r3, #16
 8004fc6:	4a27      	ldr	r2, [pc, #156]	@ (8005064 <DMA_CalcBaseAndBitshift+0x158>)
 8004fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fcc:	091b      	lsrs	r3, r3, #4
 8004fce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	4a24      	ldr	r2, [pc, #144]	@ (8005068 <DMA_CalcBaseAndBitshift+0x15c>)
 8004fd8:	5cd3      	ldrb	r3, [r2, r3]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d908      	bls.n	8004ff8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	4b1f      	ldr	r3, [pc, #124]	@ (800506c <DMA_CalcBaseAndBitshift+0x160>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	1d1a      	adds	r2, r3, #4
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ff6:	e00d      	b.n	8005014 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800506c <DMA_CalcBaseAndBitshift+0x160>)
 8005000:	4013      	ands	r3, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6593      	str	r3, [r2, #88]	@ 0x58
 8005006:	e005      	b.n	8005014 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	40020010 	.word	0x40020010
 8005028:	40020028 	.word	0x40020028
 800502c:	40020040 	.word	0x40020040
 8005030:	40020058 	.word	0x40020058
 8005034:	40020070 	.word	0x40020070
 8005038:	40020088 	.word	0x40020088
 800503c:	400200a0 	.word	0x400200a0
 8005040:	400200b8 	.word	0x400200b8
 8005044:	40020410 	.word	0x40020410
 8005048:	40020428 	.word	0x40020428
 800504c:	40020440 	.word	0x40020440
 8005050:	40020458 	.word	0x40020458
 8005054:	40020470 	.word	0x40020470
 8005058:	40020488 	.word	0x40020488
 800505c:	400204a0 	.word	0x400204a0
 8005060:	400204b8 	.word	0x400204b8
 8005064:	aaaaaaab 	.word	0xaaaaaaab
 8005068:	0800dcac 	.word	0x0800dcac
 800506c:	fffffc00 	.word	0xfffffc00

08005070 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d120      	bne.n	80050c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005088:	2b03      	cmp	r3, #3
 800508a:	d858      	bhi.n	800513e <DMA_CheckFifoParam+0xce>
 800508c:	a201      	add	r2, pc, #4	@ (adr r2, 8005094 <DMA_CheckFifoParam+0x24>)
 800508e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005092:	bf00      	nop
 8005094:	080050a5 	.word	0x080050a5
 8005098:	080050b7 	.word	0x080050b7
 800509c:	080050a5 	.word	0x080050a5
 80050a0:	0800513f 	.word	0x0800513f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d048      	beq.n	8005142 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050b4:	e045      	b.n	8005142 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050be:	d142      	bne.n	8005146 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050c4:	e03f      	b.n	8005146 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050ce:	d123      	bne.n	8005118 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d838      	bhi.n	800514a <DMA_CheckFifoParam+0xda>
 80050d8:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <DMA_CheckFifoParam+0x70>)
 80050da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050de:	bf00      	nop
 80050e0:	080050f1 	.word	0x080050f1
 80050e4:	080050f7 	.word	0x080050f7
 80050e8:	080050f1 	.word	0x080050f1
 80050ec:	08005109 	.word	0x08005109
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
        break;
 80050f4:	e030      	b.n	8005158 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d025      	beq.n	800514e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005106:	e022      	b.n	800514e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005110:	d11f      	bne.n	8005152 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005116:	e01c      	b.n	8005152 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511c:	2b02      	cmp	r3, #2
 800511e:	d902      	bls.n	8005126 <DMA_CheckFifoParam+0xb6>
 8005120:	2b03      	cmp	r3, #3
 8005122:	d003      	beq.n	800512c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005124:	e018      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	73fb      	strb	r3, [r7, #15]
        break;
 800512a:	e015      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00e      	beq.n	8005156 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
    break;
 800513c:	e00b      	b.n	8005156 <DMA_CheckFifoParam+0xe6>
        break;
 800513e:	bf00      	nop
 8005140:	e00a      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
        break;
 8005142:	bf00      	nop
 8005144:	e008      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
        break;
 8005146:	bf00      	nop
 8005148:	e006      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
        break;
 800514a:	bf00      	nop
 800514c:	e004      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
        break;
 800514e:	bf00      	nop
 8005150:	e002      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
        break;
 8005152:	bf00      	nop
 8005154:	e000      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
    break;
 8005156:	bf00      	nop
    }
  }

  return status;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop

08005168 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a38      	ldr	r2, [pc, #224]	@ (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d022      	beq.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a36      	ldr	r2, [pc, #216]	@ (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d01d      	beq.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a35      	ldr	r2, [pc, #212]	@ (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d018      	beq.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a33      	ldr	r2, [pc, #204]	@ (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d013      	beq.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a32      	ldr	r2, [pc, #200]	@ (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00e      	beq.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a30      	ldr	r2, [pc, #192]	@ (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d009      	beq.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005274 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d004      	beq.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005278 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d101      	bne.n	80051ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051ca:	2300      	movs	r3, #0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01a      	beq.n	8005206 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	3b08      	subs	r3, #8
 80051d8:	4a28      	ldr	r2, [pc, #160]	@ (800527c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	091b      	lsrs	r3, r3, #4
 80051e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4b26      	ldr	r3, [pc, #152]	@ (8005280 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	461a      	mov	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a24      	ldr	r2, [pc, #144]	@ (8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 031f 	and.w	r3, r3, #31
 80051fc:	2201      	movs	r2, #1
 80051fe:	409a      	lsls	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005204:	e024      	b.n	8005250 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	3b10      	subs	r3, #16
 800520e:	4a1e      	ldr	r2, [pc, #120]	@ (8005288 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	091b      	lsrs	r3, r3, #4
 8005216:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a1c      	ldr	r2, [pc, #112]	@ (800528c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d806      	bhi.n	800522e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4a1b      	ldr	r2, [pc, #108]	@ (8005290 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d902      	bls.n	800522e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3308      	adds	r3, #8
 800522c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4b18      	ldr	r3, [pc, #96]	@ (8005294 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	461a      	mov	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a16      	ldr	r2, [pc, #88]	@ (8005298 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005240:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	2201      	movs	r2, #1
 800524a:	409a      	lsls	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005250:	bf00      	nop
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	58025408 	.word	0x58025408
 8005260:	5802541c 	.word	0x5802541c
 8005264:	58025430 	.word	0x58025430
 8005268:	58025444 	.word	0x58025444
 800526c:	58025458 	.word	0x58025458
 8005270:	5802546c 	.word	0x5802546c
 8005274:	58025480 	.word	0x58025480
 8005278:	58025494 	.word	0x58025494
 800527c:	cccccccd 	.word	0xcccccccd
 8005280:	16009600 	.word	0x16009600
 8005284:	58025880 	.word	0x58025880
 8005288:	aaaaaaab 	.word	0xaaaaaaab
 800528c:	400204b8 	.word	0x400204b8
 8005290:	4002040f 	.word	0x4002040f
 8005294:	10008200 	.word	0x10008200
 8005298:	40020880 	.word	0x40020880

0800529c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d04a      	beq.n	8005348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d847      	bhi.n	8005348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a25      	ldr	r2, [pc, #148]	@ (8005354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d022      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a24      	ldr	r2, [pc, #144]	@ (8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d01d      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a22      	ldr	r2, [pc, #136]	@ (800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d018      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a21      	ldr	r2, [pc, #132]	@ (8005360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00e      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d009      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1c      	ldr	r2, [pc, #112]	@ (800536c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1b      	ldr	r2, [pc, #108]	@ (8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d101      	bne.n	800530c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005308:	2301      	movs	r3, #1
 800530a:	e000      	b.n	800530e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800530c:	2300      	movs	r3, #0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4b17      	ldr	r3, [pc, #92]	@ (8005374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005316:	4413      	add	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	461a      	mov	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a15      	ldr	r2, [pc, #84]	@ (8005378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005324:	671a      	str	r2, [r3, #112]	@ 0x70
 8005326:	e009      	b.n	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4b14      	ldr	r3, [pc, #80]	@ (800537c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	461a      	mov	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a11      	ldr	r2, [pc, #68]	@ (8005380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800533a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3b01      	subs	r3, #1
 8005340:	2201      	movs	r2, #1
 8005342:	409a      	lsls	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005348:	bf00      	nop
 800534a:	3714      	adds	r7, #20
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	58025408 	.word	0x58025408
 8005358:	5802541c 	.word	0x5802541c
 800535c:	58025430 	.word	0x58025430
 8005360:	58025444 	.word	0x58025444
 8005364:	58025458 	.word	0x58025458
 8005368:	5802546c 	.word	0x5802546c
 800536c:	58025480 	.word	0x58025480
 8005370:	58025494 	.word	0x58025494
 8005374:	1600963f 	.word	0x1600963f
 8005378:	58025940 	.word	0x58025940
 800537c:	1000823f 	.word	0x1000823f
 8005380:	40020940 	.word	0x40020940

08005384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005384:	b480      	push	{r7}
 8005386:	b089      	sub	sp, #36	@ 0x24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800538e:	2300      	movs	r3, #0
 8005390:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005392:	4b89      	ldr	r3, [pc, #548]	@ (80055b8 <HAL_GPIO_Init+0x234>)
 8005394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005396:	e194      	b.n	80056c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	2101      	movs	r1, #1
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	fa01 f303 	lsl.w	r3, r1, r3
 80053a4:	4013      	ands	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 8186 	beq.w	80056bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d005      	beq.n	80053c8 <HAL_GPIO_Init+0x44>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d130      	bne.n	800542a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	2203      	movs	r2, #3
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	43db      	mvns	r3, r3
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4013      	ands	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053fe:	2201      	movs	r2, #1
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	43db      	mvns	r3, r3
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4013      	ands	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	091b      	lsrs	r3, r3, #4
 8005414:	f003 0201 	and.w	r2, r3, #1
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	4313      	orrs	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	2b03      	cmp	r3, #3
 8005434:	d017      	beq.n	8005466 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	2203      	movs	r2, #3
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	43db      	mvns	r3, r3
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	4013      	ands	r3, r2
 800544c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	4313      	orrs	r3, r2
 800545e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d123      	bne.n	80054ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	08da      	lsrs	r2, r3, #3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3208      	adds	r2, #8
 800547a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	220f      	movs	r2, #15
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	43db      	mvns	r3, r3
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	4013      	ands	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	08da      	lsrs	r2, r3, #3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3208      	adds	r2, #8
 80054b4:	69b9      	ldr	r1, [r7, #24]
 80054b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	2203      	movs	r2, #3
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	43db      	mvns	r3, r3
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	4013      	ands	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f003 0203 	and.w	r2, r3, #3
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 80e0 	beq.w	80056bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054fc:	4b2f      	ldr	r3, [pc, #188]	@ (80055bc <HAL_GPIO_Init+0x238>)
 80054fe:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005502:	4a2e      	ldr	r2, [pc, #184]	@ (80055bc <HAL_GPIO_Init+0x238>)
 8005504:	f043 0302 	orr.w	r3, r3, #2
 8005508:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800550c:	4b2b      	ldr	r3, [pc, #172]	@ (80055bc <HAL_GPIO_Init+0x238>)
 800550e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800551a:	4a29      	ldr	r2, [pc, #164]	@ (80055c0 <HAL_GPIO_Init+0x23c>)
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	089b      	lsrs	r3, r3, #2
 8005520:	3302      	adds	r3, #2
 8005522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	220f      	movs	r2, #15
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43db      	mvns	r3, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4013      	ands	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a20      	ldr	r2, [pc, #128]	@ (80055c4 <HAL_GPIO_Init+0x240>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d052      	beq.n	80055ec <HAL_GPIO_Init+0x268>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a1f      	ldr	r2, [pc, #124]	@ (80055c8 <HAL_GPIO_Init+0x244>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d031      	beq.n	80055b2 <HAL_GPIO_Init+0x22e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a1e      	ldr	r2, [pc, #120]	@ (80055cc <HAL_GPIO_Init+0x248>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d02b      	beq.n	80055ae <HAL_GPIO_Init+0x22a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a1d      	ldr	r2, [pc, #116]	@ (80055d0 <HAL_GPIO_Init+0x24c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d025      	beq.n	80055aa <HAL_GPIO_Init+0x226>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a1c      	ldr	r2, [pc, #112]	@ (80055d4 <HAL_GPIO_Init+0x250>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d01f      	beq.n	80055a6 <HAL_GPIO_Init+0x222>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a1b      	ldr	r2, [pc, #108]	@ (80055d8 <HAL_GPIO_Init+0x254>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d019      	beq.n	80055a2 <HAL_GPIO_Init+0x21e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a1a      	ldr	r2, [pc, #104]	@ (80055dc <HAL_GPIO_Init+0x258>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d013      	beq.n	800559e <HAL_GPIO_Init+0x21a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a19      	ldr	r2, [pc, #100]	@ (80055e0 <HAL_GPIO_Init+0x25c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00d      	beq.n	800559a <HAL_GPIO_Init+0x216>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a18      	ldr	r2, [pc, #96]	@ (80055e4 <HAL_GPIO_Init+0x260>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d007      	beq.n	8005596 <HAL_GPIO_Init+0x212>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a17      	ldr	r2, [pc, #92]	@ (80055e8 <HAL_GPIO_Init+0x264>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d101      	bne.n	8005592 <HAL_GPIO_Init+0x20e>
 800558e:	2309      	movs	r3, #9
 8005590:	e02d      	b.n	80055ee <HAL_GPIO_Init+0x26a>
 8005592:	230a      	movs	r3, #10
 8005594:	e02b      	b.n	80055ee <HAL_GPIO_Init+0x26a>
 8005596:	2308      	movs	r3, #8
 8005598:	e029      	b.n	80055ee <HAL_GPIO_Init+0x26a>
 800559a:	2307      	movs	r3, #7
 800559c:	e027      	b.n	80055ee <HAL_GPIO_Init+0x26a>
 800559e:	2306      	movs	r3, #6
 80055a0:	e025      	b.n	80055ee <HAL_GPIO_Init+0x26a>
 80055a2:	2305      	movs	r3, #5
 80055a4:	e023      	b.n	80055ee <HAL_GPIO_Init+0x26a>
 80055a6:	2304      	movs	r3, #4
 80055a8:	e021      	b.n	80055ee <HAL_GPIO_Init+0x26a>
 80055aa:	2303      	movs	r3, #3
 80055ac:	e01f      	b.n	80055ee <HAL_GPIO_Init+0x26a>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e01d      	b.n	80055ee <HAL_GPIO_Init+0x26a>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e01b      	b.n	80055ee <HAL_GPIO_Init+0x26a>
 80055b6:	bf00      	nop
 80055b8:	58000080 	.word	0x58000080
 80055bc:	58024400 	.word	0x58024400
 80055c0:	58000400 	.word	0x58000400
 80055c4:	58020000 	.word	0x58020000
 80055c8:	58020400 	.word	0x58020400
 80055cc:	58020800 	.word	0x58020800
 80055d0:	58020c00 	.word	0x58020c00
 80055d4:	58021000 	.word	0x58021000
 80055d8:	58021400 	.word	0x58021400
 80055dc:	58021800 	.word	0x58021800
 80055e0:	58021c00 	.word	0x58021c00
 80055e4:	58022000 	.word	0x58022000
 80055e8:	58022400 	.word	0x58022400
 80055ec:	2300      	movs	r3, #0
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	f002 0203 	and.w	r2, r2, #3
 80055f4:	0092      	lsls	r2, r2, #2
 80055f6:	4093      	lsls	r3, r2
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055fe:	4938      	ldr	r1, [pc, #224]	@ (80056e0 <HAL_GPIO_Init+0x35c>)
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	089b      	lsrs	r3, r3, #2
 8005604:	3302      	adds	r3, #2
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800560c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	43db      	mvns	r3, r3
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4013      	ands	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005632:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800563a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	43db      	mvns	r3, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4013      	ands	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005660:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	43db      	mvns	r3, r3
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	4013      	ands	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	43db      	mvns	r3, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4013      	ands	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	3301      	adds	r3, #1
 80056c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f47f ae63 	bne.w	8005398 <HAL_GPIO_Init+0x14>
  }
}
 80056d2:	bf00      	nop
 80056d4:	bf00      	nop
 80056d6:	3724      	adds	r7, #36	@ 0x24
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	58000400 	.word	0x58000400

080056e4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80056ec:	4b29      	ldr	r3, [pc, #164]	@ (8005794 <HAL_PWREx_ConfigSupply+0xb0>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	2b06      	cmp	r3, #6
 80056f6:	d00a      	beq.n	800570e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056f8:	4b26      	ldr	r3, [pc, #152]	@ (8005794 <HAL_PWREx_ConfigSupply+0xb0>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	429a      	cmp	r2, r3
 8005704:	d001      	beq.n	800570a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e040      	b.n	800578c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	e03e      	b.n	800578c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800570e:	4b21      	ldr	r3, [pc, #132]	@ (8005794 <HAL_PWREx_ConfigSupply+0xb0>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005716:	491f      	ldr	r1, [pc, #124]	@ (8005794 <HAL_PWREx_ConfigSupply+0xb0>)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4313      	orrs	r3, r2
 800571c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800571e:	f7fc f887 	bl	8001830 <HAL_GetTick>
 8005722:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005724:	e009      	b.n	800573a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005726:	f7fc f883 	bl	8001830 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005734:	d901      	bls.n	800573a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e028      	b.n	800578c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800573a:	4b16      	ldr	r3, [pc, #88]	@ (8005794 <HAL_PWREx_ConfigSupply+0xb0>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005746:	d1ee      	bne.n	8005726 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b1e      	cmp	r3, #30
 800574c:	d008      	beq.n	8005760 <HAL_PWREx_ConfigSupply+0x7c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b2e      	cmp	r3, #46	@ 0x2e
 8005752:	d005      	beq.n	8005760 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b1d      	cmp	r3, #29
 8005758:	d002      	beq.n	8005760 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b2d      	cmp	r3, #45	@ 0x2d
 800575e:	d114      	bne.n	800578a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005760:	f7fc f866 	bl	8001830 <HAL_GetTick>
 8005764:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005766:	e009      	b.n	800577c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005768:	f7fc f862 	bl	8001830 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005776:	d901      	bls.n	800577c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e007      	b.n	800578c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800577c:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <HAL_PWREx_ConfigSupply+0xb0>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005788:	d1ee      	bne.n	8005768 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	58024800 	.word	0x58024800

08005798 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08c      	sub	sp, #48	@ 0x30
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f000 bc1f 	b.w	8005fea <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80b3 	beq.w	8005920 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057ba:	4b95      	ldr	r3, [pc, #596]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057c4:	4b92      	ldr	r3, [pc, #584]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80057c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80057ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	d007      	beq.n	80057e0 <HAL_RCC_OscConfig+0x48>
 80057d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d2:	2b18      	cmp	r3, #24
 80057d4:	d112      	bne.n	80057fc <HAL_RCC_OscConfig+0x64>
 80057d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d8:	f003 0303 	and.w	r3, r3, #3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d10d      	bne.n	80057fc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e0:	4b8b      	ldr	r3, [pc, #556]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 8098 	beq.w	800591e <HAL_RCC_OscConfig+0x186>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f040 8093 	bne.w	800591e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e3f6      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005804:	d106      	bne.n	8005814 <HAL_RCC_OscConfig+0x7c>
 8005806:	4b82      	ldr	r3, [pc, #520]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a81      	ldr	r2, [pc, #516]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800580c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	e058      	b.n	80058c6 <HAL_RCC_OscConfig+0x12e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d112      	bne.n	8005842 <HAL_RCC_OscConfig+0xaa>
 800581c:	4b7c      	ldr	r3, [pc, #496]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a7b      	ldr	r2, [pc, #492]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 8005822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	4b79      	ldr	r3, [pc, #484]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a78      	ldr	r2, [pc, #480]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800582e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	4b76      	ldr	r3, [pc, #472]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a75      	ldr	r2, [pc, #468]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800583a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	e041      	b.n	80058c6 <HAL_RCC_OscConfig+0x12e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800584a:	d112      	bne.n	8005872 <HAL_RCC_OscConfig+0xda>
 800584c:	4b70      	ldr	r3, [pc, #448]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a6f      	ldr	r2, [pc, #444]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 8005852:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	4b6d      	ldr	r3, [pc, #436]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a6c      	ldr	r2, [pc, #432]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800585e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	4b6a      	ldr	r3, [pc, #424]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a69      	ldr	r2, [pc, #420]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800586a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	e029      	b.n	80058c6 <HAL_RCC_OscConfig+0x12e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800587a:	d112      	bne.n	80058a2 <HAL_RCC_OscConfig+0x10a>
 800587c:	4b64      	ldr	r3, [pc, #400]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a63      	ldr	r2, [pc, #396]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 8005882:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	4b61      	ldr	r3, [pc, #388]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a60      	ldr	r2, [pc, #384]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800588e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	4b5e      	ldr	r3, [pc, #376]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a5d      	ldr	r2, [pc, #372]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800589a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	e011      	b.n	80058c6 <HAL_RCC_OscConfig+0x12e>
 80058a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a5a      	ldr	r2, [pc, #360]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80058a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	4b58      	ldr	r3, [pc, #352]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a57      	ldr	r2, [pc, #348]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80058b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	4b55      	ldr	r3, [pc, #340]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a54      	ldr	r2, [pc, #336]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80058c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80058c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d013      	beq.n	80058f6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ce:	f7fb ffaf 	bl	8001830 <HAL_GetTick>
 80058d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058d6:	f7fb ffab 	bl	8001830 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b64      	cmp	r3, #100	@ 0x64
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e380      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058e8:	4b49      	ldr	r3, [pc, #292]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x13e>
 80058f4:	e014      	b.n	8005920 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f6:	f7fb ff9b 	bl	8001830 <HAL_GetTick>
 80058fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058fe:	f7fb ff97 	bl	8001830 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b64      	cmp	r3, #100	@ 0x64
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e36c      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005910:	4b3f      	ldr	r3, [pc, #252]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1f0      	bne.n	80058fe <HAL_RCC_OscConfig+0x166>
 800591c:	e000      	b.n	8005920 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800591e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 808c 	beq.w	8005a46 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800592e:	4b38      	ldr	r3, [pc, #224]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005936:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005938:	4b35      	ldr	r3, [pc, #212]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800593a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d007      	beq.n	8005954 <HAL_RCC_OscConfig+0x1bc>
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	2b18      	cmp	r3, #24
 8005948:	d137      	bne.n	80059ba <HAL_RCC_OscConfig+0x222>
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d132      	bne.n	80059ba <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005954:	4b2e      	ldr	r3, [pc, #184]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_RCC_OscConfig+0x1d4>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e33e      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800596c:	4b28      	ldr	r3, [pc, #160]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f023 0219 	bic.w	r2, r3, #25
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4925      	ldr	r1, [pc, #148]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800597a:	4313      	orrs	r3, r2
 800597c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597e:	f7fb ff57 	bl	8001830 <HAL_GetTick>
 8005982:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005986:	f7fb ff53 	bl	8001830 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e328      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005998:	4b1d      	ldr	r3, [pc, #116]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0f0      	beq.n	8005986 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	061b      	lsls	r3, r3, #24
 80059b2:	4917      	ldr	r1, [pc, #92]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059b8:	e045      	b.n	8005a46 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d028      	beq.n	8005a14 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059c2:	4b13      	ldr	r3, [pc, #76]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f023 0219 	bic.w	r2, r3, #25
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	4910      	ldr	r1, [pc, #64]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fb ff2c 	bl	8001830 <HAL_GetTick>
 80059d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059dc:	f7fb ff28 	bl	8001830 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e2fd      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059ee:	4b08      	ldr	r3, [pc, #32]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f0      	beq.n	80059dc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fa:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	061b      	lsls	r3, r3, #24
 8005a08:	4901      	ldr	r1, [pc, #4]	@ (8005a10 <HAL_RCC_OscConfig+0x278>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	604b      	str	r3, [r1, #4]
 8005a0e:	e01a      	b.n	8005a46 <HAL_RCC_OscConfig+0x2ae>
 8005a10:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a14:	4b97      	ldr	r3, [pc, #604]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a96      	ldr	r2, [pc, #600]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005a1a:	f023 0301 	bic.w	r3, r3, #1
 8005a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a20:	f7fb ff06 	bl	8001830 <HAL_GetTick>
 8005a24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a28:	f7fb ff02 	bl	8001830 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e2d7      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a3a:	4b8e      	ldr	r3, [pc, #568]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1f0      	bne.n	8005a28 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0310 	and.w	r3, r3, #16
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d06a      	beq.n	8005b28 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a52:	4b88      	ldr	r3, [pc, #544]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a5c:	4b85      	ldr	r3, [pc, #532]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d007      	beq.n	8005a78 <HAL_RCC_OscConfig+0x2e0>
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	2b18      	cmp	r3, #24
 8005a6c:	d11b      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x30e>
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f003 0303 	and.w	r3, r3, #3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d116      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a78:	4b7e      	ldr	r3, [pc, #504]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <HAL_RCC_OscConfig+0x2f8>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	2b80      	cmp	r3, #128	@ 0x80
 8005a8a:	d001      	beq.n	8005a90 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e2ac      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a90:	4b78      	ldr	r3, [pc, #480]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	061b      	lsls	r3, r3, #24
 8005a9e:	4975      	ldr	r1, [pc, #468]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005aa4:	e040      	b.n	8005b28 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d023      	beq.n	8005af6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005aae:	4b71      	ldr	r3, [pc, #452]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a70      	ldr	r2, [pc, #448]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aba:	f7fb feb9 	bl	8001830 <HAL_GetTick>
 8005abe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ac2:	f7fb feb5 	bl	8001830 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e28a      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ad4:	4b67      	ldr	r3, [pc, #412]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0f0      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ae0:	4b64      	ldr	r3, [pc, #400]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	061b      	lsls	r3, r3, #24
 8005aee:	4961      	ldr	r1, [pc, #388]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60cb      	str	r3, [r1, #12]
 8005af4:	e018      	b.n	8005b28 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005af6:	4b5f      	ldr	r3, [pc, #380]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a5e      	ldr	r2, [pc, #376]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005afc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b02:	f7fb fe95 	bl	8001830 <HAL_GetTick>
 8005b06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b0a:	f7fb fe91 	bl	8001830 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e266      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b1c:	4b55      	ldr	r3, [pc, #340]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1f0      	bne.n	8005b0a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d036      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d019      	beq.n	8005b70 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b40:	4a4c      	ldr	r2, [pc, #304]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005b42:	f043 0301 	orr.w	r3, r3, #1
 8005b46:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b48:	f7fb fe72 	bl	8001830 <HAL_GetTick>
 8005b4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b50:	f7fb fe6e 	bl	8001830 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e243      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b62:	4b44      	ldr	r3, [pc, #272]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0f0      	beq.n	8005b50 <HAL_RCC_OscConfig+0x3b8>
 8005b6e:	e018      	b.n	8005ba2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b70:	4b40      	ldr	r3, [pc, #256]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b74:	4a3f      	ldr	r2, [pc, #252]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7c:	f7fb fe58 	bl	8001830 <HAL_GetTick>
 8005b80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b84:	f7fb fe54 	bl	8001830 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e229      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b96:	4b37      	ldr	r3, [pc, #220]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1f0      	bne.n	8005b84 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d036      	beq.n	8005c1c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d019      	beq.n	8005bea <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a2e      	ldr	r2, [pc, #184]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005bbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005bc0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005bc2:	f7fb fe35 	bl	8001830 <HAL_GetTick>
 8005bc6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bca:	f7fb fe31 	bl	8001830 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e206      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bdc:	4b25      	ldr	r3, [pc, #148]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0f0      	beq.n	8005bca <HAL_RCC_OscConfig+0x432>
 8005be8:	e018      	b.n	8005c1c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005bea:	4b22      	ldr	r3, [pc, #136]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a21      	ldr	r2, [pc, #132]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bf4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005bf6:	f7fb fe1b 	bl	8001830 <HAL_GetTick>
 8005bfa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005bfc:	e008      	b.n	8005c10 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bfe:	f7fb fe17 	bl	8001830 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e1ec      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c10:	4b18      	ldr	r3, [pc, #96]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1f0      	bne.n	8005bfe <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 80af 	beq.w	8005d88 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c2a:	4b13      	ldr	r3, [pc, #76]	@ (8005c78 <HAL_RCC_OscConfig+0x4e0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a12      	ldr	r2, [pc, #72]	@ (8005c78 <HAL_RCC_OscConfig+0x4e0>)
 8005c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c36:	f7fb fdfb 	bl	8001830 <HAL_GetTick>
 8005c3a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c3e:	f7fb fdf7 	bl	8001830 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b64      	cmp	r3, #100	@ 0x64
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e1cc      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c50:	4b09      	ldr	r3, [pc, #36]	@ (8005c78 <HAL_RCC_OscConfig+0x4e0>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0f0      	beq.n	8005c3e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d10b      	bne.n	8005c7c <HAL_RCC_OscConfig+0x4e4>
 8005c64:	4b03      	ldr	r3, [pc, #12]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c68:	4a02      	ldr	r2, [pc, #8]	@ (8005c74 <HAL_RCC_OscConfig+0x4dc>)
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c70:	e05b      	b.n	8005d2a <HAL_RCC_OscConfig+0x592>
 8005c72:	bf00      	nop
 8005c74:	58024400 	.word	0x58024400
 8005c78:	58024800 	.word	0x58024800
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d112      	bne.n	8005caa <HAL_RCC_OscConfig+0x512>
 8005c84:	4b9d      	ldr	r3, [pc, #628]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c88:	4a9c      	ldr	r2, [pc, #624]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005c8a:	f023 0301 	bic.w	r3, r3, #1
 8005c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c90:	4b9a      	ldr	r3, [pc, #616]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c94:	4a99      	ldr	r2, [pc, #612]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c9c:	4b97      	ldr	r3, [pc, #604]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca0:	4a96      	ldr	r2, [pc, #600]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005ca2:	f023 0304 	bic.w	r3, r3, #4
 8005ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ca8:	e03f      	b.n	8005d2a <HAL_RCC_OscConfig+0x592>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	2b05      	cmp	r3, #5
 8005cb0:	d112      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x540>
 8005cb2:	4b92      	ldr	r3, [pc, #584]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb6:	4a91      	ldr	r2, [pc, #580]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005cb8:	f043 0304 	orr.w	r3, r3, #4
 8005cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cbe:	4b8f      	ldr	r3, [pc, #572]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc2:	4a8e      	ldr	r2, [pc, #568]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005cc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cca:	4b8c      	ldr	r3, [pc, #560]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cce:	4a8b      	ldr	r2, [pc, #556]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cd6:	e028      	b.n	8005d2a <HAL_RCC_OscConfig+0x592>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b85      	cmp	r3, #133	@ 0x85
 8005cde:	d112      	bne.n	8005d06 <HAL_RCC_OscConfig+0x56e>
 8005ce0:	4b86      	ldr	r3, [pc, #536]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce4:	4a85      	ldr	r2, [pc, #532]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005ce6:	f043 0304 	orr.w	r3, r3, #4
 8005cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cec:	4b83      	ldr	r3, [pc, #524]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf0:	4a82      	ldr	r2, [pc, #520]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cf8:	4b80      	ldr	r3, [pc, #512]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfc:	4a7f      	ldr	r2, [pc, #508]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005cfe:	f043 0301 	orr.w	r3, r3, #1
 8005d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d04:	e011      	b.n	8005d2a <HAL_RCC_OscConfig+0x592>
 8005d06:	4b7d      	ldr	r3, [pc, #500]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0a:	4a7c      	ldr	r2, [pc, #496]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005d0c:	f023 0301 	bic.w	r3, r3, #1
 8005d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d12:	4b7a      	ldr	r3, [pc, #488]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d16:	4a79      	ldr	r2, [pc, #484]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005d18:	f023 0304 	bic.w	r3, r3, #4
 8005d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d1e:	4b77      	ldr	r3, [pc, #476]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d22:	4a76      	ldr	r2, [pc, #472]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005d24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d28:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d015      	beq.n	8005d5e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d32:	f7fb fd7d 	bl	8001830 <HAL_GetTick>
 8005d36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d38:	e00a      	b.n	8005d50 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d3a:	f7fb fd79 	bl	8001830 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e14c      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d50:	4b6a      	ldr	r3, [pc, #424]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0ee      	beq.n	8005d3a <HAL_RCC_OscConfig+0x5a2>
 8005d5c:	e014      	b.n	8005d88 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5e:	f7fb fd67 	bl	8001830 <HAL_GetTick>
 8005d62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d64:	e00a      	b.n	8005d7c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d66:	f7fb fd63 	bl	8001830 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e136      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d7c:	4b5f      	ldr	r3, [pc, #380]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1ee      	bne.n	8005d66 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 812b 	beq.w	8005fe8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d92:	4b5a      	ldr	r3, [pc, #360]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d9a:	2b18      	cmp	r3, #24
 8005d9c:	f000 80bb 	beq.w	8005f16 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	f040 8095 	bne.w	8005ed4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005daa:	4b54      	ldr	r3, [pc, #336]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a53      	ldr	r2, [pc, #332]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005db0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db6:	f7fb fd3b 	bl	8001830 <HAL_GetTick>
 8005dba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dbe:	f7fb fd37 	bl	8001830 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e10c      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dd0:	4b4a      	ldr	r3, [pc, #296]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f0      	bne.n	8005dbe <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ddc:	4b47      	ldr	r3, [pc, #284]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005dde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005de0:	4b47      	ldr	r3, [pc, #284]	@ (8005f00 <HAL_RCC_OscConfig+0x768>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dec:	0112      	lsls	r2, r2, #4
 8005dee:	430a      	orrs	r2, r1
 8005df0:	4942      	ldr	r1, [pc, #264]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	628b      	str	r3, [r1, #40]	@ 0x28
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e04:	3b01      	subs	r3, #1
 8005e06:	025b      	lsls	r3, r3, #9
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e10:	3b01      	subs	r3, #1
 8005e12:	041b      	lsls	r3, r3, #16
 8005e14:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	061b      	lsls	r3, r3, #24
 8005e22:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e26:	4935      	ldr	r1, [pc, #212]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e2c:	4b33      	ldr	r3, [pc, #204]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e30:	4a32      	ldr	r2, [pc, #200]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e32:	f023 0301 	bic.w	r3, r3, #1
 8005e36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e38:	4b30      	ldr	r3, [pc, #192]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e3c:	4b31      	ldr	r3, [pc, #196]	@ (8005f04 <HAL_RCC_OscConfig+0x76c>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e44:	00d2      	lsls	r2, r2, #3
 8005e46:	492d      	ldr	r1, [pc, #180]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e50:	f023 020c 	bic.w	r2, r3, #12
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e58:	4928      	ldr	r1, [pc, #160]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e5e:	4b27      	ldr	r3, [pc, #156]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e62:	f023 0202 	bic.w	r2, r3, #2
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e6a:	4924      	ldr	r1, [pc, #144]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e70:	4b22      	ldr	r3, [pc, #136]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e74:	4a21      	ldr	r2, [pc, #132]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e80:	4a1e      	ldr	r2, [pc, #120]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e88:	4b1c      	ldr	r3, [pc, #112]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005e94:	4b19      	ldr	r3, [pc, #100]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e98:	4a18      	ldr	r2, [pc, #96]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ea0:	4b16      	ldr	r3, [pc, #88]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a15      	ldr	r2, [pc, #84]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005ea6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eac:	f7fb fcc0 	bl	8001830 <HAL_GetTick>
 8005eb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb4:	f7fb fcbc 	bl	8001830 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e091      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x71c>
 8005ed2:	e089      	b.n	8005fe8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed4:	4b09      	ldr	r3, [pc, #36]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a08      	ldr	r2, [pc, #32]	@ (8005efc <HAL_RCC_OscConfig+0x764>)
 8005eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fb fca6 	bl	8001830 <HAL_GetTick>
 8005ee4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ee6:	e00f      	b.n	8005f08 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee8:	f7fb fca2 	bl	8001830 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d908      	bls.n	8005f08 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e077      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
 8005efa:	bf00      	nop
 8005efc:	58024400 	.word	0x58024400
 8005f00:	fffffc0c 	.word	0xfffffc0c
 8005f04:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f08:	4b3a      	ldr	r3, [pc, #232]	@ (8005ff4 <HAL_RCC_OscConfig+0x85c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e9      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x750>
 8005f14:	e068      	b.n	8005fe8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f16:	4b37      	ldr	r3, [pc, #220]	@ (8005ff4 <HAL_RCC_OscConfig+0x85c>)
 8005f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f1c:	4b35      	ldr	r3, [pc, #212]	@ (8005ff4 <HAL_RCC_OscConfig+0x85c>)
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f20:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d031      	beq.n	8005f8e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f003 0203 	and.w	r2, r3, #3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d12a      	bne.n	8005f8e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	091b      	lsrs	r3, r3, #4
 8005f3c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d122      	bne.n	8005f8e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f52:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d11a      	bne.n	8005f8e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	0a5b      	lsrs	r3, r3, #9
 8005f5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f64:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d111      	bne.n	8005f8e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	0c1b      	lsrs	r3, r3, #16
 8005f6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d108      	bne.n	8005f8e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	0e1b      	lsrs	r3, r3, #24
 8005f80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f88:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d001      	beq.n	8005f92 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e02b      	b.n	8005fea <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005f92:	4b18      	ldr	r3, [pc, #96]	@ (8005ff4 <HAL_RCC_OscConfig+0x85c>)
 8005f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f96:	08db      	lsrs	r3, r3, #3
 8005f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f9c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d01f      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005fa8:	4b12      	ldr	r3, [pc, #72]	@ (8005ff4 <HAL_RCC_OscConfig+0x85c>)
 8005faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fac:	4a11      	ldr	r2, [pc, #68]	@ (8005ff4 <HAL_RCC_OscConfig+0x85c>)
 8005fae:	f023 0301 	bic.w	r3, r3, #1
 8005fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fb4:	f7fb fc3c 	bl	8001830 <HAL_GetTick>
 8005fb8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005fba:	bf00      	nop
 8005fbc:	f7fb fc38 	bl	8001830 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d0f9      	beq.n	8005fbc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff4 <HAL_RCC_OscConfig+0x85c>)
 8005fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff8 <HAL_RCC_OscConfig+0x860>)
 8005fce:	4013      	ands	r3, r2
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005fd4:	00d2      	lsls	r2, r2, #3
 8005fd6:	4907      	ldr	r1, [pc, #28]	@ (8005ff4 <HAL_RCC_OscConfig+0x85c>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005fdc:	4b05      	ldr	r3, [pc, #20]	@ (8005ff4 <HAL_RCC_OscConfig+0x85c>)
 8005fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe0:	4a04      	ldr	r2, [pc, #16]	@ (8005ff4 <HAL_RCC_OscConfig+0x85c>)
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3730      	adds	r7, #48	@ 0x30
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	58024400 	.word	0x58024400
 8005ff8:	ffff0007 	.word	0xffff0007

08005ffc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e19c      	b.n	800634a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006010:	4b8a      	ldr	r3, [pc, #552]	@ (800623c <HAL_RCC_ClockConfig+0x240>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d910      	bls.n	8006040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601e:	4b87      	ldr	r3, [pc, #540]	@ (800623c <HAL_RCC_ClockConfig+0x240>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f023 020f 	bic.w	r2, r3, #15
 8006026:	4985      	ldr	r1, [pc, #532]	@ (800623c <HAL_RCC_ClockConfig+0x240>)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	4313      	orrs	r3, r2
 800602c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800602e:	4b83      	ldr	r3, [pc, #524]	@ (800623c <HAL_RCC_ClockConfig+0x240>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d001      	beq.n	8006040 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e184      	b.n	800634a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d010      	beq.n	800606e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	4b7b      	ldr	r3, [pc, #492]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006058:	429a      	cmp	r2, r3
 800605a:	d908      	bls.n	800606e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800605c:	4b78      	ldr	r3, [pc, #480]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	4975      	ldr	r1, [pc, #468]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 800606a:	4313      	orrs	r3, r2
 800606c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0308 	and.w	r3, r3, #8
 8006076:	2b00      	cmp	r3, #0
 8006078:	d010      	beq.n	800609c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695a      	ldr	r2, [r3, #20]
 800607e:	4b70      	ldr	r3, [pc, #448]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006086:	429a      	cmp	r2, r3
 8006088:	d908      	bls.n	800609c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800608a:	4b6d      	ldr	r3, [pc, #436]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	496a      	ldr	r1, [pc, #424]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 8006098:	4313      	orrs	r3, r2
 800609a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d010      	beq.n	80060ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	699a      	ldr	r2, [r3, #24]
 80060ac:	4b64      	ldr	r3, [pc, #400]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d908      	bls.n	80060ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060b8:	4b61      	ldr	r3, [pc, #388]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	495e      	ldr	r1, [pc, #376]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d010      	beq.n	80060f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69da      	ldr	r2, [r3, #28]
 80060da:	4b59      	ldr	r3, [pc, #356]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d908      	bls.n	80060f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060e6:	4b56      	ldr	r3, [pc, #344]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	4953      	ldr	r1, [pc, #332]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d010      	beq.n	8006126 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	4b4d      	ldr	r3, [pc, #308]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	429a      	cmp	r2, r3
 8006112:	d908      	bls.n	8006126 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006114:	4b4a      	ldr	r3, [pc, #296]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	f023 020f 	bic.w	r2, r3, #15
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	4947      	ldr	r1, [pc, #284]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 8006122:	4313      	orrs	r3, r2
 8006124:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d055      	beq.n	80061de <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006132:	4b43      	ldr	r3, [pc, #268]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	4940      	ldr	r1, [pc, #256]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 8006140:	4313      	orrs	r3, r2
 8006142:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2b02      	cmp	r3, #2
 800614a:	d107      	bne.n	800615c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800614c:	4b3c      	ldr	r3, [pc, #240]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d121      	bne.n	800619c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e0f6      	b.n	800634a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b03      	cmp	r3, #3
 8006162:	d107      	bne.n	8006174 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006164:	4b36      	ldr	r3, [pc, #216]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d115      	bne.n	800619c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0ea      	b.n	800634a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d107      	bne.n	800618c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800617c:	4b30      	ldr	r3, [pc, #192]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006184:	2b00      	cmp	r3, #0
 8006186:	d109      	bne.n	800619c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e0de      	b.n	800634a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800618c:	4b2c      	ldr	r3, [pc, #176]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e0d6      	b.n	800634a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800619c:	4b28      	ldr	r3, [pc, #160]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	f023 0207 	bic.w	r2, r3, #7
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	4925      	ldr	r1, [pc, #148]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ae:	f7fb fb3f 	bl	8001830 <HAL_GetTick>
 80061b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b4:	e00a      	b.n	80061cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b6:	f7fb fb3b 	bl	8001830 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e0be      	b.n	800634a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061cc:	4b1c      	ldr	r3, [pc, #112]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	429a      	cmp	r2, r3
 80061dc:	d1eb      	bne.n	80061b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d010      	beq.n	800620c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	4b14      	ldr	r3, [pc, #80]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d208      	bcs.n	800620c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061fa:	4b11      	ldr	r3, [pc, #68]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f023 020f 	bic.w	r2, r3, #15
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	490e      	ldr	r1, [pc, #56]	@ (8006240 <HAL_RCC_ClockConfig+0x244>)
 8006208:	4313      	orrs	r3, r2
 800620a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800620c:	4b0b      	ldr	r3, [pc, #44]	@ (800623c <HAL_RCC_ClockConfig+0x240>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d214      	bcs.n	8006244 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621a:	4b08      	ldr	r3, [pc, #32]	@ (800623c <HAL_RCC_ClockConfig+0x240>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f023 020f 	bic.w	r2, r3, #15
 8006222:	4906      	ldr	r1, [pc, #24]	@ (800623c <HAL_RCC_ClockConfig+0x240>)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	4313      	orrs	r3, r2
 8006228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800622a:	4b04      	ldr	r3, [pc, #16]	@ (800623c <HAL_RCC_ClockConfig+0x240>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	429a      	cmp	r2, r3
 8006236:	d005      	beq.n	8006244 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e086      	b.n	800634a <HAL_RCC_ClockConfig+0x34e>
 800623c:	52002000 	.word	0x52002000
 8006240:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d010      	beq.n	8006272 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691a      	ldr	r2, [r3, #16]
 8006254:	4b3f      	ldr	r3, [pc, #252]	@ (8006354 <HAL_RCC_ClockConfig+0x358>)
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800625c:	429a      	cmp	r2, r3
 800625e:	d208      	bcs.n	8006272 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006260:	4b3c      	ldr	r3, [pc, #240]	@ (8006354 <HAL_RCC_ClockConfig+0x358>)
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	4939      	ldr	r1, [pc, #228]	@ (8006354 <HAL_RCC_ClockConfig+0x358>)
 800626e:	4313      	orrs	r3, r2
 8006270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d010      	beq.n	80062a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	4b34      	ldr	r3, [pc, #208]	@ (8006354 <HAL_RCC_ClockConfig+0x358>)
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800628a:	429a      	cmp	r2, r3
 800628c:	d208      	bcs.n	80062a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800628e:	4b31      	ldr	r3, [pc, #196]	@ (8006354 <HAL_RCC_ClockConfig+0x358>)
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	492e      	ldr	r1, [pc, #184]	@ (8006354 <HAL_RCC_ClockConfig+0x358>)
 800629c:	4313      	orrs	r3, r2
 800629e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d010      	beq.n	80062ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	4b28      	ldr	r3, [pc, #160]	@ (8006354 <HAL_RCC_ClockConfig+0x358>)
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d208      	bcs.n	80062ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062bc:	4b25      	ldr	r3, [pc, #148]	@ (8006354 <HAL_RCC_ClockConfig+0x358>)
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	4922      	ldr	r1, [pc, #136]	@ (8006354 <HAL_RCC_ClockConfig+0x358>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d010      	beq.n	80062fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69da      	ldr	r2, [r3, #28]
 80062de:	4b1d      	ldr	r3, [pc, #116]	@ (8006354 <HAL_RCC_ClockConfig+0x358>)
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d208      	bcs.n	80062fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006354 <HAL_RCC_ClockConfig+0x358>)
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	4917      	ldr	r1, [pc, #92]	@ (8006354 <HAL_RCC_ClockConfig+0x358>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80062fc:	f000 f834 	bl	8006368 <HAL_RCC_GetSysClockFreq>
 8006300:	4602      	mov	r2, r0
 8006302:	4b14      	ldr	r3, [pc, #80]	@ (8006354 <HAL_RCC_ClockConfig+0x358>)
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	0a1b      	lsrs	r3, r3, #8
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	4912      	ldr	r1, [pc, #72]	@ (8006358 <HAL_RCC_ClockConfig+0x35c>)
 800630e:	5ccb      	ldrb	r3, [r1, r3]
 8006310:	f003 031f 	and.w	r3, r3, #31
 8006314:	fa22 f303 	lsr.w	r3, r2, r3
 8006318:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800631a:	4b0e      	ldr	r3, [pc, #56]	@ (8006354 <HAL_RCC_ClockConfig+0x358>)
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	f003 030f 	and.w	r3, r3, #15
 8006322:	4a0d      	ldr	r2, [pc, #52]	@ (8006358 <HAL_RCC_ClockConfig+0x35c>)
 8006324:	5cd3      	ldrb	r3, [r2, r3]
 8006326:	f003 031f 	and.w	r3, r3, #31
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	fa22 f303 	lsr.w	r3, r2, r3
 8006330:	4a0a      	ldr	r2, [pc, #40]	@ (800635c <HAL_RCC_ClockConfig+0x360>)
 8006332:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006334:	4a0a      	ldr	r2, [pc, #40]	@ (8006360 <HAL_RCC_ClockConfig+0x364>)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800633a:	4b0a      	ldr	r3, [pc, #40]	@ (8006364 <HAL_RCC_ClockConfig+0x368>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f7fb fa2c 	bl	800179c <HAL_InitTick>
 8006344:	4603      	mov	r3, r0
 8006346:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006348:	7bfb      	ldrb	r3, [r7, #15]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	58024400 	.word	0x58024400
 8006358:	0800dc9c 	.word	0x0800dc9c
 800635c:	24000004 	.word	0x24000004
 8006360:	24000000 	.word	0x24000000
 8006364:	2400000c 	.word	0x2400000c

08006368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006368:	b480      	push	{r7}
 800636a:	b089      	sub	sp, #36	@ 0x24
 800636c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800636e:	4bb3      	ldr	r3, [pc, #716]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006376:	2b18      	cmp	r3, #24
 8006378:	f200 8155 	bhi.w	8006626 <HAL_RCC_GetSysClockFreq+0x2be>
 800637c:	a201      	add	r2, pc, #4	@ (adr r2, 8006384 <HAL_RCC_GetSysClockFreq+0x1c>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	080063e9 	.word	0x080063e9
 8006388:	08006627 	.word	0x08006627
 800638c:	08006627 	.word	0x08006627
 8006390:	08006627 	.word	0x08006627
 8006394:	08006627 	.word	0x08006627
 8006398:	08006627 	.word	0x08006627
 800639c:	08006627 	.word	0x08006627
 80063a0:	08006627 	.word	0x08006627
 80063a4:	0800640f 	.word	0x0800640f
 80063a8:	08006627 	.word	0x08006627
 80063ac:	08006627 	.word	0x08006627
 80063b0:	08006627 	.word	0x08006627
 80063b4:	08006627 	.word	0x08006627
 80063b8:	08006627 	.word	0x08006627
 80063bc:	08006627 	.word	0x08006627
 80063c0:	08006627 	.word	0x08006627
 80063c4:	08006415 	.word	0x08006415
 80063c8:	08006627 	.word	0x08006627
 80063cc:	08006627 	.word	0x08006627
 80063d0:	08006627 	.word	0x08006627
 80063d4:	08006627 	.word	0x08006627
 80063d8:	08006627 	.word	0x08006627
 80063dc:	08006627 	.word	0x08006627
 80063e0:	08006627 	.word	0x08006627
 80063e4:	0800641b 	.word	0x0800641b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063e8:	4b94      	ldr	r3, [pc, #592]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d009      	beq.n	8006408 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063f4:	4b91      	ldr	r3, [pc, #580]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	08db      	lsrs	r3, r3, #3
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	4a90      	ldr	r2, [pc, #576]	@ (8006640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006400:	fa22 f303 	lsr.w	r3, r2, r3
 8006404:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006406:	e111      	b.n	800662c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006408:	4b8d      	ldr	r3, [pc, #564]	@ (8006640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800640a:	61bb      	str	r3, [r7, #24]
      break;
 800640c:	e10e      	b.n	800662c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800640e:	4b8d      	ldr	r3, [pc, #564]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006410:	61bb      	str	r3, [r7, #24]
      break;
 8006412:	e10b      	b.n	800662c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006414:	4b8c      	ldr	r3, [pc, #560]	@ (8006648 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006416:	61bb      	str	r3, [r7, #24]
      break;
 8006418:	e108      	b.n	800662c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800641a:	4b88      	ldr	r3, [pc, #544]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800641c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006424:	4b85      	ldr	r3, [pc, #532]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006428:	091b      	lsrs	r3, r3, #4
 800642a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800642e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006430:	4b82      	ldr	r3, [pc, #520]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800643a:	4b80      	ldr	r3, [pc, #512]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800643c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800643e:	08db      	lsrs	r3, r3, #3
 8006440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	fb02 f303 	mul.w	r3, r2, r3
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006452:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 80e1 	beq.w	8006620 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b02      	cmp	r3, #2
 8006462:	f000 8083 	beq.w	800656c <HAL_RCC_GetSysClockFreq+0x204>
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b02      	cmp	r3, #2
 800646a:	f200 80a1 	bhi.w	80065b0 <HAL_RCC_GetSysClockFreq+0x248>
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_RCC_GetSysClockFreq+0x114>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d056      	beq.n	8006528 <HAL_RCC_GetSysClockFreq+0x1c0>
 800647a:	e099      	b.n	80065b0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800647c:	4b6f      	ldr	r3, [pc, #444]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d02d      	beq.n	80064e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006488:	4b6c      	ldr	r3, [pc, #432]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	08db      	lsrs	r3, r3, #3
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	4a6b      	ldr	r2, [pc, #428]	@ (8006640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
 8006498:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	ee07 3a90 	vmov	s15, r3
 80064a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b2:	4b62      	ldr	r3, [pc, #392]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800664c <HAL_RCC_GetSysClockFreq+0x2e4>
 80064ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80064e2:	e087      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	ee07 3a90 	vmov	s15, r3
 80064ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006650 <HAL_RCC_GetSysClockFreq+0x2e8>
 80064f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f6:	4b51      	ldr	r3, [pc, #324]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006506:	ed97 6a02 	vldr	s12, [r7, #8]
 800650a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800664c <HAL_RCC_GetSysClockFreq+0x2e4>
 800650e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800651a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800651e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006522:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006526:	e065      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006532:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006654 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800653a:	4b40      	ldr	r3, [pc, #256]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800653c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800654a:	ed97 6a02 	vldr	s12, [r7, #8]
 800654e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800664c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800655a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800655e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006566:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800656a:	e043      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	ee07 3a90 	vmov	s15, r3
 8006572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006576:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006658 <HAL_RCC_GetSysClockFreq+0x2f0>
 800657a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657e:	4b2f      	ldr	r3, [pc, #188]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006592:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800664c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800659a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065ae:	e021      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	ee07 3a90 	vmov	s15, r3
 80065b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006654 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065c2:	4b1e      	ldr	r3, [pc, #120]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80065d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800664c <HAL_RCC_GetSysClockFreq+0x2e4>
 80065da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80065f4:	4b11      	ldr	r3, [pc, #68]	@ (800663c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f8:	0a5b      	lsrs	r3, r3, #9
 80065fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065fe:	3301      	adds	r3, #1
 8006600:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	ee07 3a90 	vmov	s15, r3
 8006608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800660c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006618:	ee17 3a90 	vmov	r3, s15
 800661c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800661e:	e005      	b.n	800662c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	61bb      	str	r3, [r7, #24]
      break;
 8006624:	e002      	b.n	800662c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006626:	4b07      	ldr	r3, [pc, #28]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006628:	61bb      	str	r3, [r7, #24]
      break;
 800662a:	bf00      	nop
  }

  return sysclockfreq;
 800662c:	69bb      	ldr	r3, [r7, #24]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3724      	adds	r7, #36	@ 0x24
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	58024400 	.word	0x58024400
 8006640:	03d09000 	.word	0x03d09000
 8006644:	003d0900 	.word	0x003d0900
 8006648:	007a1200 	.word	0x007a1200
 800664c:	46000000 	.word	0x46000000
 8006650:	4c742400 	.word	0x4c742400
 8006654:	4a742400 	.word	0x4a742400
 8006658:	4af42400 	.word	0x4af42400

0800665c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006662:	f7ff fe81 	bl	8006368 <HAL_RCC_GetSysClockFreq>
 8006666:	4602      	mov	r2, r0
 8006668:	4b10      	ldr	r3, [pc, #64]	@ (80066ac <HAL_RCC_GetHCLKFreq+0x50>)
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	0a1b      	lsrs	r3, r3, #8
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	490f      	ldr	r1, [pc, #60]	@ (80066b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006674:	5ccb      	ldrb	r3, [r1, r3]
 8006676:	f003 031f 	and.w	r3, r3, #31
 800667a:	fa22 f303 	lsr.w	r3, r2, r3
 800667e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006680:	4b0a      	ldr	r3, [pc, #40]	@ (80066ac <HAL_RCC_GetHCLKFreq+0x50>)
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	4a09      	ldr	r2, [pc, #36]	@ (80066b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800668a:	5cd3      	ldrb	r3, [r2, r3]
 800668c:	f003 031f 	and.w	r3, r3, #31
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	fa22 f303 	lsr.w	r3, r2, r3
 8006696:	4a07      	ldr	r2, [pc, #28]	@ (80066b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006698:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800669a:	4a07      	ldr	r2, [pc, #28]	@ (80066b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80066a0:	4b04      	ldr	r3, [pc, #16]	@ (80066b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80066a2:	681b      	ldr	r3, [r3, #0]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	58024400 	.word	0x58024400
 80066b0:	0800dc9c 	.word	0x0800dc9c
 80066b4:	24000004 	.word	0x24000004
 80066b8:	24000000 	.word	0x24000000

080066bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80066c0:	f7ff ffcc 	bl	800665c <HAL_RCC_GetHCLKFreq>
 80066c4:	4602      	mov	r2, r0
 80066c6:	4b06      	ldr	r3, [pc, #24]	@ (80066e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	091b      	lsrs	r3, r3, #4
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	4904      	ldr	r1, [pc, #16]	@ (80066e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066d2:	5ccb      	ldrb	r3, [r1, r3]
 80066d4:	f003 031f 	and.w	r3, r3, #31
 80066d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80066dc:	4618      	mov	r0, r3
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	58024400 	.word	0x58024400
 80066e4:	0800dc9c 	.word	0x0800dc9c

080066e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80066ec:	f7ff ffb6 	bl	800665c <HAL_RCC_GetHCLKFreq>
 80066f0:	4602      	mov	r2, r0
 80066f2:	4b06      	ldr	r3, [pc, #24]	@ (800670c <HAL_RCC_GetPCLK2Freq+0x24>)
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	0a1b      	lsrs	r3, r3, #8
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	4904      	ldr	r1, [pc, #16]	@ (8006710 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066fe:	5ccb      	ldrb	r3, [r1, r3]
 8006700:	f003 031f 	and.w	r3, r3, #31
 8006704:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006708:	4618      	mov	r0, r3
 800670a:	bd80      	pop	{r7, pc}
 800670c:	58024400 	.word	0x58024400
 8006710:	0800dc9c 	.word	0x0800dc9c

08006714 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006718:	b0c8      	sub	sp, #288	@ 0x120
 800671a:	af00      	add	r7, sp, #0
 800671c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006720:	2300      	movs	r3, #0
 8006722:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006726:	2300      	movs	r3, #0
 8006728:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800672c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006738:	2500      	movs	r5, #0
 800673a:	ea54 0305 	orrs.w	r3, r4, r5
 800673e:	d049      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006746:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800674a:	d02f      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800674c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006750:	d828      	bhi.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006752:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006756:	d01a      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006758:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800675c:	d822      	bhi.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006766:	d007      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006768:	e01c      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800676a:	4ba7      	ldr	r3, [pc, #668]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800676c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676e:	4aa6      	ldr	r2, [pc, #664]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006774:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006776:	e01a      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800677c:	3308      	adds	r3, #8
 800677e:	2102      	movs	r1, #2
 8006780:	4618      	mov	r0, r3
 8006782:	f002 fa6d 	bl	8008c60 <RCCEx_PLL2_Config>
 8006786:	4603      	mov	r3, r0
 8006788:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800678c:	e00f      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800678e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006792:	3328      	adds	r3, #40	@ 0x28
 8006794:	2102      	movs	r1, #2
 8006796:	4618      	mov	r0, r3
 8006798:	f002 fb14 	bl	8008dc4 <RCCEx_PLL3_Config>
 800679c:	4603      	mov	r3, r0
 800679e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067a2:	e004      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80067aa:	e000      	b.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80067ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10a      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80067b6:	4b94      	ldr	r3, [pc, #592]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80067be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067c4:	4a90      	ldr	r2, [pc, #576]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067c6:	430b      	orrs	r3, r1
 80067c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80067ca:	e003      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80067e0:	f04f 0900 	mov.w	r9, #0
 80067e4:	ea58 0309 	orrs.w	r3, r8, r9
 80067e8:	d047      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80067ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d82a      	bhi.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80067f4:	a201      	add	r2, pc, #4	@ (adr r2, 80067fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80067f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fa:	bf00      	nop
 80067fc:	08006811 	.word	0x08006811
 8006800:	0800681f 	.word	0x0800681f
 8006804:	08006835 	.word	0x08006835
 8006808:	08006853 	.word	0x08006853
 800680c:	08006853 	.word	0x08006853
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006810:	4b7d      	ldr	r3, [pc, #500]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006814:	4a7c      	ldr	r2, [pc, #496]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800681a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800681c:	e01a      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800681e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006822:	3308      	adds	r3, #8
 8006824:	2100      	movs	r1, #0
 8006826:	4618      	mov	r0, r3
 8006828:	f002 fa1a 	bl	8008c60 <RCCEx_PLL2_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006832:	e00f      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006838:	3328      	adds	r3, #40	@ 0x28
 800683a:	2100      	movs	r1, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f002 fac1 	bl	8008dc4 <RCCEx_PLL3_Config>
 8006842:	4603      	mov	r3, r0
 8006844:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006848:	e004      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006850:	e000      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006854:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800685c:	4b6a      	ldr	r3, [pc, #424]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800685e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006860:	f023 0107 	bic.w	r1, r3, #7
 8006864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800686a:	4a67      	ldr	r2, [pc, #412]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800686c:	430b      	orrs	r3, r1
 800686e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006870:	e003      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006872:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006876:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800687a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006886:	f04f 0b00 	mov.w	fp, #0
 800688a:	ea5a 030b 	orrs.w	r3, sl, fp
 800688e:	d054      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006896:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800689a:	d036      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800689c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80068a0:	d82f      	bhi.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80068a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068a6:	d032      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80068a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ac:	d829      	bhi.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80068ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80068b0:	d02f      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80068b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80068b4:	d825      	bhi.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80068b6:	2b80      	cmp	r3, #128	@ 0x80
 80068b8:	d018      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80068ba:	2b80      	cmp	r3, #128	@ 0x80
 80068bc:	d821      	bhi.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80068c2:	2b40      	cmp	r3, #64	@ 0x40
 80068c4:	d007      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80068c6:	e01c      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c8:	4b4f      	ldr	r3, [pc, #316]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068cc:	4a4e      	ldr	r2, [pc, #312]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80068d4:	e01e      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068da:	3308      	adds	r3, #8
 80068dc:	2100      	movs	r1, #0
 80068de:	4618      	mov	r0, r3
 80068e0:	f002 f9be 	bl	8008c60 <RCCEx_PLL2_Config>
 80068e4:	4603      	mov	r3, r0
 80068e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80068ea:	e013      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068f0:	3328      	adds	r3, #40	@ 0x28
 80068f2:	2100      	movs	r1, #0
 80068f4:	4618      	mov	r0, r3
 80068f6:	f002 fa65 	bl	8008dc4 <RCCEx_PLL3_Config>
 80068fa:	4603      	mov	r3, r0
 80068fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006900:	e008      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006908:	e004      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800690a:	bf00      	nop
 800690c:	e002      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800690e:	bf00      	nop
 8006910:	e000      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006914:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800691c:	4b3a      	ldr	r3, [pc, #232]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800691e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006920:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800692a:	4a37      	ldr	r2, [pc, #220]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800692c:	430b      	orrs	r3, r1
 800692e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006930:	e003      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006932:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006936:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800693a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006946:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800694a:	2300      	movs	r3, #0
 800694c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006950:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006954:	460b      	mov	r3, r1
 8006956:	4313      	orrs	r3, r2
 8006958:	d05c      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800695a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800695e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006960:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006964:	d03b      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006966:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800696a:	d834      	bhi.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800696c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006970:	d037      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006972:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006976:	d82e      	bhi.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006978:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800697c:	d033      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800697e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006982:	d828      	bhi.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006988:	d01a      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800698a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800698e:	d822      	bhi.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006998:	d007      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x296>
 800699a:	e01c      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800699c:	4b1a      	ldr	r3, [pc, #104]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800699e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a0:	4a19      	ldr	r2, [pc, #100]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80069a8:	e01e      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ae:	3308      	adds	r3, #8
 80069b0:	2100      	movs	r1, #0
 80069b2:	4618      	mov	r0, r3
 80069b4:	f002 f954 	bl	8008c60 <RCCEx_PLL2_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80069be:	e013      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069c4:	3328      	adds	r3, #40	@ 0x28
 80069c6:	2100      	movs	r1, #0
 80069c8:	4618      	mov	r0, r3
 80069ca:	f002 f9fb 	bl	8008dc4 <RCCEx_PLL3_Config>
 80069ce:	4603      	mov	r3, r0
 80069d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80069d4:	e008      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80069dc:	e004      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80069de:	bf00      	nop
 80069e0:	e002      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80069e2:	bf00      	nop
 80069e4:	e000      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80069e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10d      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80069f0:	4b05      	ldr	r3, [pc, #20]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80069f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069fe:	4a02      	ldr	r2, [pc, #8]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a04:	e006      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006a06:	bf00      	nop
 8006a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a10:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006a20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006a24:	2300      	movs	r3, #0
 8006a26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4313      	orrs	r3, r2
 8006a32:	d03a      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a3a:	2b30      	cmp	r3, #48	@ 0x30
 8006a3c:	d01f      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006a3e:	2b30      	cmp	r3, #48	@ 0x30
 8006a40:	d819      	bhi.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	d00c      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d815      	bhi.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d019      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006a4e:	2b10      	cmp	r3, #16
 8006a50:	d111      	bne.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a52:	4bae      	ldr	r3, [pc, #696]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a56:	4aad      	ldr	r2, [pc, #692]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006a5e:	e011      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a64:	3308      	adds	r3, #8
 8006a66:	2102      	movs	r1, #2
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f002 f8f9 	bl	8008c60 <RCCEx_PLL2_Config>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006a74:	e006      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006a7c:	e002      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006a7e:	bf00      	nop
 8006a80:	e000      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006a8c:	4b9f      	ldr	r3, [pc, #636]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a90:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a9a:	4a9c      	ldr	r2, [pc, #624]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006aa0:	e003      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006aa6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006ab6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006aba:	2300      	movs	r3, #0
 8006abc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006ac0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	d051      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ad0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ad4:	d035      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006ad6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ada:	d82e      	bhi.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006adc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ae0:	d031      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006ae2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ae6:	d828      	bhi.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aec:	d01a      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006af2:	d822      	bhi.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006afc:	d007      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006afe:	e01c      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b00:	4b82      	ldr	r3, [pc, #520]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b04:	4a81      	ldr	r2, [pc, #516]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b0c:	e01c      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b12:	3308      	adds	r3, #8
 8006b14:	2100      	movs	r1, #0
 8006b16:	4618      	mov	r0, r3
 8006b18:	f002 f8a2 	bl	8008c60 <RCCEx_PLL2_Config>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b22:	e011      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b28:	3328      	adds	r3, #40	@ 0x28
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f002 f949 	bl	8008dc4 <RCCEx_PLL3_Config>
 8006b32:	4603      	mov	r3, r0
 8006b34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b38:	e006      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006b40:	e002      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006b42:	bf00      	nop
 8006b44:	e000      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006b50:	4b6e      	ldr	r3, [pc, #440]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b54:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b5e:	4a6b      	ldr	r2, [pc, #428]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b60:	430b      	orrs	r3, r1
 8006b62:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b64:	e003      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006b84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	d053      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b98:	d033      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006b9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b9e:	d82c      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006ba0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ba4:	d02f      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006ba6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006baa:	d826      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006bac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bb0:	d02b      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006bb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bb6:	d820      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006bb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bbc:	d012      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006bbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bc2:	d81a      	bhi.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d022      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bcc:	d115      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f002 f842 	bl	8008c60 <RCCEx_PLL2_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006be2:	e015      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006be8:	3328      	adds	r3, #40	@ 0x28
 8006bea:	2101      	movs	r1, #1
 8006bec:	4618      	mov	r0, r3
 8006bee:	f002 f8e9 	bl	8008dc4 <RCCEx_PLL3_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006bf8:	e00a      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c00:	e006      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006c02:	bf00      	nop
 8006c04:	e004      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006c06:	bf00      	nop
 8006c08:	e002      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006c0a:	bf00      	nop
 8006c0c:	e000      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10a      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c18:	4b3c      	ldr	r3, [pc, #240]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c1c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c26:	4a39      	ldr	r2, [pc, #228]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c2c:	e003      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006c42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c46:	2300      	movs	r3, #0
 8006c48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c4c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4313      	orrs	r3, r2
 8006c54:	d060      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006c5e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006c62:	d039      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006c64:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006c68:	d832      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c6e:	d035      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c74:	d82c      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c7a:	d031      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c80:	d826      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006c82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c86:	d02d      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006c88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c8c:	d820      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006c8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c92:	d012      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c98:	d81a      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d024      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006c9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ca2:	d115      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ca8:	3308      	adds	r3, #8
 8006caa:	2101      	movs	r1, #1
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 ffd7 	bl	8008c60 <RCCEx_PLL2_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006cb8:	e017      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cbe:	3328      	adds	r3, #40	@ 0x28
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f002 f87e 	bl	8008dc4 <RCCEx_PLL3_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006cce:	e00c      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006cd6:	e008      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006cd8:	bf00      	nop
 8006cda:	e006      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006cdc:	bf00      	nop
 8006cde:	e004      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ce0:	bf00      	nop
 8006ce2:	e002      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ce4:	bf00      	nop
 8006ce6:	e000      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10e      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006cf2:	4b06      	ldr	r3, [pc, #24]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d02:	4a02      	ldr	r2, [pc, #8]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d04:	430b      	orrs	r3, r1
 8006d06:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d08:	e006      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006d0a:	bf00      	nop
 8006d0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006d24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d32:	460b      	mov	r3, r1
 8006d34:	4313      	orrs	r3, r2
 8006d36:	d037      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d42:	d00e      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006d44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d48:	d816      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d018      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006d4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d52:	d111      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d54:	4bc4      	ldr	r3, [pc, #784]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d58:	4ac3      	ldr	r2, [pc, #780]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006d60:	e00f      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d66:	3308      	adds	r3, #8
 8006d68:	2101      	movs	r1, #1
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f001 ff78 	bl	8008c60 <RCCEx_PLL2_Config>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006d76:	e004      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006d7e:	e000      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10a      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d8a:	4bb7      	ldr	r3, [pc, #732]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d98:	4ab3      	ldr	r2, [pc, #716]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d9a:	430b      	orrs	r3, r1
 8006d9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d9e:	e003      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006da4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006db4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006db8:	2300      	movs	r3, #0
 8006dba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006dbe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	d039      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d81c      	bhi.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006e15 	.word	0x08006e15
 8006ddc:	08006de9 	.word	0x08006de9
 8006de0:	08006df7 	.word	0x08006df7
 8006de4:	08006e15 	.word	0x08006e15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de8:	4b9f      	ldr	r3, [pc, #636]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dec:	4a9e      	ldr	r2, [pc, #632]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006df2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006df4:	e00f      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	2102      	movs	r1, #2
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f001 ff2e 	bl	8008c60 <RCCEx_PLL2_Config>
 8006e04:	4603      	mov	r3, r0
 8006e06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006e0a:	e004      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e12:	e000      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10a      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006e1e:	4b92      	ldr	r3, [pc, #584]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e22:	f023 0103 	bic.w	r1, r3, #3
 8006e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e2c:	4a8e      	ldr	r2, [pc, #568]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e32:	e003      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006e48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006e56:	460b      	mov	r3, r1
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f000 8099 	beq.w	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e5e:	4b83      	ldr	r3, [pc, #524]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a82      	ldr	r2, [pc, #520]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e6a:	f7fa fce1 	bl	8001830 <HAL_GetTick>
 8006e6e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e72:	e00b      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e74:	f7fa fcdc 	bl	8001830 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b64      	cmp	r3, #100	@ 0x64
 8006e82:	d903      	bls.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e8a:	e005      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e8c:	4b77      	ldr	r3, [pc, #476]	@ (800706c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0ed      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006e98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d173      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ea0:	4b71      	ldr	r3, [pc, #452]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ea2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ea8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006eac:	4053      	eors	r3, r2
 8006eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d015      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006eb6:	4b6c      	ldr	r3, [pc, #432]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ebe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ec2:	4b69      	ldr	r3, [pc, #420]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec6:	4a68      	ldr	r2, [pc, #416]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ecc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ece:	4b66      	ldr	r3, [pc, #408]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ed2:	4a65      	ldr	r2, [pc, #404]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ed4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ed8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006eda:	4a63      	ldr	r2, [pc, #396]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ee6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eee:	d118      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef0:	f7fa fc9e 	bl	8001830 <HAL_GetTick>
 8006ef4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ef8:	e00d      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006efa:	f7fa fc99 	bl	8001830 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006f04:	1ad2      	subs	r2, r2, r3
 8006f06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d903      	bls.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006f14:	e005      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f16:	4b54      	ldr	r3, [pc, #336]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0eb      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006f22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d129      	bne.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f3a:	d10e      	bne.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f4c:	091a      	lsrs	r2, r3, #4
 8006f4e:	4b48      	ldr	r3, [pc, #288]	@ (8007070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	4a45      	ldr	r2, [pc, #276]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f54:	430b      	orrs	r3, r1
 8006f56:	6113      	str	r3, [r2, #16]
 8006f58:	e005      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006f5a:	4b43      	ldr	r3, [pc, #268]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	4a42      	ldr	r2, [pc, #264]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006f64:	6113      	str	r3, [r2, #16]
 8006f66:	4b40      	ldr	r3, [pc, #256]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f68:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f76:	4a3c      	ldr	r2, [pc, #240]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f78:	430b      	orrs	r3, r1
 8006f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f7c:	e008      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006f86:	e003      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f002 0301 	and.w	r3, r2, #1
 8006f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fa6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4313      	orrs	r3, r2
 8006fae:	f000 8090 	beq.w	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fba:	2b28      	cmp	r3, #40	@ 0x28
 8006fbc:	d870      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	080070a9 	.word	0x080070a9
 8006fc8:	080070a1 	.word	0x080070a1
 8006fcc:	080070a1 	.word	0x080070a1
 8006fd0:	080070a1 	.word	0x080070a1
 8006fd4:	080070a1 	.word	0x080070a1
 8006fd8:	080070a1 	.word	0x080070a1
 8006fdc:	080070a1 	.word	0x080070a1
 8006fe0:	080070a1 	.word	0x080070a1
 8006fe4:	08007075 	.word	0x08007075
 8006fe8:	080070a1 	.word	0x080070a1
 8006fec:	080070a1 	.word	0x080070a1
 8006ff0:	080070a1 	.word	0x080070a1
 8006ff4:	080070a1 	.word	0x080070a1
 8006ff8:	080070a1 	.word	0x080070a1
 8006ffc:	080070a1 	.word	0x080070a1
 8007000:	080070a1 	.word	0x080070a1
 8007004:	0800708b 	.word	0x0800708b
 8007008:	080070a1 	.word	0x080070a1
 800700c:	080070a1 	.word	0x080070a1
 8007010:	080070a1 	.word	0x080070a1
 8007014:	080070a1 	.word	0x080070a1
 8007018:	080070a1 	.word	0x080070a1
 800701c:	080070a1 	.word	0x080070a1
 8007020:	080070a1 	.word	0x080070a1
 8007024:	080070a9 	.word	0x080070a9
 8007028:	080070a1 	.word	0x080070a1
 800702c:	080070a1 	.word	0x080070a1
 8007030:	080070a1 	.word	0x080070a1
 8007034:	080070a1 	.word	0x080070a1
 8007038:	080070a1 	.word	0x080070a1
 800703c:	080070a1 	.word	0x080070a1
 8007040:	080070a1 	.word	0x080070a1
 8007044:	080070a9 	.word	0x080070a9
 8007048:	080070a1 	.word	0x080070a1
 800704c:	080070a1 	.word	0x080070a1
 8007050:	080070a1 	.word	0x080070a1
 8007054:	080070a1 	.word	0x080070a1
 8007058:	080070a1 	.word	0x080070a1
 800705c:	080070a1 	.word	0x080070a1
 8007060:	080070a1 	.word	0x080070a1
 8007064:	080070a9 	.word	0x080070a9
 8007068:	58024400 	.word	0x58024400
 800706c:	58024800 	.word	0x58024800
 8007070:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007078:	3308      	adds	r3, #8
 800707a:	2101      	movs	r1, #1
 800707c:	4618      	mov	r0, r3
 800707e:	f001 fdef 	bl	8008c60 <RCCEx_PLL2_Config>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007088:	e00f      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800708a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800708e:	3328      	adds	r3, #40	@ 0x28
 8007090:	2101      	movs	r1, #1
 8007092:	4618      	mov	r0, r3
 8007094:	f001 fe96 	bl	8008dc4 <RCCEx_PLL3_Config>
 8007098:	4603      	mov	r3, r0
 800709a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800709e:	e004      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80070a6:	e000      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80070a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10b      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80070b2:	4bc0      	ldr	r3, [pc, #768]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80070b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070b6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80070ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070c2:	4abc      	ldr	r2, [pc, #752]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80070c4:	430b      	orrs	r3, r1
 80070c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80070c8:	e003      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80070d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	f002 0302 	and.w	r3, r2, #2
 80070de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070e2:	2300      	movs	r3, #0
 80070e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80070e8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80070ec:	460b      	mov	r3, r1
 80070ee:	4313      	orrs	r3, r2
 80070f0:	d043      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80070f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070fa:	2b05      	cmp	r3, #5
 80070fc:	d824      	bhi.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80070fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007104 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	08007151 	.word	0x08007151
 8007108:	0800711d 	.word	0x0800711d
 800710c:	08007133 	.word	0x08007133
 8007110:	08007151 	.word	0x08007151
 8007114:	08007151 	.word	0x08007151
 8007118:	08007151 	.word	0x08007151
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800711c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007120:	3308      	adds	r3, #8
 8007122:	2101      	movs	r1, #1
 8007124:	4618      	mov	r0, r3
 8007126:	f001 fd9b 	bl	8008c60 <RCCEx_PLL2_Config>
 800712a:	4603      	mov	r3, r0
 800712c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007130:	e00f      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007136:	3328      	adds	r3, #40	@ 0x28
 8007138:	2101      	movs	r1, #1
 800713a:	4618      	mov	r0, r3
 800713c:	f001 fe42 	bl	8008dc4 <RCCEx_PLL3_Config>
 8007140:	4603      	mov	r3, r0
 8007142:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007146:	e004      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800714e:	e000      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007152:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10b      	bne.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800715a:	4b96      	ldr	r3, [pc, #600]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800715c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800715e:	f023 0107 	bic.w	r1, r3, #7
 8007162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800716a:	4a92      	ldr	r2, [pc, #584]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800716c:	430b      	orrs	r3, r1
 800716e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007170:	e003      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007172:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007176:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800717a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007182:	f002 0304 	and.w	r3, r2, #4
 8007186:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800718a:	2300      	movs	r3, #0
 800718c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007190:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007194:	460b      	mov	r3, r1
 8007196:	4313      	orrs	r3, r2
 8007198:	d043      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800719a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800719e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071a2:	2b05      	cmp	r3, #5
 80071a4:	d824      	bhi.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80071a6:	a201      	add	r2, pc, #4	@ (adr r2, 80071ac <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80071a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ac:	080071f9 	.word	0x080071f9
 80071b0:	080071c5 	.word	0x080071c5
 80071b4:	080071db 	.word	0x080071db
 80071b8:	080071f9 	.word	0x080071f9
 80071bc:	080071f9 	.word	0x080071f9
 80071c0:	080071f9 	.word	0x080071f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071c8:	3308      	adds	r3, #8
 80071ca:	2101      	movs	r1, #1
 80071cc:	4618      	mov	r0, r3
 80071ce:	f001 fd47 	bl	8008c60 <RCCEx_PLL2_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80071d8:	e00f      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071de:	3328      	adds	r3, #40	@ 0x28
 80071e0:	2101      	movs	r1, #1
 80071e2:	4618      	mov	r0, r3
 80071e4:	f001 fdee 	bl	8008dc4 <RCCEx_PLL3_Config>
 80071e8:	4603      	mov	r3, r0
 80071ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80071ee:	e004      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80071f6:	e000      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80071f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10b      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007202:	4b6c      	ldr	r3, [pc, #432]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007206:	f023 0107 	bic.w	r1, r3, #7
 800720a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800720e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007212:	4a68      	ldr	r2, [pc, #416]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007214:	430b      	orrs	r3, r1
 8007216:	6593      	str	r3, [r2, #88]	@ 0x58
 8007218:	e003      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800721e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f002 0320 	and.w	r3, r2, #32
 800722e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007232:	2300      	movs	r3, #0
 8007234:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007238:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800723c:	460b      	mov	r3, r1
 800723e:	4313      	orrs	r3, r2
 8007240:	d055      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007242:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007246:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800724a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800724e:	d033      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007250:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007254:	d82c      	bhi.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800725a:	d02f      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800725c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007260:	d826      	bhi.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007262:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007266:	d02b      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007268:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800726c:	d820      	bhi.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800726e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007272:	d012      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007278:	d81a      	bhi.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800727a:	2b00      	cmp	r3, #0
 800727c:	d022      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800727e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007282:	d115      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007288:	3308      	adds	r3, #8
 800728a:	2100      	movs	r1, #0
 800728c:	4618      	mov	r0, r3
 800728e:	f001 fce7 	bl	8008c60 <RCCEx_PLL2_Config>
 8007292:	4603      	mov	r3, r0
 8007294:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007298:	e015      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800729a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800729e:	3328      	adds	r3, #40	@ 0x28
 80072a0:	2102      	movs	r1, #2
 80072a2:	4618      	mov	r0, r3
 80072a4:	f001 fd8e 	bl	8008dc4 <RCCEx_PLL3_Config>
 80072a8:	4603      	mov	r3, r0
 80072aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80072ae:	e00a      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80072b6:	e006      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80072b8:	bf00      	nop
 80072ba:	e004      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80072bc:	bf00      	nop
 80072be:	e002      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80072c0:	bf00      	nop
 80072c2:	e000      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80072c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10b      	bne.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072ce:	4b39      	ldr	r3, [pc, #228]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80072d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80072d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072de:	4a35      	ldr	r2, [pc, #212]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80072e0:	430b      	orrs	r3, r1
 80072e2:	6553      	str	r3, [r2, #84]	@ 0x54
 80072e4:	e003      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80072ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80072fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80072fe:	2300      	movs	r3, #0
 8007300:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007304:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007308:	460b      	mov	r3, r1
 800730a:	4313      	orrs	r3, r2
 800730c:	d058      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800730e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007312:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007316:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800731a:	d033      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800731c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007320:	d82c      	bhi.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007326:	d02f      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800732c:	d826      	bhi.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800732e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007332:	d02b      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007334:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007338:	d820      	bhi.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800733a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800733e:	d012      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007344:	d81a      	bhi.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d022      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800734a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800734e:	d115      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007354:	3308      	adds	r3, #8
 8007356:	2100      	movs	r1, #0
 8007358:	4618      	mov	r0, r3
 800735a:	f001 fc81 	bl	8008c60 <RCCEx_PLL2_Config>
 800735e:	4603      	mov	r3, r0
 8007360:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007364:	e015      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800736a:	3328      	adds	r3, #40	@ 0x28
 800736c:	2102      	movs	r1, #2
 800736e:	4618      	mov	r0, r3
 8007370:	f001 fd28 	bl	8008dc4 <RCCEx_PLL3_Config>
 8007374:	4603      	mov	r3, r0
 8007376:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800737a:	e00a      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007382:	e006      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007384:	bf00      	nop
 8007386:	e004      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007388:	bf00      	nop
 800738a:	e002      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800738c:	bf00      	nop
 800738e:	e000      	b.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007392:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10e      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800739a:	4b06      	ldr	r3, [pc, #24]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800739c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800739e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80073a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80073aa:	4a02      	ldr	r2, [pc, #8]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80073ac:	430b      	orrs	r3, r1
 80073ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80073b0:	e006      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80073b2:	bf00      	nop
 80073b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80073c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80073cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073d0:	2300      	movs	r3, #0
 80073d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80073da:	460b      	mov	r3, r1
 80073dc:	4313      	orrs	r3, r2
 80073de:	d055      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80073e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80073e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80073ec:	d033      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80073ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80073f2:	d82c      	bhi.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80073f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073f8:	d02f      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80073fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073fe:	d826      	bhi.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007400:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007404:	d02b      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007406:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800740a:	d820      	bhi.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800740c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007410:	d012      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007412:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007416:	d81a      	bhi.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007418:	2b00      	cmp	r3, #0
 800741a:	d022      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800741c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007420:	d115      	bne.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007426:	3308      	adds	r3, #8
 8007428:	2100      	movs	r1, #0
 800742a:	4618      	mov	r0, r3
 800742c:	f001 fc18 	bl	8008c60 <RCCEx_PLL2_Config>
 8007430:	4603      	mov	r3, r0
 8007432:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007436:	e015      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800743c:	3328      	adds	r3, #40	@ 0x28
 800743e:	2102      	movs	r1, #2
 8007440:	4618      	mov	r0, r3
 8007442:	f001 fcbf 	bl	8008dc4 <RCCEx_PLL3_Config>
 8007446:	4603      	mov	r3, r0
 8007448:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800744c:	e00a      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007454:	e006      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007456:	bf00      	nop
 8007458:	e004      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800745a:	bf00      	nop
 800745c:	e002      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800745e:	bf00      	nop
 8007460:	e000      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007464:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10b      	bne.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800746c:	4ba1      	ldr	r3, [pc, #644]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800746e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007470:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007478:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800747c:	4a9d      	ldr	r2, [pc, #628]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800747e:	430b      	orrs	r3, r1
 8007480:	6593      	str	r3, [r2, #88]	@ 0x58
 8007482:	e003      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007484:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007488:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800748c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	f002 0308 	and.w	r3, r2, #8
 8007498:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800749c:	2300      	movs	r3, #0
 800749e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80074a6:	460b      	mov	r3, r1
 80074a8:	4313      	orrs	r3, r2
 80074aa:	d01e      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80074ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b8:	d10c      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80074ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074be:	3328      	adds	r3, #40	@ 0x28
 80074c0:	2102      	movs	r1, #2
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 fc7e 	bl	8008dc4 <RCCEx_PLL3_Config>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80074d4:	4b87      	ldr	r3, [pc, #540]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80074d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074e4:	4a83      	ldr	r2, [pc, #524]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80074e6:	430b      	orrs	r3, r1
 80074e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	f002 0310 	and.w	r3, r2, #16
 80074f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074fa:	2300      	movs	r3, #0
 80074fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007500:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007504:	460b      	mov	r3, r1
 8007506:	4313      	orrs	r3, r2
 8007508:	d01e      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800750a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800750e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007516:	d10c      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800751c:	3328      	adds	r3, #40	@ 0x28
 800751e:	2102      	movs	r1, #2
 8007520:	4618      	mov	r0, r3
 8007522:	f001 fc4f 	bl	8008dc4 <RCCEx_PLL3_Config>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007532:	4b70      	ldr	r3, [pc, #448]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007536:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800753a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800753e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007542:	4a6c      	ldr	r2, [pc, #432]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007544:	430b      	orrs	r3, r1
 8007546:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007550:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007554:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007558:	2300      	movs	r3, #0
 800755a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800755e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007562:	460b      	mov	r3, r1
 8007564:	4313      	orrs	r3, r2
 8007566:	d03e      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800756c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007574:	d022      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007576:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800757a:	d81b      	bhi.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007584:	d00b      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007586:	e015      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800758c:	3308      	adds	r3, #8
 800758e:	2100      	movs	r1, #0
 8007590:	4618      	mov	r0, r3
 8007592:	f001 fb65 	bl	8008c60 <RCCEx_PLL2_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800759c:	e00f      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800759e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075a2:	3328      	adds	r3, #40	@ 0x28
 80075a4:	2102      	movs	r1, #2
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 fc0c 	bl	8008dc4 <RCCEx_PLL3_Config>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80075b2:	e004      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80075ba:	e000      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80075bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10b      	bne.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075c6:	4b4b      	ldr	r3, [pc, #300]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80075c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80075ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80075d6:	4a47      	ldr	r2, [pc, #284]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80075d8:	430b      	orrs	r3, r1
 80075da:	6593      	str	r3, [r2, #88]	@ 0x58
 80075dc:	e003      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80075e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80075f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075f4:	2300      	movs	r3, #0
 80075f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80075fc:	460b      	mov	r3, r1
 80075fe:	4313      	orrs	r3, r2
 8007600:	d03b      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800760a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800760e:	d01f      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007610:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007614:	d818      	bhi.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800761a:	d003      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800761c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007620:	d007      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007622:	e011      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007624:	4b33      	ldr	r3, [pc, #204]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007628:	4a32      	ldr	r2, [pc, #200]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800762a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800762e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007630:	e00f      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007636:	3328      	adds	r3, #40	@ 0x28
 8007638:	2101      	movs	r1, #1
 800763a:	4618      	mov	r0, r3
 800763c:	f001 fbc2 	bl	8008dc4 <RCCEx_PLL3_Config>
 8007640:	4603      	mov	r3, r0
 8007642:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007646:	e004      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800764e:	e000      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007652:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10b      	bne.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800765a:	4b26      	ldr	r3, [pc, #152]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800765c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800765e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800766a:	4a22      	ldr	r2, [pc, #136]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800766c:	430b      	orrs	r3, r1
 800766e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007670:	e003      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007672:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007676:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800767a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007686:	673b      	str	r3, [r7, #112]	@ 0x70
 8007688:	2300      	movs	r3, #0
 800768a:	677b      	str	r3, [r7, #116]	@ 0x74
 800768c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007690:	460b      	mov	r3, r1
 8007692:	4313      	orrs	r3, r2
 8007694:	d034      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007696:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800769a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80076a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076a4:	d007      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80076a6:	e011      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a8:	4b12      	ldr	r3, [pc, #72]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80076aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ac:	4a11      	ldr	r2, [pc, #68]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80076ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80076b4:	e00e      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ba:	3308      	adds	r3, #8
 80076bc:	2102      	movs	r1, #2
 80076be:	4618      	mov	r0, r3
 80076c0:	f001 face 	bl	8008c60 <RCCEx_PLL2_Config>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80076ca:	e003      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80076d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10d      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80076dc:	4b05      	ldr	r3, [pc, #20]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80076de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076e0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80076e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076ea:	4a02      	ldr	r2, [pc, #8]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80076ec:	430b      	orrs	r3, r1
 80076ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076f0:	e006      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80076f2:	bf00      	nop
 80076f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007700:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800770c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800770e:	2300      	movs	r3, #0
 8007710:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007712:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007716:	460b      	mov	r3, r1
 8007718:	4313      	orrs	r3, r2
 800771a:	d00c      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800771c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007720:	3328      	adds	r3, #40	@ 0x28
 8007722:	2102      	movs	r1, #2
 8007724:	4618      	mov	r0, r3
 8007726:	f001 fb4d 	bl	8008dc4 <RCCEx_PLL3_Config>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007742:	663b      	str	r3, [r7, #96]	@ 0x60
 8007744:	2300      	movs	r3, #0
 8007746:	667b      	str	r3, [r7, #100]	@ 0x64
 8007748:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800774c:	460b      	mov	r3, r1
 800774e:	4313      	orrs	r3, r2
 8007750:	d038      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007752:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800775e:	d018      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007760:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007764:	d811      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800776a:	d014      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800776c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007770:	d80b      	bhi.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d011      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8007776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800777a:	d106      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800777c:	4bc3      	ldr	r3, [pc, #780]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800777e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007780:	4ac2      	ldr	r2, [pc, #776]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007786:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007788:	e008      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007790:	e004      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007792:	bf00      	nop
 8007794:	e002      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007796:	bf00      	nop
 8007798:	e000      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800779a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800779c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10b      	bne.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077a4:	4bb9      	ldr	r3, [pc, #740]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80077a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80077ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077b4:	4ab5      	ldr	r2, [pc, #724]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80077b6:	430b      	orrs	r3, r1
 80077b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80077ba:	e003      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80077c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077cc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80077d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077d2:	2300      	movs	r3, #0
 80077d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80077da:	460b      	mov	r3, r1
 80077dc:	4313      	orrs	r3, r2
 80077de:	d009      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80077e0:	4baa      	ldr	r3, [pc, #680]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80077e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80077e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077ee:	4aa7      	ldr	r2, [pc, #668]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80077f0:	430b      	orrs	r3, r1
 80077f2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80077f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007800:	653b      	str	r3, [r7, #80]	@ 0x50
 8007802:	2300      	movs	r3, #0
 8007804:	657b      	str	r3, [r7, #84]	@ 0x54
 8007806:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800780a:	460b      	mov	r3, r1
 800780c:	4313      	orrs	r3, r2
 800780e:	d009      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007810:	4b9e      	ldr	r3, [pc, #632]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007814:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007818:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800781c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800781e:	4a9b      	ldr	r2, [pc, #620]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007820:	430b      	orrs	r3, r1
 8007822:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007830:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007832:	2300      	movs	r3, #0
 8007834:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007836:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800783a:	460b      	mov	r3, r1
 800783c:	4313      	orrs	r3, r2
 800783e:	d009      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007840:	4b92      	ldr	r3, [pc, #584]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007844:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8007848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800784c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800784e:	4a8f      	ldr	r2, [pc, #572]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007850:	430b      	orrs	r3, r1
 8007852:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007860:	643b      	str	r3, [r7, #64]	@ 0x40
 8007862:	2300      	movs	r3, #0
 8007864:	647b      	str	r3, [r7, #68]	@ 0x44
 8007866:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800786a:	460b      	mov	r3, r1
 800786c:	4313      	orrs	r3, r2
 800786e:	d00e      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007870:	4b86      	ldr	r3, [pc, #536]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	4a85      	ldr	r2, [pc, #532]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007876:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800787a:	6113      	str	r3, [r2, #16]
 800787c:	4b83      	ldr	r3, [pc, #524]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800787e:	6919      	ldr	r1, [r3, #16]
 8007880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007884:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007888:	4a80      	ldr	r2, [pc, #512]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800788a:	430b      	orrs	r3, r1
 800788c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800788e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800789a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800789c:	2300      	movs	r3, #0
 800789e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80078a4:	460b      	mov	r3, r1
 80078a6:	4313      	orrs	r3, r2
 80078a8:	d009      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80078aa:	4b78      	ldr	r3, [pc, #480]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80078ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80078b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b8:	4a74      	ldr	r2, [pc, #464]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80078ba:	430b      	orrs	r3, r1
 80078bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80078be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80078ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80078cc:	2300      	movs	r3, #0
 80078ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80078d0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80078d4:	460b      	mov	r3, r1
 80078d6:	4313      	orrs	r3, r2
 80078d8:	d00a      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078da:	4b6c      	ldr	r3, [pc, #432]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80078dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078de:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80078e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078ea:	4a68      	ldr	r2, [pc, #416]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80078ec:	430b      	orrs	r3, r1
 80078ee:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80078f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	2100      	movs	r1, #0
 80078fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007902:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007906:	460b      	mov	r3, r1
 8007908:	4313      	orrs	r3, r2
 800790a:	d011      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800790c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007910:	3308      	adds	r3, #8
 8007912:	2100      	movs	r1, #0
 8007914:	4618      	mov	r0, r3
 8007916:	f001 f9a3 	bl	8008c60 <RCCEx_PLL2_Config>
 800791a:	4603      	mov	r3, r0
 800791c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007920:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007928:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800792c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007930:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	2100      	movs	r1, #0
 800793a:	6239      	str	r1, [r7, #32]
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	627b      	str	r3, [r7, #36]	@ 0x24
 8007942:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007946:	460b      	mov	r3, r1
 8007948:	4313      	orrs	r3, r2
 800794a:	d011      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800794c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007950:	3308      	adds	r3, #8
 8007952:	2101      	movs	r1, #1
 8007954:	4618      	mov	r0, r3
 8007956:	f001 f983 	bl	8008c60 <RCCEx_PLL2_Config>
 800795a:	4603      	mov	r3, r0
 800795c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007960:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007968:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800796c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	2100      	movs	r1, #0
 800797a:	61b9      	str	r1, [r7, #24]
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	61fb      	str	r3, [r7, #28]
 8007982:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007986:	460b      	mov	r3, r1
 8007988:	4313      	orrs	r3, r2
 800798a:	d011      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800798c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007990:	3308      	adds	r3, #8
 8007992:	2102      	movs	r1, #2
 8007994:	4618      	mov	r0, r3
 8007996:	f001 f963 	bl	8008c60 <RCCEx_PLL2_Config>
 800799a:	4603      	mov	r3, r0
 800799c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80079a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80079b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	2100      	movs	r1, #0
 80079ba:	6139      	str	r1, [r7, #16]
 80079bc:	f003 0308 	and.w	r3, r3, #8
 80079c0:	617b      	str	r3, [r7, #20]
 80079c2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80079c6:	460b      	mov	r3, r1
 80079c8:	4313      	orrs	r3, r2
 80079ca:	d011      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079d0:	3328      	adds	r3, #40	@ 0x28
 80079d2:	2100      	movs	r1, #0
 80079d4:	4618      	mov	r0, r3
 80079d6:	f001 f9f5 	bl	8008dc4 <RCCEx_PLL3_Config>
 80079da:	4603      	mov	r3, r0
 80079dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80079e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d003      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80079f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f8:	2100      	movs	r1, #0
 80079fa:	60b9      	str	r1, [r7, #8]
 80079fc:	f003 0310 	and.w	r3, r3, #16
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007a06:	460b      	mov	r3, r1
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	d011      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a10:	3328      	adds	r3, #40	@ 0x28
 8007a12:	2101      	movs	r1, #1
 8007a14:	4618      	mov	r0, r3
 8007a16:	f001 f9d5 	bl	8008dc4 <RCCEx_PLL3_Config>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007a20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d003      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	2100      	movs	r1, #0
 8007a3a:	6039      	str	r1, [r7, #0]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	607b      	str	r3, [r7, #4]
 8007a42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007a46:	460b      	mov	r3, r1
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	d011      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a50:	3328      	adds	r3, #40	@ 0x28
 8007a52:	2102      	movs	r1, #2
 8007a54:	4618      	mov	r0, r3
 8007a56:	f001 f9b5 	bl	8008dc4 <RCCEx_PLL3_Config>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007a60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8007a70:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	e000      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007a84:	46bd      	mov	sp, r7
 8007a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a8a:	bf00      	nop
 8007a8c:	58024400 	.word	0x58024400

08007a90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b090      	sub	sp, #64	@ 0x40
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a9e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	f040 8094 	bne.w	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007aa8:	4b97      	ldr	r3, [pc, #604]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aac:	f003 0307 	and.w	r3, r3, #7
 8007ab0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	f200 8087 	bhi.w	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007aba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ad5 	.word	0x08007ad5
 8007ac4:	08007afd 	.word	0x08007afd
 8007ac8:	08007b25 	.word	0x08007b25
 8007acc:	08007bc1 	.word	0x08007bc1
 8007ad0:	08007b4d 	.word	0x08007b4d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ad4:	4b8c      	ldr	r3, [pc, #560]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007adc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ae0:	d108      	bne.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 ff68 	bl	80089bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007af0:	f000 bc97 	b.w	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007af4:	2300      	movs	r3, #0
 8007af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007af8:	f000 bc93 	b.w	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007afc:	4b82      	ldr	r3, [pc, #520]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b08:	d108      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b0a:	f107 0318 	add.w	r3, r7, #24
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fcac 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b18:	f000 bc83 	b.w	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b20:	f000 bc7f 	b.w	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b24:	4b78      	ldr	r3, [pc, #480]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b30:	d108      	bne.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b32:	f107 030c 	add.w	r3, r7, #12
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fdec 	bl	8008714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b40:	f000 bc6f 	b.w	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007b44:	2300      	movs	r3, #0
 8007b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b48:	f000 bc6b 	b.w	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b4c:	4b6e      	ldr	r3, [pc, #440]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007b54:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b56:	4b6c      	ldr	r3, [pc, #432]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0304 	and.w	r3, r3, #4
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d10c      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d109      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b68:	4b67      	ldr	r3, [pc, #412]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	08db      	lsrs	r3, r3, #3
 8007b6e:	f003 0303 	and.w	r3, r3, #3
 8007b72:	4a66      	ldr	r2, [pc, #408]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007b74:	fa22 f303 	lsr.w	r3, r2, r3
 8007b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b7a:	e01f      	b.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b7c:	4b62      	ldr	r3, [pc, #392]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b88:	d106      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b90:	d102      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b92:	4b5f      	ldr	r3, [pc, #380]	@ (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b96:	e011      	b.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b98:	4b5b      	ldr	r3, [pc, #364]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ba4:	d106      	bne.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bac:	d102      	bne.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007bae:	4b59      	ldr	r3, [pc, #356]	@ (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bb2:	e003      	b.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007bb8:	f000 bc33 	b.w	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007bbc:	f000 bc31 	b.w	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007bc0:	4b55      	ldr	r3, [pc, #340]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bc4:	f000 bc2d 	b.w	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bcc:	f000 bc29 	b.w	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bd4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	f040 809f 	bne.w	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8007bde:	4b4a      	ldr	r3, [pc, #296]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007be2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007be6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bee:	d04d      	beq.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bf6:	f200 8084 	bhi.w	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfc:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bfe:	d07d      	beq.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8007c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c02:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c04:	d87d      	bhi.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c08:	2b80      	cmp	r3, #128	@ 0x80
 8007c0a:	d02d      	beq.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0e:	2b80      	cmp	r3, #128	@ 0x80
 8007c10:	d877      	bhi.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d003      	beq.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8007c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1a:	2b40      	cmp	r3, #64	@ 0x40
 8007c1c:	d012      	beq.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007c1e:	e070      	b.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c20:	4b39      	ldr	r3, [pc, #228]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c2c:	d107      	bne.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fec2 	bl	80089bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c3c:	e3f1      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c42:	e3ee      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c44:	4b30      	ldr	r3, [pc, #192]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c50:	d107      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c52:	f107 0318 	add.w	r3, r7, #24
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 fc08 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c60:	e3df      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c66:	e3dc      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c68:	4b27      	ldr	r3, [pc, #156]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c74:	d107      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c76:	f107 030c 	add.w	r3, r7, #12
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 fd4a 	bl	8008714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c84:	e3cd      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c8a:	e3ca      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c94:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c96:	4b1c      	ldr	r3, [pc, #112]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d10c      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d109      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ca8:	4b17      	ldr	r3, [pc, #92]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	08db      	lsrs	r3, r3, #3
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	4a16      	ldr	r2, [pc, #88]	@ (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cba:	e01e      	b.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cbc:	4b12      	ldr	r3, [pc, #72]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cc8:	d106      	bne.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8007cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ccc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cd0:	d102      	bne.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cd6:	e010      	b.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ce0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ce4:	d106      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cec:	d102      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cee:	4b09      	ldr	r3, [pc, #36]	@ (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cf2:	e002      	b.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007cf8:	e393      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007cfa:	e392      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007cfc:	4b06      	ldr	r3, [pc, #24]	@ (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d00:	e38f      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007d02:	2300      	movs	r3, #0
 8007d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d06:	e38c      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007d08:	58024400 	.word	0x58024400
 8007d0c:	03d09000 	.word	0x03d09000
 8007d10:	003d0900 	.word	0x003d0900
 8007d14:	007a1200 	.word	0x007a1200
 8007d18:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d20:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007d24:	430b      	orrs	r3, r1
 8007d26:	f040 809c 	bne.w	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8007d2a:	4b9e      	ldr	r3, [pc, #632]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d2e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007d32:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d3a:	d054      	beq.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d42:	f200 808b 	bhi.w	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d48:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007d4c:	f000 8083 	beq.w	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8007d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d52:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007d56:	f200 8081 	bhi.w	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d60:	d02f      	beq.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8007d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d68:	d878      	bhi.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d004      	beq.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d76:	d012      	beq.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8007d78:	e070      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d7a:	4b8a      	ldr	r3, [pc, #552]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d86:	d107      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fe15 	bl	80089bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d96:	e344      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d9c:	e341      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d9e:	4b81      	ldr	r3, [pc, #516]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007da6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007daa:	d107      	bne.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dac:	f107 0318 	add.w	r3, r7, #24
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fb5b 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dba:	e332      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc0:	e32f      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007dc2:	4b78      	ldr	r3, [pc, #480]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dce:	d107      	bne.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dd0:	f107 030c 	add.w	r3, r7, #12
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 fc9d 	bl	8008714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dde:	e320      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de4:	e31d      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007de6:	4b6f      	ldr	r3, [pc, #444]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007dee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007df0:	4b6c      	ldr	r3, [pc, #432]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d10c      	bne.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8007dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d109      	bne.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e02:	4b68      	ldr	r3, [pc, #416]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	08db      	lsrs	r3, r3, #3
 8007e08:	f003 0303 	and.w	r3, r3, #3
 8007e0c:	4a66      	ldr	r2, [pc, #408]	@ (8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e14:	e01e      	b.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e16:	4b63      	ldr	r3, [pc, #396]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e22:	d106      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e2a:	d102      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e2c:	4b5f      	ldr	r3, [pc, #380]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e30:	e010      	b.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e32:	4b5c      	ldr	r3, [pc, #368]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e3e:	d106      	bne.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e46:	d102      	bne.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e48:	4b59      	ldr	r3, [pc, #356]	@ (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8007e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e4c:	e002      	b.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8007e52:	e2e6      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007e54:	e2e5      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e56:	4b57      	ldr	r3, [pc, #348]	@ (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e5a:	e2e2      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e60:	e2df      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e66:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007e6a:	430b      	orrs	r3, r1
 8007e6c:	f040 80a7 	bne.w	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007e70:	4b4c      	ldr	r3, [pc, #304]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e74:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007e78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e80:	d055      	beq.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8007e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e88:	f200 8096 	bhi.w	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e92:	f000 8084 	beq.w	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e9c:	f200 808c 	bhi.w	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ea6:	d030      	beq.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eae:	f200 8083 	bhi.w	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d004      	beq.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ebe:	d012      	beq.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8007ec0:	e07a      	b.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ec2:	4b38      	ldr	r3, [pc, #224]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ece:	d107      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fd71 	bl	80089bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ede:	e2a0      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ee4:	e29d      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ef2:	d107      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ef4:	f107 0318 	add.w	r3, r7, #24
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 fab7 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f02:	e28e      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f08:	e28b      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f0a:	4b26      	ldr	r3, [pc, #152]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f16:	d107      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f18:	f107 030c 	add.w	r3, r7, #12
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fbf9 	bl	8008714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f26:	e27c      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f2c:	e279      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f36:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f38:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	d10c      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8007f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d109      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f4a:	4b16      	ldr	r3, [pc, #88]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	08db      	lsrs	r3, r3, #3
 8007f50:	f003 0303 	and.w	r3, r3, #3
 8007f54:	4a14      	ldr	r2, [pc, #80]	@ (8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007f56:	fa22 f303 	lsr.w	r3, r2, r3
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f5c:	e01e      	b.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f5e:	4b11      	ldr	r3, [pc, #68]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f6a:	d106      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f72:	d102      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f74:	4b0d      	ldr	r3, [pc, #52]	@ (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f78:	e010      	b.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f86:	d106      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f8e:	d102      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f90:	4b07      	ldr	r3, [pc, #28]	@ (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8007f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f94:	e002      	b.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007f9a:	e242      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007f9c:	e241      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f9e:	4b05      	ldr	r3, [pc, #20]	@ (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fa2:	e23e      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007fa4:	58024400 	.word	0x58024400
 8007fa8:	03d09000 	.word	0x03d09000
 8007fac:	003d0900 	.word	0x003d0900
 8007fb0:	007a1200 	.word	0x007a1200
 8007fb4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fbc:	e231      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fc2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	f040 8085 	bne.w	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007fcc:	4b9c      	ldr	r3, [pc, #624]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fd0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007fdc:	d06b      	beq.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007fe4:	d874      	bhi.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007fec:	d056      	beq.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8007fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ff4:	d86c      	bhi.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ffc:	d03b      	beq.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008000:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008004:	d864      	bhi.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008008:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800800c:	d021      	beq.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800800e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008014:	d85c      	bhi.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008018:	2b00      	cmp	r3, #0
 800801a:	d004      	beq.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800801c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008022:	d004      	beq.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8008024:	e054      	b.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008026:	f7fe fb49 	bl	80066bc <HAL_RCC_GetPCLK1Freq>
 800802a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800802c:	e1f9      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800802e:	4b84      	ldr	r3, [pc, #528]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008036:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800803a:	d107      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800803c:	f107 0318 	add.w	r3, r7, #24
 8008040:	4618      	mov	r0, r3
 8008042:	f000 fa13 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800804a:	e1ea      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008050:	e1e7      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008052:	4b7b      	ldr	r3, [pc, #492]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800805a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800805e:	d107      	bne.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008060:	f107 030c 	add.w	r3, r7, #12
 8008064:	4618      	mov	r0, r3
 8008066:	f000 fb55 	bl	8008714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800806e:	e1d8      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008074:	e1d5      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008076:	4b72      	ldr	r3, [pc, #456]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0304 	and.w	r3, r3, #4
 800807e:	2b04      	cmp	r3, #4
 8008080:	d109      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008082:	4b6f      	ldr	r3, [pc, #444]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	08db      	lsrs	r3, r3, #3
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	4a6d      	ldr	r2, [pc, #436]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800808e:	fa22 f303 	lsr.w	r3, r2, r3
 8008092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008094:	e1c5      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800809a:	e1c2      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800809c:	4b68      	ldr	r3, [pc, #416]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080a8:	d102      	bne.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80080aa:	4b67      	ldr	r3, [pc, #412]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80080ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ae:	e1b8      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b4:	e1b5      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80080b6:	4b62      	ldr	r3, [pc, #392]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080c2:	d102      	bne.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80080c4:	4b61      	ldr	r3, [pc, #388]	@ (800824c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80080c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080c8:	e1ab      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080ce:	e1a8      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d4:	e1a5      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80080d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080da:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80080de:	430b      	orrs	r3, r1
 80080e0:	d173      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80080e2:	4b57      	ldr	r3, [pc, #348]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80080e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80080ea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80080ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080f2:	d02f      	beq.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80080f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080fa:	d863      	bhi.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80080fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d004      	beq.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008108:	d012      	beq.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800810a:	e05b      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800810c:	4b4c      	ldr	r3, [pc, #304]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008114:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008118:	d107      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800811a:	f107 0318 	add.w	r3, r7, #24
 800811e:	4618      	mov	r0, r3
 8008120:	f000 f9a4 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008128:	e17b      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800812e:	e178      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008130:	4b43      	ldr	r3, [pc, #268]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008138:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800813c:	d107      	bne.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800813e:	f107 030c 	add.w	r3, r7, #12
 8008142:	4618      	mov	r0, r3
 8008144:	f000 fae6 	bl	8008714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800814c:	e169      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800814e:	2300      	movs	r3, #0
 8008150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008152:	e166      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008154:	4b3a      	ldr	r3, [pc, #232]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008158:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800815c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800815e:	4b38      	ldr	r3, [pc, #224]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	2b04      	cmp	r3, #4
 8008168:	d10c      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800816a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800816c:	2b00      	cmp	r3, #0
 800816e:	d109      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008170:	4b33      	ldr	r3, [pc, #204]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	08db      	lsrs	r3, r3, #3
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	4a32      	ldr	r2, [pc, #200]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800817c:	fa22 f303 	lsr.w	r3, r2, r3
 8008180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008182:	e01e      	b.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008184:	4b2e      	ldr	r3, [pc, #184]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800818c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008190:	d106      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8008192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008198:	d102      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800819a:	4b2b      	ldr	r3, [pc, #172]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800819c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800819e:	e010      	b.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081a0:	4b27      	ldr	r3, [pc, #156]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081ac:	d106      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80081ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081b4:	d102      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081b6:	4b25      	ldr	r3, [pc, #148]	@ (800824c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80081b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081ba:	e002      	b.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80081c0:	e12f      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80081c2:	e12e      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081c8:	e12b      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80081ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ce:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80081d2:	430b      	orrs	r3, r1
 80081d4:	d13c      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80081d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80081d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80081de:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80081e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d004      	beq.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80081e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081ec:	d012      	beq.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80081ee:	e023      	b.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081f0:	4b13      	ldr	r3, [pc, #76]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081fc:	d107      	bne.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fbda 	bl	80089bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800820c:	e109      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008212:	e106      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008214:	4b0a      	ldr	r3, [pc, #40]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800821c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008220:	d107      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008222:	f107 0318 	add.w	r3, r7, #24
 8008226:	4618      	mov	r0, r3
 8008228:	f000 f920 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008230:	e0f7      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008236:	e0f4      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008238:	2300      	movs	r3, #0
 800823a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800823c:	e0f1      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800823e:	bf00      	nop
 8008240:	58024400 	.word	0x58024400
 8008244:	03d09000 	.word	0x03d09000
 8008248:	003d0900 	.word	0x003d0900
 800824c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008254:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008258:	430b      	orrs	r3, r1
 800825a:	f040 8091 	bne.w	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800825e:	4b73      	ldr	r3, [pc, #460]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008262:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008266:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800826e:	f000 8081 	beq.w	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008274:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008278:	d87f      	bhi.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800827a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008280:	d06b      	beq.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008284:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008288:	d877      	bhi.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800828a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008290:	d056      	beq.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008298:	d86f      	bhi.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800829a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082a0:	d03b      	beq.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80082a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082a8:	d867      	bhi.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80082aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082b0:	d021      	beq.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80082b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082b8:	d85f      	bhi.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80082ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d004      	beq.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80082c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082c6:	d004      	beq.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80082c8:	e057      	b.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80082ca:	f000 f8b9 	bl	8008440 <HAL_RCCEx_GetD3PCLK1Freq>
 80082ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082d0:	e0a7      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082d2:	4b56      	ldr	r3, [pc, #344]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082de:	d107      	bne.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082e0:	f107 0318 	add.w	r3, r7, #24
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 f8c1 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ee:	e098      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082f4:	e095      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082f6:	4b4d      	ldr	r3, [pc, #308]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008302:	d107      	bne.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008304:	f107 030c 	add.w	r3, r7, #12
 8008308:	4618      	mov	r0, r3
 800830a:	f000 fa03 	bl	8008714 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008312:	e086      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008314:	2300      	movs	r3, #0
 8008316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008318:	e083      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800831a:	4b44      	ldr	r3, [pc, #272]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0304 	and.w	r3, r3, #4
 8008322:	2b04      	cmp	r3, #4
 8008324:	d109      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008326:	4b41      	ldr	r3, [pc, #260]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	08db      	lsrs	r3, r3, #3
 800832c:	f003 0303 	and.w	r3, r3, #3
 8008330:	4a3f      	ldr	r2, [pc, #252]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008332:	fa22 f303 	lsr.w	r3, r2, r3
 8008336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008338:	e073      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800833e:	e070      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008340:	4b3a      	ldr	r3, [pc, #232]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800834c:	d102      	bne.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800834e:	4b39      	ldr	r3, [pc, #228]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008352:	e066      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008354:	2300      	movs	r3, #0
 8008356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008358:	e063      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800835a:	4b34      	ldr	r3, [pc, #208]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008362:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008366:	d102      	bne.n	800836e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008368:	4b33      	ldr	r3, [pc, #204]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800836a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800836c:	e059      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008372:	e056      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008374:	4b31      	ldr	r3, [pc, #196]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8008376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008378:	e053      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800837a:	2300      	movs	r3, #0
 800837c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800837e:	e050      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008384:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008388:	430b      	orrs	r3, r1
 800838a:	d148      	bne.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800838c:	4b27      	ldr	r3, [pc, #156]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800838e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008390:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008394:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800839c:	d02a      	beq.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800839e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083a4:	d838      	bhi.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80083a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d004      	beq.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80083ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083b2:	d00d      	beq.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80083b4:	e030      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083b6:	4b1d      	ldr	r3, [pc, #116]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083c2:	d102      	bne.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80083c4:	4b1c      	ldr	r3, [pc, #112]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80083c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c8:	e02b      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ce:	e028      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083d0:	4b16      	ldr	r3, [pc, #88]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083dc:	d107      	bne.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 faea 	bl	80089bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ec:	e019      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083f2:	e016      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083f4:	4b0d      	ldr	r3, [pc, #52]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008400:	d107      	bne.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008402:	f107 0318 	add.w	r3, r7, #24
 8008406:	4618      	mov	r0, r3
 8008408:	f000 f830 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008410:	e007      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008416:	e004      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800841c:	e001      	b.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008424:	4618      	mov	r0, r3
 8008426:	3740      	adds	r7, #64	@ 0x40
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	58024400 	.word	0x58024400
 8008430:	03d09000 	.word	0x03d09000
 8008434:	003d0900 	.word	0x003d0900
 8008438:	007a1200 	.word	0x007a1200
 800843c:	00bb8000 	.word	0x00bb8000

08008440 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008444:	f7fe f90a 	bl	800665c <HAL_RCC_GetHCLKFreq>
 8008448:	4602      	mov	r2, r0
 800844a:	4b06      	ldr	r3, [pc, #24]	@ (8008464 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	091b      	lsrs	r3, r3, #4
 8008450:	f003 0307 	and.w	r3, r3, #7
 8008454:	4904      	ldr	r1, [pc, #16]	@ (8008468 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008456:	5ccb      	ldrb	r3, [r1, r3]
 8008458:	f003 031f 	and.w	r3, r3, #31
 800845c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008460:	4618      	mov	r0, r3
 8008462:	bd80      	pop	{r7, pc}
 8008464:	58024400 	.word	0x58024400
 8008468:	0800dc9c 	.word	0x0800dc9c

0800846c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800846c:	b480      	push	{r7}
 800846e:	b089      	sub	sp, #36	@ 0x24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008474:	4ba1      	ldr	r3, [pc, #644]	@ (80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800847e:	4b9f      	ldr	r3, [pc, #636]	@ (80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008482:	0b1b      	lsrs	r3, r3, #12
 8008484:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008488:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800848a:	4b9c      	ldr	r3, [pc, #624]	@ (80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800848c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848e:	091b      	lsrs	r3, r3, #4
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008496:	4b99      	ldr	r3, [pc, #612]	@ (80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800849a:	08db      	lsrs	r3, r3, #3
 800849c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	fb02 f303 	mul.w	r3, r2, r3
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 8111 	beq.w	80086dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	2b02      	cmp	r3, #2
 80084be:	f000 8083 	beq.w	80085c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	f200 80a1 	bhi.w	800860c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d003      	beq.n	80084d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d056      	beq.n	8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80084d6:	e099      	b.n	800860c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084d8:	4b88      	ldr	r3, [pc, #544]	@ (80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0320 	and.w	r3, r3, #32
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d02d      	beq.n	8008540 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084e4:	4b85      	ldr	r3, [pc, #532]	@ (80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	08db      	lsrs	r3, r3, #3
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	4a84      	ldr	r2, [pc, #528]	@ (8008700 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80084f0:	fa22 f303 	lsr.w	r3, r2, r3
 80084f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	ee07 3a90 	vmov	s15, r3
 80084fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800850e:	4b7b      	ldr	r3, [pc, #492]	@ (80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800851e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008522:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800852a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800852e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800853e:	e087      	b.n	8008650 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	ee07 3a90 	vmov	s15, r3
 8008546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008708 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800854e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008552:	4b6a      	ldr	r3, [pc, #424]	@ (80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008562:	ed97 6a03 	vldr	s12, [r7, #12]
 8008566:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800856a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800856e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800857a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800857e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008582:	e065      	b.n	8008650 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	ee07 3a90 	vmov	s15, r3
 800858a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800858e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800870c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008596:	4b59      	ldr	r3, [pc, #356]	@ (80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085c6:	e043      	b.n	8008650 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80085d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085da:	4b48      	ldr	r3, [pc, #288]	@ (80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800860a:	e021      	b.n	8008650 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	ee07 3a90 	vmov	s15, r3
 8008612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008616:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800870c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800861a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800861e:	4b37      	ldr	r3, [pc, #220]	@ (80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008632:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008704 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800863a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800863e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800864a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800864e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008650:	4b2a      	ldr	r3, [pc, #168]	@ (80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008654:	0a5b      	lsrs	r3, r3, #9
 8008656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800865a:	ee07 3a90 	vmov	s15, r3
 800865e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008662:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008666:	ee37 7a87 	vadd.f32	s14, s15, s14
 800866a:	edd7 6a07 	vldr	s13, [r7, #28]
 800866e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008676:	ee17 2a90 	vmov	r2, s15
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800867e:	4b1f      	ldr	r3, [pc, #124]	@ (80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008682:	0c1b      	lsrs	r3, r3, #16
 8008684:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008688:	ee07 3a90 	vmov	s15, r3
 800868c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008690:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008694:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008698:	edd7 6a07 	vldr	s13, [r7, #28]
 800869c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a4:	ee17 2a90 	vmov	r2, s15
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80086ac:	4b13      	ldr	r3, [pc, #76]	@ (80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b0:	0e1b      	lsrs	r3, r3, #24
 80086b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086b6:	ee07 3a90 	vmov	s15, r3
 80086ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086d2:	ee17 2a90 	vmov	r2, s15
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80086da:	e008      	b.n	80086ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	609a      	str	r2, [r3, #8]
}
 80086ee:	bf00      	nop
 80086f0:	3724      	adds	r7, #36	@ 0x24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	58024400 	.word	0x58024400
 8008700:	03d09000 	.word	0x03d09000
 8008704:	46000000 	.word	0x46000000
 8008708:	4c742400 	.word	0x4c742400
 800870c:	4a742400 	.word	0x4a742400
 8008710:	4af42400 	.word	0x4af42400

08008714 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008714:	b480      	push	{r7}
 8008716:	b089      	sub	sp, #36	@ 0x24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800871c:	4ba1      	ldr	r3, [pc, #644]	@ (80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800871e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008720:	f003 0303 	and.w	r3, r3, #3
 8008724:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008726:	4b9f      	ldr	r3, [pc, #636]	@ (80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872a:	0d1b      	lsrs	r3, r3, #20
 800872c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008730:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008732:	4b9c      	ldr	r3, [pc, #624]	@ (80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008736:	0a1b      	lsrs	r3, r3, #8
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800873e:	4b99      	ldr	r3, [pc, #612]	@ (80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008742:	08db      	lsrs	r3, r3, #3
 8008744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	fb02 f303 	mul.w	r3, r2, r3
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 8111 	beq.w	8008984 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	2b02      	cmp	r3, #2
 8008766:	f000 8083 	beq.w	8008870 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	2b02      	cmp	r3, #2
 800876e:	f200 80a1 	bhi.w	80088b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d003      	beq.n	8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d056      	beq.n	800882c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800877e:	e099      	b.n	80088b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008780:	4b88      	ldr	r3, [pc, #544]	@ (80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0320 	and.w	r3, r3, #32
 8008788:	2b00      	cmp	r3, #0
 800878a:	d02d      	beq.n	80087e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800878c:	4b85      	ldr	r3, [pc, #532]	@ (80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	08db      	lsrs	r3, r3, #3
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	4a84      	ldr	r2, [pc, #528]	@ (80089a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008798:	fa22 f303 	lsr.w	r3, r2, r3
 800879c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	ee07 3a90 	vmov	s15, r3
 80087a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b6:	4b7b      	ldr	r3, [pc, #492]	@ (80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80087e6:	e087      	b.n	80088f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	ee07 3a90 	vmov	s15, r3
 80087ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80089b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80087f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087fa:	4b6a      	ldr	r3, [pc, #424]	@ (80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880a:	ed97 6a03 	vldr	s12, [r7, #12]
 800880e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800881a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800881e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800882a:	e065      	b.n	80088f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	ee07 3a90 	vmov	s15, r3
 8008832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008836:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80089b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800883a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800883e:	4b59      	ldr	r3, [pc, #356]	@ (80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800884e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008852:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800885a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800885e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800886e:	e043      	b.n	80088f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80089b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800887e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008882:	4b48      	ldr	r3, [pc, #288]	@ (80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008892:	ed97 6a03 	vldr	s12, [r7, #12]
 8008896:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800889a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800889e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088b2:	e021      	b.n	80088f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80089b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80088c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c6:	4b37      	ldr	r3, [pc, #220]	@ (80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ce:	ee07 3a90 	vmov	s15, r3
 80088d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80088f8:	4b2a      	ldr	r3, [pc, #168]	@ (80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088fc:	0a5b      	lsrs	r3, r3, #9
 80088fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800890e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008912:	edd7 6a07 	vldr	s13, [r7, #28]
 8008916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800891a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800891e:	ee17 2a90 	vmov	r2, s15
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008926:	4b1f      	ldr	r3, [pc, #124]	@ (80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892a:	0c1b      	lsrs	r3, r3, #16
 800892c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008930:	ee07 3a90 	vmov	s15, r3
 8008934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008938:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800893c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008940:	edd7 6a07 	vldr	s13, [r7, #28]
 8008944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800894c:	ee17 2a90 	vmov	r2, s15
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008954:	4b13      	ldr	r3, [pc, #76]	@ (80089a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008958:	0e1b      	lsrs	r3, r3, #24
 800895a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800895e:	ee07 3a90 	vmov	s15, r3
 8008962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008966:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800896a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800896e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800897a:	ee17 2a90 	vmov	r2, s15
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008982:	e008      	b.n	8008996 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	609a      	str	r2, [r3, #8]
}
 8008996:	bf00      	nop
 8008998:	3724      	adds	r7, #36	@ 0x24
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	58024400 	.word	0x58024400
 80089a8:	03d09000 	.word	0x03d09000
 80089ac:	46000000 	.word	0x46000000
 80089b0:	4c742400 	.word	0x4c742400
 80089b4:	4a742400 	.word	0x4a742400
 80089b8:	4af42400 	.word	0x4af42400

080089bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80089bc:	b480      	push	{r7}
 80089be:	b089      	sub	sp, #36	@ 0x24
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089c4:	4ba0      	ldr	r3, [pc, #640]	@ (8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c8:	f003 0303 	and.w	r3, r3, #3
 80089cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80089ce:	4b9e      	ldr	r3, [pc, #632]	@ (8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d2:	091b      	lsrs	r3, r3, #4
 80089d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80089da:	4b9b      	ldr	r3, [pc, #620]	@ (8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089de:	f003 0301 	and.w	r3, r3, #1
 80089e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80089e4:	4b98      	ldr	r3, [pc, #608]	@ (8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e8:	08db      	lsrs	r3, r3, #3
 80089ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	fb02 f303 	mul.w	r3, r2, r3
 80089f4:	ee07 3a90 	vmov	s15, r3
 80089f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 8111 	beq.w	8008c2a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	f000 8083 	beq.w	8008b16 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	f200 80a1 	bhi.w	8008b5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d056      	beq.n	8008ad2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008a24:	e099      	b.n	8008b5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a26:	4b88      	ldr	r3, [pc, #544]	@ (8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0320 	and.w	r3, r3, #32
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d02d      	beq.n	8008a8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a32:	4b85      	ldr	r3, [pc, #532]	@ (8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	08db      	lsrs	r3, r3, #3
 8008a38:	f003 0303 	and.w	r3, r3, #3
 8008a3c:	4a83      	ldr	r2, [pc, #524]	@ (8008c4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a42:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	ee07 3a90 	vmov	s15, r3
 8008a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5c:	4b7a      	ldr	r3, [pc, #488]	@ (8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a64:	ee07 3a90 	vmov	s15, r3
 8008a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a70:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008c50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008a74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a88:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a8c:	e087      	b.n	8008b9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	ee07 3a90 	vmov	s15, r3
 8008a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a98:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008c54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008a9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aa0:	4b69      	ldr	r3, [pc, #420]	@ (8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa8:	ee07 3a90 	vmov	s15, r3
 8008aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ab4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008c50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ac0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008acc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ad0:	e065      	b.n	8008b9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	ee07 3a90 	vmov	s15, r3
 8008ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008adc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008c58 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008ae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ae4:	4b58      	ldr	r3, [pc, #352]	@ (8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aec:	ee07 3a90 	vmov	s15, r3
 8008af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008af8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008c50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008afc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b14:	e043      	b.n	8008b9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	ee07 3a90 	vmov	s15, r3
 8008b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b20:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008c5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008b24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b28:	4b47      	ldr	r3, [pc, #284]	@ (8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b30:	ee07 3a90 	vmov	s15, r3
 8008b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b38:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b3c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008c50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b58:	e021      	b.n	8008b9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	ee07 3a90 	vmov	s15, r3
 8008b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b64:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008c54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008b68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6c:	4b36      	ldr	r3, [pc, #216]	@ (8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b74:	ee07 3a90 	vmov	s15, r3
 8008b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b80:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008c50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b9c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ba2:	0a5b      	lsrs	r3, r3, #9
 8008ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ba8:	ee07 3a90 	vmov	s15, r3
 8008bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bc4:	ee17 2a90 	vmov	r2, s15
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd0:	0c1b      	lsrs	r3, r3, #16
 8008bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bd6:	ee07 3a90 	vmov	s15, r3
 8008bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008be2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008be6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bf2:	ee17 2a90 	vmov	r2, s15
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008bfa:	4b13      	ldr	r3, [pc, #76]	@ (8008c48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bfe:	0e1b      	lsrs	r3, r3, #24
 8008c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c04:	ee07 3a90 	vmov	s15, r3
 8008c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c14:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c20:	ee17 2a90 	vmov	r2, s15
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008c28:	e008      	b.n	8008c3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	609a      	str	r2, [r3, #8]
}
 8008c3c:	bf00      	nop
 8008c3e:	3724      	adds	r7, #36	@ 0x24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	58024400 	.word	0x58024400
 8008c4c:	03d09000 	.word	0x03d09000
 8008c50:	46000000 	.word	0x46000000
 8008c54:	4c742400 	.word	0x4c742400
 8008c58:	4a742400 	.word	0x4a742400
 8008c5c:	4af42400 	.word	0x4af42400

08008c60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c6e:	4b53      	ldr	r3, [pc, #332]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d101      	bne.n	8008c7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e099      	b.n	8008db2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c7e:	4b4f      	ldr	r3, [pc, #316]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a4e      	ldr	r2, [pc, #312]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008c84:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c8a:	f7f8 fdd1 	bl	8001830 <HAL_GetTick>
 8008c8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c90:	e008      	b.n	8008ca4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c92:	f7f8 fdcd 	bl	8001830 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e086      	b.n	8008db2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ca4:	4b45      	ldr	r3, [pc, #276]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1f0      	bne.n	8008c92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008cb0:	4b42      	ldr	r3, [pc, #264]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	031b      	lsls	r3, r3, #12
 8008cbe:	493f      	ldr	r1, [pc, #252]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	025b      	lsls	r3, r3, #9
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	041b      	lsls	r3, r3, #16
 8008ce2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ce6:	431a      	orrs	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	061b      	lsls	r3, r3, #24
 8008cf0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008cf4:	4931      	ldr	r1, [pc, #196]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008cfa:	4b30      	ldr	r3, [pc, #192]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cfe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	492d      	ldr	r1, [pc, #180]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d10:	f023 0220 	bic.w	r2, r3, #32
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	4928      	ldr	r1, [pc, #160]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008d1e:	4b27      	ldr	r3, [pc, #156]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d22:	4a26      	ldr	r2, [pc, #152]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d24:	f023 0310 	bic.w	r3, r3, #16
 8008d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d2a:	4b24      	ldr	r3, [pc, #144]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d2e:	4b24      	ldr	r3, [pc, #144]	@ (8008dc0 <RCCEx_PLL2_Config+0x160>)
 8008d30:	4013      	ands	r3, r2
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	69d2      	ldr	r2, [r2, #28]
 8008d36:	00d2      	lsls	r2, r2, #3
 8008d38:	4920      	ldr	r1, [pc, #128]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d42:	4a1e      	ldr	r2, [pc, #120]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d44:	f043 0310 	orr.w	r3, r3, #16
 8008d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d106      	bne.n	8008d5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008d50:	4b1a      	ldr	r3, [pc, #104]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d54:	4a19      	ldr	r2, [pc, #100]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d5c:	e00f      	b.n	8008d7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d106      	bne.n	8008d72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d64:	4b15      	ldr	r3, [pc, #84]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d68:	4a14      	ldr	r2, [pc, #80]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d70:	e005      	b.n	8008d7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d72:	4b12      	ldr	r3, [pc, #72]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d76:	4a11      	ldr	r2, [pc, #68]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a0e      	ldr	r2, [pc, #56]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008d84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d8a:	f7f8 fd51 	bl	8001830 <HAL_GetTick>
 8008d8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d90:	e008      	b.n	8008da4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d92:	f7f8 fd4d 	bl	8001830 <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d901      	bls.n	8008da4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e006      	b.n	8008db2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008da4:	4b05      	ldr	r3, [pc, #20]	@ (8008dbc <RCCEx_PLL2_Config+0x15c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d0f0      	beq.n	8008d92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	58024400 	.word	0x58024400
 8008dc0:	ffff0007 	.word	0xffff0007

08008dc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008dd2:	4b53      	ldr	r3, [pc, #332]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd6:	f003 0303 	and.w	r3, r3, #3
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d101      	bne.n	8008de2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e099      	b.n	8008f16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008de2:	4b4f      	ldr	r3, [pc, #316]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a4e      	ldr	r2, [pc, #312]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008de8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dee:	f7f8 fd1f 	bl	8001830 <HAL_GetTick>
 8008df2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008df4:	e008      	b.n	8008e08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008df6:	f7f8 fd1b 	bl	8001830 <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d901      	bls.n	8008e08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e086      	b.n	8008f16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e08:	4b45      	ldr	r3, [pc, #276]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1f0      	bne.n	8008df6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008e14:	4b42      	ldr	r3, [pc, #264]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e18:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	051b      	lsls	r3, r3, #20
 8008e22:	493f      	ldr	r1, [pc, #252]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	628b      	str	r3, [r1, #40]	@ 0x28
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	025b      	lsls	r3, r3, #9
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	431a      	orrs	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	041b      	lsls	r3, r3, #16
 8008e46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	061b      	lsls	r3, r3, #24
 8008e54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008e58:	4931      	ldr	r1, [pc, #196]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e5e:	4b30      	ldr	r3, [pc, #192]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	492d      	ldr	r1, [pc, #180]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e70:	4b2b      	ldr	r3, [pc, #172]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e74:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	4928      	ldr	r1, [pc, #160]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e82:	4b27      	ldr	r3, [pc, #156]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e86:	4a26      	ldr	r2, [pc, #152]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e8e:	4b24      	ldr	r3, [pc, #144]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e92:	4b24      	ldr	r3, [pc, #144]	@ (8008f24 <RCCEx_PLL3_Config+0x160>)
 8008e94:	4013      	ands	r3, r2
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	69d2      	ldr	r2, [r2, #28]
 8008e9a:	00d2      	lsls	r2, r2, #3
 8008e9c:	4920      	ldr	r1, [pc, #128]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008eac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d106      	bne.n	8008ec2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb8:	4a19      	ldr	r2, [pc, #100]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008eba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ec0:	e00f      	b.n	8008ee2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d106      	bne.n	8008ed6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008ec8:	4b15      	ldr	r3, [pc, #84]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ecc:	4a14      	ldr	r2, [pc, #80]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008ece:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ed4:	e005      	b.n	8008ee2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008ed6:	4b12      	ldr	r3, [pc, #72]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eda:	4a11      	ldr	r2, [pc, #68]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008edc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008eec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eee:	f7f8 fc9f 	bl	8001830 <HAL_GetTick>
 8008ef2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ef4:	e008      	b.n	8008f08 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ef6:	f7f8 fc9b 	bl	8001830 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d901      	bls.n	8008f08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e006      	b.n	8008f16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f08:	4b05      	ldr	r3, [pc, #20]	@ (8008f20 <RCCEx_PLL3_Config+0x15c>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d0f0      	beq.n	8008ef6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	58024400 	.word	0x58024400
 8008f24:	ffff0007 	.word	0xffff0007

08008f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e049      	b.n	8008fce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d106      	bne.n	8008f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7f8 f8e0 	bl	8001114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	3304      	adds	r3, #4
 8008f64:	4619      	mov	r1, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	f000 fbb0 	bl	80096cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d101      	bne.n	8008fe8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e049      	b.n	800907c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d106      	bne.n	8009002 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f841 	bl	8009084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2202      	movs	r2, #2
 8009006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	3304      	adds	r3, #4
 8009012:	4619      	mov	r1, r3
 8009014:	4610      	mov	r0, r2
 8009016:	f000 fb59 	bl	80096cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d109      	bne.n	80090bc <HAL_TIM_PWM_Start+0x24>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	bf14      	ite	ne
 80090b4:	2301      	movne	r3, #1
 80090b6:	2300      	moveq	r3, #0
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	e03c      	b.n	8009136 <HAL_TIM_PWM_Start+0x9e>
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b04      	cmp	r3, #4
 80090c0:	d109      	bne.n	80090d6 <HAL_TIM_PWM_Start+0x3e>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	bf14      	ite	ne
 80090ce:	2301      	movne	r3, #1
 80090d0:	2300      	moveq	r3, #0
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	e02f      	b.n	8009136 <HAL_TIM_PWM_Start+0x9e>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b08      	cmp	r3, #8
 80090da:	d109      	bne.n	80090f0 <HAL_TIM_PWM_Start+0x58>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	bf14      	ite	ne
 80090e8:	2301      	movne	r3, #1
 80090ea:	2300      	moveq	r3, #0
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	e022      	b.n	8009136 <HAL_TIM_PWM_Start+0x9e>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b0c      	cmp	r3, #12
 80090f4:	d109      	bne.n	800910a <HAL_TIM_PWM_Start+0x72>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b01      	cmp	r3, #1
 8009100:	bf14      	ite	ne
 8009102:	2301      	movne	r3, #1
 8009104:	2300      	moveq	r3, #0
 8009106:	b2db      	uxtb	r3, r3
 8009108:	e015      	b.n	8009136 <HAL_TIM_PWM_Start+0x9e>
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	2b10      	cmp	r3, #16
 800910e:	d109      	bne.n	8009124 <HAL_TIM_PWM_Start+0x8c>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b01      	cmp	r3, #1
 800911a:	bf14      	ite	ne
 800911c:	2301      	movne	r3, #1
 800911e:	2300      	moveq	r3, #0
 8009120:	b2db      	uxtb	r3, r3
 8009122:	e008      	b.n	8009136 <HAL_TIM_PWM_Start+0x9e>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800912a:	b2db      	uxtb	r3, r3
 800912c:	2b01      	cmp	r3, #1
 800912e:	bf14      	ite	ne
 8009130:	2301      	movne	r3, #1
 8009132:	2300      	moveq	r3, #0
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e0a1      	b.n	8009282 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d104      	bne.n	800914e <HAL_TIM_PWM_Start+0xb6>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800914c:	e023      	b.n	8009196 <HAL_TIM_PWM_Start+0xfe>
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b04      	cmp	r3, #4
 8009152:	d104      	bne.n	800915e <HAL_TIM_PWM_Start+0xc6>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800915c:	e01b      	b.n	8009196 <HAL_TIM_PWM_Start+0xfe>
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2b08      	cmp	r3, #8
 8009162:	d104      	bne.n	800916e <HAL_TIM_PWM_Start+0xd6>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2202      	movs	r2, #2
 8009168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800916c:	e013      	b.n	8009196 <HAL_TIM_PWM_Start+0xfe>
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	2b0c      	cmp	r3, #12
 8009172:	d104      	bne.n	800917e <HAL_TIM_PWM_Start+0xe6>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2202      	movs	r2, #2
 8009178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800917c:	e00b      	b.n	8009196 <HAL_TIM_PWM_Start+0xfe>
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b10      	cmp	r3, #16
 8009182:	d104      	bne.n	800918e <HAL_TIM_PWM_Start+0xf6>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2202      	movs	r2, #2
 8009188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800918c:	e003      	b.n	8009196 <HAL_TIM_PWM_Start+0xfe>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2202      	movs	r2, #2
 8009192:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2201      	movs	r2, #1
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 fea8 	bl	8009ef4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a38      	ldr	r2, [pc, #224]	@ (800928c <HAL_TIM_PWM_Start+0x1f4>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d013      	beq.n	80091d6 <HAL_TIM_PWM_Start+0x13e>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a37      	ldr	r2, [pc, #220]	@ (8009290 <HAL_TIM_PWM_Start+0x1f8>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d00e      	beq.n	80091d6 <HAL_TIM_PWM_Start+0x13e>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a35      	ldr	r2, [pc, #212]	@ (8009294 <HAL_TIM_PWM_Start+0x1fc>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d009      	beq.n	80091d6 <HAL_TIM_PWM_Start+0x13e>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a34      	ldr	r2, [pc, #208]	@ (8009298 <HAL_TIM_PWM_Start+0x200>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d004      	beq.n	80091d6 <HAL_TIM_PWM_Start+0x13e>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a32      	ldr	r2, [pc, #200]	@ (800929c <HAL_TIM_PWM_Start+0x204>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d101      	bne.n	80091da <HAL_TIM_PWM_Start+0x142>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e000      	b.n	80091dc <HAL_TIM_PWM_Start+0x144>
 80091da:	2300      	movs	r3, #0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d007      	beq.n	80091f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80091ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a25      	ldr	r2, [pc, #148]	@ (800928c <HAL_TIM_PWM_Start+0x1f4>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d022      	beq.n	8009240 <HAL_TIM_PWM_Start+0x1a8>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009202:	d01d      	beq.n	8009240 <HAL_TIM_PWM_Start+0x1a8>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a25      	ldr	r2, [pc, #148]	@ (80092a0 <HAL_TIM_PWM_Start+0x208>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d018      	beq.n	8009240 <HAL_TIM_PWM_Start+0x1a8>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a24      	ldr	r2, [pc, #144]	@ (80092a4 <HAL_TIM_PWM_Start+0x20c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d013      	beq.n	8009240 <HAL_TIM_PWM_Start+0x1a8>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a22      	ldr	r2, [pc, #136]	@ (80092a8 <HAL_TIM_PWM_Start+0x210>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d00e      	beq.n	8009240 <HAL_TIM_PWM_Start+0x1a8>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a1a      	ldr	r2, [pc, #104]	@ (8009290 <HAL_TIM_PWM_Start+0x1f8>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d009      	beq.n	8009240 <HAL_TIM_PWM_Start+0x1a8>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a1e      	ldr	r2, [pc, #120]	@ (80092ac <HAL_TIM_PWM_Start+0x214>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d004      	beq.n	8009240 <HAL_TIM_PWM_Start+0x1a8>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a16      	ldr	r2, [pc, #88]	@ (8009294 <HAL_TIM_PWM_Start+0x1fc>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d115      	bne.n	800926c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	689a      	ldr	r2, [r3, #8]
 8009246:	4b1a      	ldr	r3, [pc, #104]	@ (80092b0 <HAL_TIM_PWM_Start+0x218>)
 8009248:	4013      	ands	r3, r2
 800924a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b06      	cmp	r3, #6
 8009250:	d015      	beq.n	800927e <HAL_TIM_PWM_Start+0x1e6>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009258:	d011      	beq.n	800927e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f042 0201 	orr.w	r2, r2, #1
 8009268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800926a:	e008      	b.n	800927e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0201 	orr.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	e000      	b.n	8009280 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800927e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	40010000 	.word	0x40010000
 8009290:	40010400 	.word	0x40010400
 8009294:	40014000 	.word	0x40014000
 8009298:	40014400 	.word	0x40014400
 800929c:	40014800 	.word	0x40014800
 80092a0:	40000400 	.word	0x40000400
 80092a4:	40000800 	.word	0x40000800
 80092a8:	40000c00 	.word	0x40000c00
 80092ac:	40001800 	.word	0x40001800
 80092b0:	00010007 	.word	0x00010007

080092b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80092ce:	2302      	movs	r3, #2
 80092d0:	e0ff      	b.n	80094d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b14      	cmp	r3, #20
 80092de:	f200 80f0 	bhi.w	80094c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80092e2:	a201      	add	r2, pc, #4	@ (adr r2, 80092e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80092e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e8:	0800933d 	.word	0x0800933d
 80092ec:	080094c3 	.word	0x080094c3
 80092f0:	080094c3 	.word	0x080094c3
 80092f4:	080094c3 	.word	0x080094c3
 80092f8:	0800937d 	.word	0x0800937d
 80092fc:	080094c3 	.word	0x080094c3
 8009300:	080094c3 	.word	0x080094c3
 8009304:	080094c3 	.word	0x080094c3
 8009308:	080093bf 	.word	0x080093bf
 800930c:	080094c3 	.word	0x080094c3
 8009310:	080094c3 	.word	0x080094c3
 8009314:	080094c3 	.word	0x080094c3
 8009318:	080093ff 	.word	0x080093ff
 800931c:	080094c3 	.word	0x080094c3
 8009320:	080094c3 	.word	0x080094c3
 8009324:	080094c3 	.word	0x080094c3
 8009328:	08009441 	.word	0x08009441
 800932c:	080094c3 	.word	0x080094c3
 8009330:	080094c3 	.word	0x080094c3
 8009334:	080094c3 	.word	0x080094c3
 8009338:	08009481 	.word	0x08009481
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68b9      	ldr	r1, [r7, #8]
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fa62 	bl	800980c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699a      	ldr	r2, [r3, #24]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0208 	orr.w	r2, r2, #8
 8009356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	699a      	ldr	r2, [r3, #24]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f022 0204 	bic.w	r2, r2, #4
 8009366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6999      	ldr	r1, [r3, #24]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	691a      	ldr	r2, [r3, #16]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	619a      	str	r2, [r3, #24]
      break;
 800937a:	e0a5      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fad2 	bl	800992c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	699a      	ldr	r2, [r3, #24]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	699a      	ldr	r2, [r3, #24]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6999      	ldr	r1, [r3, #24]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	021a      	lsls	r2, r3, #8
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	619a      	str	r2, [r3, #24]
      break;
 80093bc:	e084      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68b9      	ldr	r1, [r7, #8]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fb3b 	bl	8009a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	69da      	ldr	r2, [r3, #28]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f042 0208 	orr.w	r2, r2, #8
 80093d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	69da      	ldr	r2, [r3, #28]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0204 	bic.w	r2, r2, #4
 80093e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69d9      	ldr	r1, [r3, #28]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	691a      	ldr	r2, [r3, #16]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	430a      	orrs	r2, r1
 80093fa:	61da      	str	r2, [r3, #28]
      break;
 80093fc:	e064      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fba3 	bl	8009b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	69da      	ldr	r2, [r3, #28]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	69da      	ldr	r2, [r3, #28]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	69d9      	ldr	r1, [r3, #28]
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	021a      	lsls	r2, r3, #8
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	61da      	str	r2, [r3, #28]
      break;
 800943e:	e043      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68b9      	ldr	r1, [r7, #8]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fbec 	bl	8009c24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0208 	orr.w	r2, r2, #8
 800945a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f022 0204 	bic.w	r2, r2, #4
 800946a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	691a      	ldr	r2, [r3, #16]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800947e:	e023      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68b9      	ldr	r1, [r7, #8]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fc30 	bl	8009cec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800949a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	021a      	lsls	r2, r3, #8
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80094c0:	e002      	b.n	80094c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	75fb      	strb	r3, [r7, #23]
      break;
 80094c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop

080094dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d101      	bne.n	80094f8 <HAL_TIM_ConfigClockSource+0x1c>
 80094f4:	2302      	movs	r3, #2
 80094f6:	e0dc      	b.n	80096b2 <HAL_TIM_ConfigClockSource+0x1d6>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2202      	movs	r2, #2
 8009504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	4b6a      	ldr	r3, [pc, #424]	@ (80096bc <HAL_TIM_ConfigClockSource+0x1e0>)
 8009514:	4013      	ands	r3, r2
 8009516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800951e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a64      	ldr	r2, [pc, #400]	@ (80096c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800952e:	4293      	cmp	r3, r2
 8009530:	f000 80a9 	beq.w	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 8009534:	4a62      	ldr	r2, [pc, #392]	@ (80096c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009536:	4293      	cmp	r3, r2
 8009538:	f200 80ae 	bhi.w	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 800953c:	4a61      	ldr	r2, [pc, #388]	@ (80096c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800953e:	4293      	cmp	r3, r2
 8009540:	f000 80a1 	beq.w	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 8009544:	4a5f      	ldr	r2, [pc, #380]	@ (80096c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009546:	4293      	cmp	r3, r2
 8009548:	f200 80a6 	bhi.w	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 800954c:	4a5e      	ldr	r2, [pc, #376]	@ (80096c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800954e:	4293      	cmp	r3, r2
 8009550:	f000 8099 	beq.w	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 8009554:	4a5c      	ldr	r2, [pc, #368]	@ (80096c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009556:	4293      	cmp	r3, r2
 8009558:	f200 809e 	bhi.w	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 800955c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009560:	f000 8091 	beq.w	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 8009564:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009568:	f200 8096 	bhi.w	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 800956c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009570:	f000 8089 	beq.w	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 8009574:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009578:	f200 808e 	bhi.w	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 800957c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009580:	d03e      	beq.n	8009600 <HAL_TIM_ConfigClockSource+0x124>
 8009582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009586:	f200 8087 	bhi.w	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 800958a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800958e:	f000 8086 	beq.w	800969e <HAL_TIM_ConfigClockSource+0x1c2>
 8009592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009596:	d87f      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 8009598:	2b70      	cmp	r3, #112	@ 0x70
 800959a:	d01a      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0xf6>
 800959c:	2b70      	cmp	r3, #112	@ 0x70
 800959e:	d87b      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 80095a0:	2b60      	cmp	r3, #96	@ 0x60
 80095a2:	d050      	beq.n	8009646 <HAL_TIM_ConfigClockSource+0x16a>
 80095a4:	2b60      	cmp	r3, #96	@ 0x60
 80095a6:	d877      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 80095a8:	2b50      	cmp	r3, #80	@ 0x50
 80095aa:	d03c      	beq.n	8009626 <HAL_TIM_ConfigClockSource+0x14a>
 80095ac:	2b50      	cmp	r3, #80	@ 0x50
 80095ae:	d873      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 80095b0:	2b40      	cmp	r3, #64	@ 0x40
 80095b2:	d058      	beq.n	8009666 <HAL_TIM_ConfigClockSource+0x18a>
 80095b4:	2b40      	cmp	r3, #64	@ 0x40
 80095b6:	d86f      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 80095b8:	2b30      	cmp	r3, #48	@ 0x30
 80095ba:	d064      	beq.n	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 80095bc:	2b30      	cmp	r3, #48	@ 0x30
 80095be:	d86b      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 80095c0:	2b20      	cmp	r3, #32
 80095c2:	d060      	beq.n	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 80095c4:	2b20      	cmp	r3, #32
 80095c6:	d867      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d05c      	beq.n	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 80095cc:	2b10      	cmp	r3, #16
 80095ce:	d05a      	beq.n	8009686 <HAL_TIM_ConfigClockSource+0x1aa>
 80095d0:	e062      	b.n	8009698 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80095e2:	f000 fc67 	bl	8009eb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80095f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	609a      	str	r2, [r3, #8]
      break;
 80095fe:	e04f      	b.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009610:	f000 fc50 	bl	8009eb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	689a      	ldr	r2, [r3, #8]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009622:	609a      	str	r2, [r3, #8]
      break;
 8009624:	e03c      	b.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009632:	461a      	mov	r2, r3
 8009634:	f000 fbc0 	bl	8009db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2150      	movs	r1, #80	@ 0x50
 800963e:	4618      	mov	r0, r3
 8009640:	f000 fc1a 	bl	8009e78 <TIM_ITRx_SetConfig>
      break;
 8009644:	e02c      	b.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009652:	461a      	mov	r2, r3
 8009654:	f000 fbdf 	bl	8009e16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2160      	movs	r1, #96	@ 0x60
 800965e:	4618      	mov	r0, r3
 8009660:	f000 fc0a 	bl	8009e78 <TIM_ITRx_SetConfig>
      break;
 8009664:	e01c      	b.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009672:	461a      	mov	r2, r3
 8009674:	f000 fba0 	bl	8009db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2140      	movs	r1, #64	@ 0x40
 800967e:	4618      	mov	r0, r3
 8009680:	f000 fbfa 	bl	8009e78 <TIM_ITRx_SetConfig>
      break;
 8009684:	e00c      	b.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4619      	mov	r1, r3
 8009690:	4610      	mov	r0, r2
 8009692:	f000 fbf1 	bl	8009e78 <TIM_ITRx_SetConfig>
      break;
 8009696:	e003      	b.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	73fb      	strb	r3, [r7, #15]
      break;
 800969c:	e000      	b.n	80096a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800969e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	ffceff88 	.word	0xffceff88
 80096c0:	00100040 	.word	0x00100040
 80096c4:	00100030 	.word	0x00100030
 80096c8:	00100020 	.word	0x00100020

080096cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a43      	ldr	r2, [pc, #268]	@ (80097ec <TIM_Base_SetConfig+0x120>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d013      	beq.n	800970c <TIM_Base_SetConfig+0x40>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ea:	d00f      	beq.n	800970c <TIM_Base_SetConfig+0x40>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a40      	ldr	r2, [pc, #256]	@ (80097f0 <TIM_Base_SetConfig+0x124>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d00b      	beq.n	800970c <TIM_Base_SetConfig+0x40>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a3f      	ldr	r2, [pc, #252]	@ (80097f4 <TIM_Base_SetConfig+0x128>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d007      	beq.n	800970c <TIM_Base_SetConfig+0x40>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a3e      	ldr	r2, [pc, #248]	@ (80097f8 <TIM_Base_SetConfig+0x12c>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d003      	beq.n	800970c <TIM_Base_SetConfig+0x40>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a3d      	ldr	r2, [pc, #244]	@ (80097fc <TIM_Base_SetConfig+0x130>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d108      	bne.n	800971e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	4313      	orrs	r3, r2
 800971c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a32      	ldr	r2, [pc, #200]	@ (80097ec <TIM_Base_SetConfig+0x120>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d01f      	beq.n	8009766 <TIM_Base_SetConfig+0x9a>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800972c:	d01b      	beq.n	8009766 <TIM_Base_SetConfig+0x9a>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a2f      	ldr	r2, [pc, #188]	@ (80097f0 <TIM_Base_SetConfig+0x124>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d017      	beq.n	8009766 <TIM_Base_SetConfig+0x9a>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a2e      	ldr	r2, [pc, #184]	@ (80097f4 <TIM_Base_SetConfig+0x128>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d013      	beq.n	8009766 <TIM_Base_SetConfig+0x9a>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a2d      	ldr	r2, [pc, #180]	@ (80097f8 <TIM_Base_SetConfig+0x12c>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d00f      	beq.n	8009766 <TIM_Base_SetConfig+0x9a>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a2c      	ldr	r2, [pc, #176]	@ (80097fc <TIM_Base_SetConfig+0x130>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d00b      	beq.n	8009766 <TIM_Base_SetConfig+0x9a>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a2b      	ldr	r2, [pc, #172]	@ (8009800 <TIM_Base_SetConfig+0x134>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d007      	beq.n	8009766 <TIM_Base_SetConfig+0x9a>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a2a      	ldr	r2, [pc, #168]	@ (8009804 <TIM_Base_SetConfig+0x138>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d003      	beq.n	8009766 <TIM_Base_SetConfig+0x9a>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a29      	ldr	r2, [pc, #164]	@ (8009808 <TIM_Base_SetConfig+0x13c>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d108      	bne.n	8009778 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800976c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	4313      	orrs	r3, r2
 8009776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	689a      	ldr	r2, [r3, #8]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a14      	ldr	r2, [pc, #80]	@ (80097ec <TIM_Base_SetConfig+0x120>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d00f      	beq.n	80097be <TIM_Base_SetConfig+0xf2>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a16      	ldr	r2, [pc, #88]	@ (80097fc <TIM_Base_SetConfig+0x130>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d00b      	beq.n	80097be <TIM_Base_SetConfig+0xf2>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a15      	ldr	r2, [pc, #84]	@ (8009800 <TIM_Base_SetConfig+0x134>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d007      	beq.n	80097be <TIM_Base_SetConfig+0xf2>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a14      	ldr	r2, [pc, #80]	@ (8009804 <TIM_Base_SetConfig+0x138>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d003      	beq.n	80097be <TIM_Base_SetConfig+0xf2>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a13      	ldr	r2, [pc, #76]	@ (8009808 <TIM_Base_SetConfig+0x13c>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d103      	bne.n	80097c6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	691a      	ldr	r2, [r3, #16]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f043 0204 	orr.w	r2, r3, #4
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	601a      	str	r2, [r3, #0]
}
 80097de:	bf00      	nop
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	40010000 	.word	0x40010000
 80097f0:	40000400 	.word	0x40000400
 80097f4:	40000800 	.word	0x40000800
 80097f8:	40000c00 	.word	0x40000c00
 80097fc:	40010400 	.word	0x40010400
 8009800:	40014000 	.word	0x40014000
 8009804:	40014400 	.word	0x40014400
 8009808:	40014800 	.word	0x40014800

0800980c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800980c:	b480      	push	{r7}
 800980e:	b087      	sub	sp, #28
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a1b      	ldr	r3, [r3, #32]
 8009820:	f023 0201 	bic.w	r2, r3, #1
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4b37      	ldr	r3, [pc, #220]	@ (8009914 <TIM_OC1_SetConfig+0x108>)
 8009838:	4013      	ands	r3, r2
 800983a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f023 0303 	bic.w	r3, r3, #3
 8009842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	4313      	orrs	r3, r2
 800984c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	f023 0302 	bic.w	r3, r3, #2
 8009854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	4313      	orrs	r3, r2
 800985e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a2d      	ldr	r2, [pc, #180]	@ (8009918 <TIM_OC1_SetConfig+0x10c>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d00f      	beq.n	8009888 <TIM_OC1_SetConfig+0x7c>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a2c      	ldr	r2, [pc, #176]	@ (800991c <TIM_OC1_SetConfig+0x110>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d00b      	beq.n	8009888 <TIM_OC1_SetConfig+0x7c>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a2b      	ldr	r2, [pc, #172]	@ (8009920 <TIM_OC1_SetConfig+0x114>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d007      	beq.n	8009888 <TIM_OC1_SetConfig+0x7c>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a2a      	ldr	r2, [pc, #168]	@ (8009924 <TIM_OC1_SetConfig+0x118>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d003      	beq.n	8009888 <TIM_OC1_SetConfig+0x7c>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a29      	ldr	r2, [pc, #164]	@ (8009928 <TIM_OC1_SetConfig+0x11c>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d10c      	bne.n	80098a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f023 0308 	bic.w	r3, r3, #8
 800988e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	4313      	orrs	r3, r2
 8009898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f023 0304 	bic.w	r3, r3, #4
 80098a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009918 <TIM_OC1_SetConfig+0x10c>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d00f      	beq.n	80098ca <TIM_OC1_SetConfig+0xbe>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a1b      	ldr	r2, [pc, #108]	@ (800991c <TIM_OC1_SetConfig+0x110>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d00b      	beq.n	80098ca <TIM_OC1_SetConfig+0xbe>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a1a      	ldr	r2, [pc, #104]	@ (8009920 <TIM_OC1_SetConfig+0x114>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d007      	beq.n	80098ca <TIM_OC1_SetConfig+0xbe>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a19      	ldr	r2, [pc, #100]	@ (8009924 <TIM_OC1_SetConfig+0x118>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d003      	beq.n	80098ca <TIM_OC1_SetConfig+0xbe>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a18      	ldr	r2, [pc, #96]	@ (8009928 <TIM_OC1_SetConfig+0x11c>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d111      	bne.n	80098ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80098d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	685a      	ldr	r2, [r3, #4]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	621a      	str	r2, [r3, #32]
}
 8009908:	bf00      	nop
 800990a:	371c      	adds	r7, #28
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	fffeff8f 	.word	0xfffeff8f
 8009918:	40010000 	.word	0x40010000
 800991c:	40010400 	.word	0x40010400
 8009920:	40014000 	.word	0x40014000
 8009924:	40014400 	.word	0x40014400
 8009928:	40014800 	.word	0x40014800

0800992c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800992c:	b480      	push	{r7}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a1b      	ldr	r3, [r3, #32]
 8009940:	f023 0210 	bic.w	r2, r3, #16
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	4b34      	ldr	r3, [pc, #208]	@ (8009a28 <TIM_OC2_SetConfig+0xfc>)
 8009958:	4013      	ands	r3, r2
 800995a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	021b      	lsls	r3, r3, #8
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	4313      	orrs	r3, r2
 800996e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	f023 0320 	bic.w	r3, r3, #32
 8009976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	011b      	lsls	r3, r3, #4
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	4313      	orrs	r3, r2
 8009982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a29      	ldr	r2, [pc, #164]	@ (8009a2c <TIM_OC2_SetConfig+0x100>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d003      	beq.n	8009994 <TIM_OC2_SetConfig+0x68>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a28      	ldr	r2, [pc, #160]	@ (8009a30 <TIM_OC2_SetConfig+0x104>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d10d      	bne.n	80099b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800999a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	011b      	lsls	r3, r3, #4
 80099a2:	697a      	ldr	r2, [r7, #20]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a1e      	ldr	r2, [pc, #120]	@ (8009a2c <TIM_OC2_SetConfig+0x100>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d00f      	beq.n	80099d8 <TIM_OC2_SetConfig+0xac>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a1d      	ldr	r2, [pc, #116]	@ (8009a30 <TIM_OC2_SetConfig+0x104>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d00b      	beq.n	80099d8 <TIM_OC2_SetConfig+0xac>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a1c      	ldr	r2, [pc, #112]	@ (8009a34 <TIM_OC2_SetConfig+0x108>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d007      	beq.n	80099d8 <TIM_OC2_SetConfig+0xac>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009a38 <TIM_OC2_SetConfig+0x10c>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d003      	beq.n	80099d8 <TIM_OC2_SetConfig+0xac>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a1a      	ldr	r2, [pc, #104]	@ (8009a3c <TIM_OC2_SetConfig+0x110>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d113      	bne.n	8009a00 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80099de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80099e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	685a      	ldr	r2, [r3, #4]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	621a      	str	r2, [r3, #32]
}
 8009a1a:	bf00      	nop
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	feff8fff 	.word	0xfeff8fff
 8009a2c:	40010000 	.word	0x40010000
 8009a30:	40010400 	.word	0x40010400
 8009a34:	40014000 	.word	0x40014000
 8009a38:	40014400 	.word	0x40014400
 8009a3c:	40014800 	.word	0x40014800

08009a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	4b33      	ldr	r3, [pc, #204]	@ (8009b38 <TIM_OC3_SetConfig+0xf8>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f023 0303 	bic.w	r3, r3, #3
 8009a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	021b      	lsls	r3, r3, #8
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a28      	ldr	r2, [pc, #160]	@ (8009b3c <TIM_OC3_SetConfig+0xfc>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d003      	beq.n	8009aa6 <TIM_OC3_SetConfig+0x66>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a27      	ldr	r2, [pc, #156]	@ (8009b40 <TIM_OC3_SetConfig+0x100>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d10d      	bne.n	8009ac2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	021b      	lsls	r3, r3, #8
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8009b3c <TIM_OC3_SetConfig+0xfc>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d00f      	beq.n	8009aea <TIM_OC3_SetConfig+0xaa>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a1c      	ldr	r2, [pc, #112]	@ (8009b40 <TIM_OC3_SetConfig+0x100>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d00b      	beq.n	8009aea <TIM_OC3_SetConfig+0xaa>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8009b44 <TIM_OC3_SetConfig+0x104>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d007      	beq.n	8009aea <TIM_OC3_SetConfig+0xaa>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a1a      	ldr	r2, [pc, #104]	@ (8009b48 <TIM_OC3_SetConfig+0x108>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d003      	beq.n	8009aea <TIM_OC3_SetConfig+0xaa>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a19      	ldr	r2, [pc, #100]	@ (8009b4c <TIM_OC3_SetConfig+0x10c>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d113      	bne.n	8009b12 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	695b      	ldr	r3, [r3, #20]
 8009afe:	011b      	lsls	r3, r3, #4
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	011b      	lsls	r3, r3, #4
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	621a      	str	r2, [r3, #32]
}
 8009b2c:	bf00      	nop
 8009b2e:	371c      	adds	r7, #28
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	fffeff8f 	.word	0xfffeff8f
 8009b3c:	40010000 	.word	0x40010000
 8009b40:	40010400 	.word	0x40010400
 8009b44:	40014000 	.word	0x40014000
 8009b48:	40014400 	.word	0x40014400
 8009b4c:	40014800 	.word	0x40014800

08009b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a1b      	ldr	r3, [r3, #32]
 8009b64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	69db      	ldr	r3, [r3, #28]
 8009b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	4b24      	ldr	r3, [pc, #144]	@ (8009c0c <TIM_OC4_SetConfig+0xbc>)
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	021b      	lsls	r3, r3, #8
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	031b      	lsls	r3, r3, #12
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a19      	ldr	r2, [pc, #100]	@ (8009c10 <TIM_OC4_SetConfig+0xc0>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d00f      	beq.n	8009bd0 <TIM_OC4_SetConfig+0x80>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a18      	ldr	r2, [pc, #96]	@ (8009c14 <TIM_OC4_SetConfig+0xc4>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d00b      	beq.n	8009bd0 <TIM_OC4_SetConfig+0x80>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a17      	ldr	r2, [pc, #92]	@ (8009c18 <TIM_OC4_SetConfig+0xc8>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d007      	beq.n	8009bd0 <TIM_OC4_SetConfig+0x80>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a16      	ldr	r2, [pc, #88]	@ (8009c1c <TIM_OC4_SetConfig+0xcc>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d003      	beq.n	8009bd0 <TIM_OC4_SetConfig+0x80>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a15      	ldr	r2, [pc, #84]	@ (8009c20 <TIM_OC4_SetConfig+0xd0>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d109      	bne.n	8009be4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009bd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	019b      	lsls	r3, r3, #6
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	621a      	str	r2, [r3, #32]
}
 8009bfe:	bf00      	nop
 8009c00:	371c      	adds	r7, #28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	feff8fff 	.word	0xfeff8fff
 8009c10:	40010000 	.word	0x40010000
 8009c14:	40010400 	.word	0x40010400
 8009c18:	40014000 	.word	0x40014000
 8009c1c:	40014400 	.word	0x40014400
 8009c20:	40014800 	.word	0x40014800

08009c24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a1b      	ldr	r3, [r3, #32]
 8009c38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	4b21      	ldr	r3, [pc, #132]	@ (8009cd4 <TIM_OC5_SetConfig+0xb0>)
 8009c50:	4013      	ands	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009c64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	041b      	lsls	r3, r3, #16
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a18      	ldr	r2, [pc, #96]	@ (8009cd8 <TIM_OC5_SetConfig+0xb4>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d00f      	beq.n	8009c9a <TIM_OC5_SetConfig+0x76>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a17      	ldr	r2, [pc, #92]	@ (8009cdc <TIM_OC5_SetConfig+0xb8>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d00b      	beq.n	8009c9a <TIM_OC5_SetConfig+0x76>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a16      	ldr	r2, [pc, #88]	@ (8009ce0 <TIM_OC5_SetConfig+0xbc>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d007      	beq.n	8009c9a <TIM_OC5_SetConfig+0x76>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a15      	ldr	r2, [pc, #84]	@ (8009ce4 <TIM_OC5_SetConfig+0xc0>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d003      	beq.n	8009c9a <TIM_OC5_SetConfig+0x76>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a14      	ldr	r2, [pc, #80]	@ (8009ce8 <TIM_OC5_SetConfig+0xc4>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d109      	bne.n	8009cae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ca0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	021b      	lsls	r3, r3, #8
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	621a      	str	r2, [r3, #32]
}
 8009cc8:	bf00      	nop
 8009cca:	371c      	adds	r7, #28
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	fffeff8f 	.word	0xfffeff8f
 8009cd8:	40010000 	.word	0x40010000
 8009cdc:	40010400 	.word	0x40010400
 8009ce0:	40014000 	.word	0x40014000
 8009ce4:	40014400 	.word	0x40014400
 8009ce8:	40014800 	.word	0x40014800

08009cec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a1b      	ldr	r3, [r3, #32]
 8009d00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	4b22      	ldr	r3, [pc, #136]	@ (8009da0 <TIM_OC6_SetConfig+0xb4>)
 8009d18:	4013      	ands	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	021b      	lsls	r3, r3, #8
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	051b      	lsls	r3, r3, #20
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a19      	ldr	r2, [pc, #100]	@ (8009da4 <TIM_OC6_SetConfig+0xb8>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d00f      	beq.n	8009d64 <TIM_OC6_SetConfig+0x78>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a18      	ldr	r2, [pc, #96]	@ (8009da8 <TIM_OC6_SetConfig+0xbc>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d00b      	beq.n	8009d64 <TIM_OC6_SetConfig+0x78>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a17      	ldr	r2, [pc, #92]	@ (8009dac <TIM_OC6_SetConfig+0xc0>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d007      	beq.n	8009d64 <TIM_OC6_SetConfig+0x78>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a16      	ldr	r2, [pc, #88]	@ (8009db0 <TIM_OC6_SetConfig+0xc4>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d003      	beq.n	8009d64 <TIM_OC6_SetConfig+0x78>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a15      	ldr	r2, [pc, #84]	@ (8009db4 <TIM_OC6_SetConfig+0xc8>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d109      	bne.n	8009d78 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	029b      	lsls	r3, r3, #10
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	621a      	str	r2, [r3, #32]
}
 8009d92:	bf00      	nop
 8009d94:	371c      	adds	r7, #28
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	feff8fff 	.word	0xfeff8fff
 8009da4:	40010000 	.word	0x40010000
 8009da8:	40010400 	.word	0x40010400
 8009dac:	40014000 	.word	0x40014000
 8009db0:	40014400 	.word	0x40014400
 8009db4:	40014800 	.word	0x40014800

08009db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6a1b      	ldr	r3, [r3, #32]
 8009dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	f023 0201 	bic.w	r2, r3, #1
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	011b      	lsls	r3, r3, #4
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f023 030a 	bic.w	r3, r3, #10
 8009df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009df6:	697a      	ldr	r2, [r7, #20]
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	621a      	str	r2, [r3, #32]
}
 8009e0a:	bf00      	nop
 8009e0c:	371c      	adds	r7, #28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b087      	sub	sp, #28
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	60f8      	str	r0, [r7, #12]
 8009e1e:	60b9      	str	r1, [r7, #8]
 8009e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	f023 0210 	bic.w	r2, r3, #16
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	031b      	lsls	r3, r3, #12
 8009e46:	693a      	ldr	r2, [r7, #16]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009e52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	011b      	lsls	r3, r3, #4
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	621a      	str	r2, [r3, #32]
}
 8009e6a:	bf00      	nop
 8009e6c:	371c      	adds	r7, #28
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
	...

08009e78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4b09      	ldr	r3, [pc, #36]	@ (8009eb0 <TIM_ITRx_SetConfig+0x38>)
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	f043 0307 	orr.w	r3, r3, #7
 8009e9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	609a      	str	r2, [r3, #8]
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	ffcfff8f 	.word	0xffcfff8f

08009eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b087      	sub	sp, #28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
 8009ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	021a      	lsls	r2, r3, #8
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	697a      	ldr	r2, [r7, #20]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	609a      	str	r2, [r3, #8]
}
 8009ee8:	bf00      	nop
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b087      	sub	sp, #28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	f003 031f 	and.w	r3, r3, #31
 8009f06:	2201      	movs	r2, #1
 8009f08:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a1a      	ldr	r2, [r3, #32]
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	43db      	mvns	r3, r3
 8009f16:	401a      	ands	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6a1a      	ldr	r2, [r3, #32]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f003 031f 	and.w	r3, r3, #31
 8009f26:	6879      	ldr	r1, [r7, #4]
 8009f28:	fa01 f303 	lsl.w	r3, r1, r3
 8009f2c:	431a      	orrs	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	621a      	str	r2, [r3, #32]
}
 8009f32:	bf00      	nop
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
	...

08009f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d101      	bne.n	8009f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f54:	2302      	movs	r3, #2
 8009f56:	e06d      	b.n	800a034 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2202      	movs	r2, #2
 8009f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a30      	ldr	r2, [pc, #192]	@ (800a040 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d004      	beq.n	8009f8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a2f      	ldr	r2, [pc, #188]	@ (800a044 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d108      	bne.n	8009f9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009f92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a20      	ldr	r2, [pc, #128]	@ (800a040 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d022      	beq.n	800a008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fca:	d01d      	beq.n	800a008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a1d      	ldr	r2, [pc, #116]	@ (800a048 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d018      	beq.n	800a008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a1c      	ldr	r2, [pc, #112]	@ (800a04c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d013      	beq.n	800a008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a1a      	ldr	r2, [pc, #104]	@ (800a050 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d00e      	beq.n	800a008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a15      	ldr	r2, [pc, #84]	@ (800a044 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d009      	beq.n	800a008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a16      	ldr	r2, [pc, #88]	@ (800a054 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d004      	beq.n	800a008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a15      	ldr	r2, [pc, #84]	@ (800a058 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d10c      	bne.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a00e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	4313      	orrs	r3, r2
 800a018:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68ba      	ldr	r2, [r7, #8]
 800a020:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	40010000 	.word	0x40010000
 800a044:	40010400 	.word	0x40010400
 800a048:	40000400 	.word	0x40000400
 800a04c:	40000800 	.word	0x40000800
 800a050:	40000c00 	.word	0x40000c00
 800a054:	40001800 	.word	0x40001800
 800a058:	40014000 	.word	0x40014000

0800a05c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a070:	2b01      	cmp	r3, #1
 800a072:	d101      	bne.n	800a078 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a074:	2302      	movs	r3, #2
 800a076:	e073      	b.n	800a160 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	4313      	orrs	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	699b      	ldr	r3, [r3, #24]
 800a0ec:	041b      	lsls	r3, r3, #16
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	69db      	ldr	r3, [r3, #28]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a19      	ldr	r2, [pc, #100]	@ (800a16c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d004      	beq.n	800a114 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a18      	ldr	r2, [pc, #96]	@ (800a170 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d11c      	bne.n	800a14e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a11e:	051b      	lsls	r3, r3, #20
 800a120:	4313      	orrs	r3, r2
 800a122:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	4313      	orrs	r3, r2
 800a130:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a13c:	4313      	orrs	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a14a:	4313      	orrs	r3, r2
 800a14c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	40010000 	.word	0x40010000
 800a170:	40010400 	.word	0x40010400

0800a174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e042      	b.n	800a20c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d106      	bne.n	800a19e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f83b 	bl	800a214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2224      	movs	r2, #36	@ 0x24
 800a1a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f022 0201 	bic.w	r2, r2, #1
 800a1b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d002      	beq.n	800a1c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 ff2c 	bl	800b01c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f8bd 	bl	800a344 <UART_SetConfig>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d101      	bne.n	800a1d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e01b      	b.n	800a20c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	685a      	ldr	r2, [r3, #4]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a1e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	689a      	ldr	r2, [r3, #8]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a1f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f042 0201 	orr.w	r2, r2, #1
 800a202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 ffab 	bl	800b160 <UART_CheckIdleState>
 800a20a:	4603      	mov	r3, r0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b08a      	sub	sp, #40	@ 0x28
 800a22c:	af02      	add	r7, sp, #8
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	603b      	str	r3, [r7, #0]
 800a234:	4613      	mov	r3, r2
 800a236:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a23e:	2b20      	cmp	r3, #32
 800a240:	d17b      	bne.n	800a33a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <HAL_UART_Transmit+0x26>
 800a248:	88fb      	ldrh	r3, [r7, #6]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d101      	bne.n	800a252 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e074      	b.n	800a33c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2221      	movs	r2, #33	@ 0x21
 800a25e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a262:	f7f7 fae5 	bl	8001830 <HAL_GetTick>
 800a266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	88fa      	ldrh	r2, [r7, #6]
 800a26c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	88fa      	ldrh	r2, [r7, #6]
 800a274:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a280:	d108      	bne.n	800a294 <HAL_UART_Transmit+0x6c>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d104      	bne.n	800a294 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	e003      	b.n	800a29c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a298:	2300      	movs	r3, #0
 800a29a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a29c:	e030      	b.n	800a300 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2180      	movs	r1, #128	@ 0x80
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f001 f803 	bl	800b2b4 <UART_WaitOnFlagUntilTimeout>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d005      	beq.n	800a2c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2220      	movs	r2, #32
 800a2b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e03d      	b.n	800a33c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10b      	bne.n	800a2de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	881b      	ldrh	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	3302      	adds	r3, #2
 800a2da:	61bb      	str	r3, [r7, #24]
 800a2dc:	e007      	b.n	800a2ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	781a      	ldrb	r2, [r3, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a306:	b29b      	uxth	r3, r3
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1c8      	bne.n	800a29e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	2200      	movs	r2, #0
 800a314:	2140      	movs	r1, #64	@ 0x40
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f000 ffcc 	bl	800b2b4 <UART_WaitOnFlagUntilTimeout>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d005      	beq.n	800a32e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2220      	movs	r2, #32
 800a326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a32a:	2303      	movs	r3, #3
 800a32c:	e006      	b.n	800a33c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2220      	movs	r2, #32
 800a332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	e000      	b.n	800a33c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a33a:	2302      	movs	r3, #2
  }
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3720      	adds	r7, #32
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a348:	b092      	sub	sp, #72	@ 0x48
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a34e:	2300      	movs	r3, #0
 800a350:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	689a      	ldr	r2, [r3, #8]
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	431a      	orrs	r2, r3
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	695b      	ldr	r3, [r3, #20]
 800a362:	431a      	orrs	r2, r3
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	69db      	ldr	r3, [r3, #28]
 800a368:	4313      	orrs	r3, r2
 800a36a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	4bbe      	ldr	r3, [pc, #760]	@ (800a66c <UART_SetConfig+0x328>)
 800a374:	4013      	ands	r3, r2
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	6812      	ldr	r2, [r2, #0]
 800a37a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a37c:	430b      	orrs	r3, r1
 800a37e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	68da      	ldr	r2, [r3, #12]
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	430a      	orrs	r2, r1
 800a394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4ab3      	ldr	r2, [pc, #716]	@ (800a670 <UART_SetConfig+0x32c>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d004      	beq.n	800a3b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689a      	ldr	r2, [r3, #8]
 800a3b6:	4baf      	ldr	r3, [pc, #700]	@ (800a674 <UART_SetConfig+0x330>)
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	6812      	ldr	r2, [r2, #0]
 800a3be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a3c0:	430b      	orrs	r3, r1
 800a3c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ca:	f023 010f 	bic.w	r1, r3, #15
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	430a      	orrs	r2, r1
 800a3d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4aa6      	ldr	r2, [pc, #664]	@ (800a678 <UART_SetConfig+0x334>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d177      	bne.n	800a4d4 <UART_SetConfig+0x190>
 800a3e4:	4ba5      	ldr	r3, [pc, #660]	@ (800a67c <UART_SetConfig+0x338>)
 800a3e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a3ec:	2b28      	cmp	r3, #40	@ 0x28
 800a3ee:	d86d      	bhi.n	800a4cc <UART_SetConfig+0x188>
 800a3f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f8 <UART_SetConfig+0xb4>)
 800a3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f6:	bf00      	nop
 800a3f8:	0800a49d 	.word	0x0800a49d
 800a3fc:	0800a4cd 	.word	0x0800a4cd
 800a400:	0800a4cd 	.word	0x0800a4cd
 800a404:	0800a4cd 	.word	0x0800a4cd
 800a408:	0800a4cd 	.word	0x0800a4cd
 800a40c:	0800a4cd 	.word	0x0800a4cd
 800a410:	0800a4cd 	.word	0x0800a4cd
 800a414:	0800a4cd 	.word	0x0800a4cd
 800a418:	0800a4a5 	.word	0x0800a4a5
 800a41c:	0800a4cd 	.word	0x0800a4cd
 800a420:	0800a4cd 	.word	0x0800a4cd
 800a424:	0800a4cd 	.word	0x0800a4cd
 800a428:	0800a4cd 	.word	0x0800a4cd
 800a42c:	0800a4cd 	.word	0x0800a4cd
 800a430:	0800a4cd 	.word	0x0800a4cd
 800a434:	0800a4cd 	.word	0x0800a4cd
 800a438:	0800a4ad 	.word	0x0800a4ad
 800a43c:	0800a4cd 	.word	0x0800a4cd
 800a440:	0800a4cd 	.word	0x0800a4cd
 800a444:	0800a4cd 	.word	0x0800a4cd
 800a448:	0800a4cd 	.word	0x0800a4cd
 800a44c:	0800a4cd 	.word	0x0800a4cd
 800a450:	0800a4cd 	.word	0x0800a4cd
 800a454:	0800a4cd 	.word	0x0800a4cd
 800a458:	0800a4b5 	.word	0x0800a4b5
 800a45c:	0800a4cd 	.word	0x0800a4cd
 800a460:	0800a4cd 	.word	0x0800a4cd
 800a464:	0800a4cd 	.word	0x0800a4cd
 800a468:	0800a4cd 	.word	0x0800a4cd
 800a46c:	0800a4cd 	.word	0x0800a4cd
 800a470:	0800a4cd 	.word	0x0800a4cd
 800a474:	0800a4cd 	.word	0x0800a4cd
 800a478:	0800a4bd 	.word	0x0800a4bd
 800a47c:	0800a4cd 	.word	0x0800a4cd
 800a480:	0800a4cd 	.word	0x0800a4cd
 800a484:	0800a4cd 	.word	0x0800a4cd
 800a488:	0800a4cd 	.word	0x0800a4cd
 800a48c:	0800a4cd 	.word	0x0800a4cd
 800a490:	0800a4cd 	.word	0x0800a4cd
 800a494:	0800a4cd 	.word	0x0800a4cd
 800a498:	0800a4c5 	.word	0x0800a4c5
 800a49c:	2301      	movs	r3, #1
 800a49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a2:	e326      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a4a4:	2304      	movs	r3, #4
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4aa:	e322      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a4ac:	2308      	movs	r3, #8
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b2:	e31e      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a4b4:	2310      	movs	r3, #16
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ba:	e31a      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a4bc:	2320      	movs	r3, #32
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c2:	e316      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a4c4:	2340      	movs	r3, #64	@ 0x40
 800a4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ca:	e312      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a4cc:	2380      	movs	r3, #128	@ 0x80
 800a4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d2:	e30e      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a69      	ldr	r2, [pc, #420]	@ (800a680 <UART_SetConfig+0x33c>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d130      	bne.n	800a540 <UART_SetConfig+0x1fc>
 800a4de:	4b67      	ldr	r3, [pc, #412]	@ (800a67c <UART_SetConfig+0x338>)
 800a4e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4e2:	f003 0307 	and.w	r3, r3, #7
 800a4e6:	2b05      	cmp	r3, #5
 800a4e8:	d826      	bhi.n	800a538 <UART_SetConfig+0x1f4>
 800a4ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a4f0 <UART_SetConfig+0x1ac>)
 800a4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f0:	0800a509 	.word	0x0800a509
 800a4f4:	0800a511 	.word	0x0800a511
 800a4f8:	0800a519 	.word	0x0800a519
 800a4fc:	0800a521 	.word	0x0800a521
 800a500:	0800a529 	.word	0x0800a529
 800a504:	0800a531 	.word	0x0800a531
 800a508:	2300      	movs	r3, #0
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50e:	e2f0      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a510:	2304      	movs	r3, #4
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a516:	e2ec      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a518:	2308      	movs	r3, #8
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51e:	e2e8      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a520:	2310      	movs	r3, #16
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a526:	e2e4      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a528:	2320      	movs	r3, #32
 800a52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52e:	e2e0      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a530:	2340      	movs	r3, #64	@ 0x40
 800a532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a536:	e2dc      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a538:	2380      	movs	r3, #128	@ 0x80
 800a53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a53e:	e2d8      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a4f      	ldr	r2, [pc, #316]	@ (800a684 <UART_SetConfig+0x340>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d130      	bne.n	800a5ac <UART_SetConfig+0x268>
 800a54a:	4b4c      	ldr	r3, [pc, #304]	@ (800a67c <UART_SetConfig+0x338>)
 800a54c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a54e:	f003 0307 	and.w	r3, r3, #7
 800a552:	2b05      	cmp	r3, #5
 800a554:	d826      	bhi.n	800a5a4 <UART_SetConfig+0x260>
 800a556:	a201      	add	r2, pc, #4	@ (adr r2, 800a55c <UART_SetConfig+0x218>)
 800a558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55c:	0800a575 	.word	0x0800a575
 800a560:	0800a57d 	.word	0x0800a57d
 800a564:	0800a585 	.word	0x0800a585
 800a568:	0800a58d 	.word	0x0800a58d
 800a56c:	0800a595 	.word	0x0800a595
 800a570:	0800a59d 	.word	0x0800a59d
 800a574:	2300      	movs	r3, #0
 800a576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57a:	e2ba      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a57c:	2304      	movs	r3, #4
 800a57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a582:	e2b6      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a584:	2308      	movs	r3, #8
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58a:	e2b2      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a58c:	2310      	movs	r3, #16
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a592:	e2ae      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a594:	2320      	movs	r3, #32
 800a596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59a:	e2aa      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a59c:	2340      	movs	r3, #64	@ 0x40
 800a59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5a2:	e2a6      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a5a4:	2380      	movs	r3, #128	@ 0x80
 800a5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5aa:	e2a2      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a35      	ldr	r2, [pc, #212]	@ (800a688 <UART_SetConfig+0x344>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d130      	bne.n	800a618 <UART_SetConfig+0x2d4>
 800a5b6:	4b31      	ldr	r3, [pc, #196]	@ (800a67c <UART_SetConfig+0x338>)
 800a5b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ba:	f003 0307 	and.w	r3, r3, #7
 800a5be:	2b05      	cmp	r3, #5
 800a5c0:	d826      	bhi.n	800a610 <UART_SetConfig+0x2cc>
 800a5c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5c8 <UART_SetConfig+0x284>)
 800a5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c8:	0800a5e1 	.word	0x0800a5e1
 800a5cc:	0800a5e9 	.word	0x0800a5e9
 800a5d0:	0800a5f1 	.word	0x0800a5f1
 800a5d4:	0800a5f9 	.word	0x0800a5f9
 800a5d8:	0800a601 	.word	0x0800a601
 800a5dc:	0800a609 	.word	0x0800a609
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e6:	e284      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a5e8:	2304      	movs	r3, #4
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ee:	e280      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a5f0:	2308      	movs	r3, #8
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f6:	e27c      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a5f8:	2310      	movs	r3, #16
 800a5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fe:	e278      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a600:	2320      	movs	r3, #32
 800a602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a606:	e274      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a608:	2340      	movs	r3, #64	@ 0x40
 800a60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a60e:	e270      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a610:	2380      	movs	r3, #128	@ 0x80
 800a612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a616:	e26c      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a1b      	ldr	r2, [pc, #108]	@ (800a68c <UART_SetConfig+0x348>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d142      	bne.n	800a6a8 <UART_SetConfig+0x364>
 800a622:	4b16      	ldr	r3, [pc, #88]	@ (800a67c <UART_SetConfig+0x338>)
 800a624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a626:	f003 0307 	and.w	r3, r3, #7
 800a62a:	2b05      	cmp	r3, #5
 800a62c:	d838      	bhi.n	800a6a0 <UART_SetConfig+0x35c>
 800a62e:	a201      	add	r2, pc, #4	@ (adr r2, 800a634 <UART_SetConfig+0x2f0>)
 800a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a634:	0800a64d 	.word	0x0800a64d
 800a638:	0800a655 	.word	0x0800a655
 800a63c:	0800a65d 	.word	0x0800a65d
 800a640:	0800a665 	.word	0x0800a665
 800a644:	0800a691 	.word	0x0800a691
 800a648:	0800a699 	.word	0x0800a699
 800a64c:	2300      	movs	r3, #0
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a652:	e24e      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a654:	2304      	movs	r3, #4
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65a:	e24a      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a65c:	2308      	movs	r3, #8
 800a65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a662:	e246      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a664:	2310      	movs	r3, #16
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66a:	e242      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a66c:	cfff69f3 	.word	0xcfff69f3
 800a670:	58000c00 	.word	0x58000c00
 800a674:	11fff4ff 	.word	0x11fff4ff
 800a678:	40011000 	.word	0x40011000
 800a67c:	58024400 	.word	0x58024400
 800a680:	40004400 	.word	0x40004400
 800a684:	40004800 	.word	0x40004800
 800a688:	40004c00 	.word	0x40004c00
 800a68c:	40005000 	.word	0x40005000
 800a690:	2320      	movs	r3, #32
 800a692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a696:	e22c      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a698:	2340      	movs	r3, #64	@ 0x40
 800a69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69e:	e228      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a6a0:	2380      	movs	r3, #128	@ 0x80
 800a6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6a6:	e224      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4ab1      	ldr	r2, [pc, #708]	@ (800a974 <UART_SetConfig+0x630>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d176      	bne.n	800a7a0 <UART_SetConfig+0x45c>
 800a6b2:	4bb1      	ldr	r3, [pc, #708]	@ (800a978 <UART_SetConfig+0x634>)
 800a6b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6ba:	2b28      	cmp	r3, #40	@ 0x28
 800a6bc:	d86c      	bhi.n	800a798 <UART_SetConfig+0x454>
 800a6be:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c4 <UART_SetConfig+0x380>)
 800a6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c4:	0800a769 	.word	0x0800a769
 800a6c8:	0800a799 	.word	0x0800a799
 800a6cc:	0800a799 	.word	0x0800a799
 800a6d0:	0800a799 	.word	0x0800a799
 800a6d4:	0800a799 	.word	0x0800a799
 800a6d8:	0800a799 	.word	0x0800a799
 800a6dc:	0800a799 	.word	0x0800a799
 800a6e0:	0800a799 	.word	0x0800a799
 800a6e4:	0800a771 	.word	0x0800a771
 800a6e8:	0800a799 	.word	0x0800a799
 800a6ec:	0800a799 	.word	0x0800a799
 800a6f0:	0800a799 	.word	0x0800a799
 800a6f4:	0800a799 	.word	0x0800a799
 800a6f8:	0800a799 	.word	0x0800a799
 800a6fc:	0800a799 	.word	0x0800a799
 800a700:	0800a799 	.word	0x0800a799
 800a704:	0800a779 	.word	0x0800a779
 800a708:	0800a799 	.word	0x0800a799
 800a70c:	0800a799 	.word	0x0800a799
 800a710:	0800a799 	.word	0x0800a799
 800a714:	0800a799 	.word	0x0800a799
 800a718:	0800a799 	.word	0x0800a799
 800a71c:	0800a799 	.word	0x0800a799
 800a720:	0800a799 	.word	0x0800a799
 800a724:	0800a781 	.word	0x0800a781
 800a728:	0800a799 	.word	0x0800a799
 800a72c:	0800a799 	.word	0x0800a799
 800a730:	0800a799 	.word	0x0800a799
 800a734:	0800a799 	.word	0x0800a799
 800a738:	0800a799 	.word	0x0800a799
 800a73c:	0800a799 	.word	0x0800a799
 800a740:	0800a799 	.word	0x0800a799
 800a744:	0800a789 	.word	0x0800a789
 800a748:	0800a799 	.word	0x0800a799
 800a74c:	0800a799 	.word	0x0800a799
 800a750:	0800a799 	.word	0x0800a799
 800a754:	0800a799 	.word	0x0800a799
 800a758:	0800a799 	.word	0x0800a799
 800a75c:	0800a799 	.word	0x0800a799
 800a760:	0800a799 	.word	0x0800a799
 800a764:	0800a791 	.word	0x0800a791
 800a768:	2301      	movs	r3, #1
 800a76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76e:	e1c0      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a770:	2304      	movs	r3, #4
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a776:	e1bc      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a778:	2308      	movs	r3, #8
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77e:	e1b8      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a780:	2310      	movs	r3, #16
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a786:	e1b4      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a788:	2320      	movs	r3, #32
 800a78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78e:	e1b0      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a790:	2340      	movs	r3, #64	@ 0x40
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a796:	e1ac      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a798:	2380      	movs	r3, #128	@ 0x80
 800a79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a79e:	e1a8      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a75      	ldr	r2, [pc, #468]	@ (800a97c <UART_SetConfig+0x638>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d130      	bne.n	800a80c <UART_SetConfig+0x4c8>
 800a7aa:	4b73      	ldr	r3, [pc, #460]	@ (800a978 <UART_SetConfig+0x634>)
 800a7ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ae:	f003 0307 	and.w	r3, r3, #7
 800a7b2:	2b05      	cmp	r3, #5
 800a7b4:	d826      	bhi.n	800a804 <UART_SetConfig+0x4c0>
 800a7b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7bc <UART_SetConfig+0x478>)
 800a7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7bc:	0800a7d5 	.word	0x0800a7d5
 800a7c0:	0800a7dd 	.word	0x0800a7dd
 800a7c4:	0800a7e5 	.word	0x0800a7e5
 800a7c8:	0800a7ed 	.word	0x0800a7ed
 800a7cc:	0800a7f5 	.word	0x0800a7f5
 800a7d0:	0800a7fd 	.word	0x0800a7fd
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7da:	e18a      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a7dc:	2304      	movs	r3, #4
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e2:	e186      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a7e4:	2308      	movs	r3, #8
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ea:	e182      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a7ec:	2310      	movs	r3, #16
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f2:	e17e      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a7f4:	2320      	movs	r3, #32
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fa:	e17a      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a7fc:	2340      	movs	r3, #64	@ 0x40
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a802:	e176      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a804:	2380      	movs	r3, #128	@ 0x80
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80a:	e172      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a5b      	ldr	r2, [pc, #364]	@ (800a980 <UART_SetConfig+0x63c>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d130      	bne.n	800a878 <UART_SetConfig+0x534>
 800a816:	4b58      	ldr	r3, [pc, #352]	@ (800a978 <UART_SetConfig+0x634>)
 800a818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a81a:	f003 0307 	and.w	r3, r3, #7
 800a81e:	2b05      	cmp	r3, #5
 800a820:	d826      	bhi.n	800a870 <UART_SetConfig+0x52c>
 800a822:	a201      	add	r2, pc, #4	@ (adr r2, 800a828 <UART_SetConfig+0x4e4>)
 800a824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a828:	0800a841 	.word	0x0800a841
 800a82c:	0800a849 	.word	0x0800a849
 800a830:	0800a851 	.word	0x0800a851
 800a834:	0800a859 	.word	0x0800a859
 800a838:	0800a861 	.word	0x0800a861
 800a83c:	0800a869 	.word	0x0800a869
 800a840:	2300      	movs	r3, #0
 800a842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a846:	e154      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a848:	2304      	movs	r3, #4
 800a84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84e:	e150      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a850:	2308      	movs	r3, #8
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a856:	e14c      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a858:	2310      	movs	r3, #16
 800a85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85e:	e148      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a860:	2320      	movs	r3, #32
 800a862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a866:	e144      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a868:	2340      	movs	r3, #64	@ 0x40
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86e:	e140      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a870:	2380      	movs	r3, #128	@ 0x80
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a876:	e13c      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a41      	ldr	r2, [pc, #260]	@ (800a984 <UART_SetConfig+0x640>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	f040 8082 	bne.w	800a988 <UART_SetConfig+0x644>
 800a884:	4b3c      	ldr	r3, [pc, #240]	@ (800a978 <UART_SetConfig+0x634>)
 800a886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a888:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a88c:	2b28      	cmp	r3, #40	@ 0x28
 800a88e:	d86d      	bhi.n	800a96c <UART_SetConfig+0x628>
 800a890:	a201      	add	r2, pc, #4	@ (adr r2, 800a898 <UART_SetConfig+0x554>)
 800a892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a896:	bf00      	nop
 800a898:	0800a93d 	.word	0x0800a93d
 800a89c:	0800a96d 	.word	0x0800a96d
 800a8a0:	0800a96d 	.word	0x0800a96d
 800a8a4:	0800a96d 	.word	0x0800a96d
 800a8a8:	0800a96d 	.word	0x0800a96d
 800a8ac:	0800a96d 	.word	0x0800a96d
 800a8b0:	0800a96d 	.word	0x0800a96d
 800a8b4:	0800a96d 	.word	0x0800a96d
 800a8b8:	0800a945 	.word	0x0800a945
 800a8bc:	0800a96d 	.word	0x0800a96d
 800a8c0:	0800a96d 	.word	0x0800a96d
 800a8c4:	0800a96d 	.word	0x0800a96d
 800a8c8:	0800a96d 	.word	0x0800a96d
 800a8cc:	0800a96d 	.word	0x0800a96d
 800a8d0:	0800a96d 	.word	0x0800a96d
 800a8d4:	0800a96d 	.word	0x0800a96d
 800a8d8:	0800a94d 	.word	0x0800a94d
 800a8dc:	0800a96d 	.word	0x0800a96d
 800a8e0:	0800a96d 	.word	0x0800a96d
 800a8e4:	0800a96d 	.word	0x0800a96d
 800a8e8:	0800a96d 	.word	0x0800a96d
 800a8ec:	0800a96d 	.word	0x0800a96d
 800a8f0:	0800a96d 	.word	0x0800a96d
 800a8f4:	0800a96d 	.word	0x0800a96d
 800a8f8:	0800a955 	.word	0x0800a955
 800a8fc:	0800a96d 	.word	0x0800a96d
 800a900:	0800a96d 	.word	0x0800a96d
 800a904:	0800a96d 	.word	0x0800a96d
 800a908:	0800a96d 	.word	0x0800a96d
 800a90c:	0800a96d 	.word	0x0800a96d
 800a910:	0800a96d 	.word	0x0800a96d
 800a914:	0800a96d 	.word	0x0800a96d
 800a918:	0800a95d 	.word	0x0800a95d
 800a91c:	0800a96d 	.word	0x0800a96d
 800a920:	0800a96d 	.word	0x0800a96d
 800a924:	0800a96d 	.word	0x0800a96d
 800a928:	0800a96d 	.word	0x0800a96d
 800a92c:	0800a96d 	.word	0x0800a96d
 800a930:	0800a96d 	.word	0x0800a96d
 800a934:	0800a96d 	.word	0x0800a96d
 800a938:	0800a965 	.word	0x0800a965
 800a93c:	2301      	movs	r3, #1
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a942:	e0d6      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a944:	2304      	movs	r3, #4
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a94a:	e0d2      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a94c:	2308      	movs	r3, #8
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a952:	e0ce      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a954:	2310      	movs	r3, #16
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95a:	e0ca      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a95c:	2320      	movs	r3, #32
 800a95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a962:	e0c6      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a964:	2340      	movs	r3, #64	@ 0x40
 800a966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a96a:	e0c2      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a96c:	2380      	movs	r3, #128	@ 0x80
 800a96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a972:	e0be      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800a974:	40011400 	.word	0x40011400
 800a978:	58024400 	.word	0x58024400
 800a97c:	40007800 	.word	0x40007800
 800a980:	40007c00 	.word	0x40007c00
 800a984:	40011800 	.word	0x40011800
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4aad      	ldr	r2, [pc, #692]	@ (800ac44 <UART_SetConfig+0x900>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d176      	bne.n	800aa80 <UART_SetConfig+0x73c>
 800a992:	4bad      	ldr	r3, [pc, #692]	@ (800ac48 <UART_SetConfig+0x904>)
 800a994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a996:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a99a:	2b28      	cmp	r3, #40	@ 0x28
 800a99c:	d86c      	bhi.n	800aa78 <UART_SetConfig+0x734>
 800a99e:	a201      	add	r2, pc, #4	@ (adr r2, 800a9a4 <UART_SetConfig+0x660>)
 800a9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a4:	0800aa49 	.word	0x0800aa49
 800a9a8:	0800aa79 	.word	0x0800aa79
 800a9ac:	0800aa79 	.word	0x0800aa79
 800a9b0:	0800aa79 	.word	0x0800aa79
 800a9b4:	0800aa79 	.word	0x0800aa79
 800a9b8:	0800aa79 	.word	0x0800aa79
 800a9bc:	0800aa79 	.word	0x0800aa79
 800a9c0:	0800aa79 	.word	0x0800aa79
 800a9c4:	0800aa51 	.word	0x0800aa51
 800a9c8:	0800aa79 	.word	0x0800aa79
 800a9cc:	0800aa79 	.word	0x0800aa79
 800a9d0:	0800aa79 	.word	0x0800aa79
 800a9d4:	0800aa79 	.word	0x0800aa79
 800a9d8:	0800aa79 	.word	0x0800aa79
 800a9dc:	0800aa79 	.word	0x0800aa79
 800a9e0:	0800aa79 	.word	0x0800aa79
 800a9e4:	0800aa59 	.word	0x0800aa59
 800a9e8:	0800aa79 	.word	0x0800aa79
 800a9ec:	0800aa79 	.word	0x0800aa79
 800a9f0:	0800aa79 	.word	0x0800aa79
 800a9f4:	0800aa79 	.word	0x0800aa79
 800a9f8:	0800aa79 	.word	0x0800aa79
 800a9fc:	0800aa79 	.word	0x0800aa79
 800aa00:	0800aa79 	.word	0x0800aa79
 800aa04:	0800aa61 	.word	0x0800aa61
 800aa08:	0800aa79 	.word	0x0800aa79
 800aa0c:	0800aa79 	.word	0x0800aa79
 800aa10:	0800aa79 	.word	0x0800aa79
 800aa14:	0800aa79 	.word	0x0800aa79
 800aa18:	0800aa79 	.word	0x0800aa79
 800aa1c:	0800aa79 	.word	0x0800aa79
 800aa20:	0800aa79 	.word	0x0800aa79
 800aa24:	0800aa69 	.word	0x0800aa69
 800aa28:	0800aa79 	.word	0x0800aa79
 800aa2c:	0800aa79 	.word	0x0800aa79
 800aa30:	0800aa79 	.word	0x0800aa79
 800aa34:	0800aa79 	.word	0x0800aa79
 800aa38:	0800aa79 	.word	0x0800aa79
 800aa3c:	0800aa79 	.word	0x0800aa79
 800aa40:	0800aa79 	.word	0x0800aa79
 800aa44:	0800aa71 	.word	0x0800aa71
 800aa48:	2301      	movs	r3, #1
 800aa4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa4e:	e050      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800aa50:	2304      	movs	r3, #4
 800aa52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa56:	e04c      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800aa58:	2308      	movs	r3, #8
 800aa5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa5e:	e048      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800aa60:	2310      	movs	r3, #16
 800aa62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa66:	e044      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800aa68:	2320      	movs	r3, #32
 800aa6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa6e:	e040      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800aa70:	2340      	movs	r3, #64	@ 0x40
 800aa72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa76:	e03c      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800aa78:	2380      	movs	r3, #128	@ 0x80
 800aa7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa7e:	e038      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a71      	ldr	r2, [pc, #452]	@ (800ac4c <UART_SetConfig+0x908>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d130      	bne.n	800aaec <UART_SetConfig+0x7a8>
 800aa8a:	4b6f      	ldr	r3, [pc, #444]	@ (800ac48 <UART_SetConfig+0x904>)
 800aa8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa8e:	f003 0307 	and.w	r3, r3, #7
 800aa92:	2b05      	cmp	r3, #5
 800aa94:	d826      	bhi.n	800aae4 <UART_SetConfig+0x7a0>
 800aa96:	a201      	add	r2, pc, #4	@ (adr r2, 800aa9c <UART_SetConfig+0x758>)
 800aa98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9c:	0800aab5 	.word	0x0800aab5
 800aaa0:	0800aabd 	.word	0x0800aabd
 800aaa4:	0800aac5 	.word	0x0800aac5
 800aaa8:	0800aacd 	.word	0x0800aacd
 800aaac:	0800aad5 	.word	0x0800aad5
 800aab0:	0800aadd 	.word	0x0800aadd
 800aab4:	2302      	movs	r3, #2
 800aab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaba:	e01a      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800aabc:	2304      	movs	r3, #4
 800aabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aac2:	e016      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800aac4:	2308      	movs	r3, #8
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaca:	e012      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800aacc:	2310      	movs	r3, #16
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad2:	e00e      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800aad4:	2320      	movs	r3, #32
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aada:	e00a      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800aadc:	2340      	movs	r3, #64	@ 0x40
 800aade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aae2:	e006      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800aae4:	2380      	movs	r3, #128	@ 0x80
 800aae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaea:	e002      	b.n	800aaf2 <UART_SetConfig+0x7ae>
 800aaec:	2380      	movs	r3, #128	@ 0x80
 800aaee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a55      	ldr	r2, [pc, #340]	@ (800ac4c <UART_SetConfig+0x908>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	f040 80f8 	bne.w	800acee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aafe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ab02:	2b20      	cmp	r3, #32
 800ab04:	dc46      	bgt.n	800ab94 <UART_SetConfig+0x850>
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	db75      	blt.n	800abf6 <UART_SetConfig+0x8b2>
 800ab0a:	3b02      	subs	r3, #2
 800ab0c:	2b1e      	cmp	r3, #30
 800ab0e:	d872      	bhi.n	800abf6 <UART_SetConfig+0x8b2>
 800ab10:	a201      	add	r2, pc, #4	@ (adr r2, 800ab18 <UART_SetConfig+0x7d4>)
 800ab12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab16:	bf00      	nop
 800ab18:	0800ab9b 	.word	0x0800ab9b
 800ab1c:	0800abf7 	.word	0x0800abf7
 800ab20:	0800aba3 	.word	0x0800aba3
 800ab24:	0800abf7 	.word	0x0800abf7
 800ab28:	0800abf7 	.word	0x0800abf7
 800ab2c:	0800abf7 	.word	0x0800abf7
 800ab30:	0800abb3 	.word	0x0800abb3
 800ab34:	0800abf7 	.word	0x0800abf7
 800ab38:	0800abf7 	.word	0x0800abf7
 800ab3c:	0800abf7 	.word	0x0800abf7
 800ab40:	0800abf7 	.word	0x0800abf7
 800ab44:	0800abf7 	.word	0x0800abf7
 800ab48:	0800abf7 	.word	0x0800abf7
 800ab4c:	0800abf7 	.word	0x0800abf7
 800ab50:	0800abc3 	.word	0x0800abc3
 800ab54:	0800abf7 	.word	0x0800abf7
 800ab58:	0800abf7 	.word	0x0800abf7
 800ab5c:	0800abf7 	.word	0x0800abf7
 800ab60:	0800abf7 	.word	0x0800abf7
 800ab64:	0800abf7 	.word	0x0800abf7
 800ab68:	0800abf7 	.word	0x0800abf7
 800ab6c:	0800abf7 	.word	0x0800abf7
 800ab70:	0800abf7 	.word	0x0800abf7
 800ab74:	0800abf7 	.word	0x0800abf7
 800ab78:	0800abf7 	.word	0x0800abf7
 800ab7c:	0800abf7 	.word	0x0800abf7
 800ab80:	0800abf7 	.word	0x0800abf7
 800ab84:	0800abf7 	.word	0x0800abf7
 800ab88:	0800abf7 	.word	0x0800abf7
 800ab8c:	0800abf7 	.word	0x0800abf7
 800ab90:	0800abe9 	.word	0x0800abe9
 800ab94:	2b40      	cmp	r3, #64	@ 0x40
 800ab96:	d02a      	beq.n	800abee <UART_SetConfig+0x8aa>
 800ab98:	e02d      	b.n	800abf6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ab9a:	f7fd fc51 	bl	8008440 <HAL_RCCEx_GetD3PCLK1Freq>
 800ab9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aba0:	e02f      	b.n	800ac02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fd fc60 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb0:	e027      	b.n	800ac02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abb2:	f107 0318 	add.w	r3, r7, #24
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fd fdac 	bl	8008714 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abc0:	e01f      	b.n	800ac02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abc2:	4b21      	ldr	r3, [pc, #132]	@ (800ac48 <UART_SetConfig+0x904>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 0320 	and.w	r3, r3, #32
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d009      	beq.n	800abe2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abce:	4b1e      	ldr	r3, [pc, #120]	@ (800ac48 <UART_SetConfig+0x904>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	08db      	lsrs	r3, r3, #3
 800abd4:	f003 0303 	and.w	r3, r3, #3
 800abd8:	4a1d      	ldr	r2, [pc, #116]	@ (800ac50 <UART_SetConfig+0x90c>)
 800abda:	fa22 f303 	lsr.w	r3, r2, r3
 800abde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abe0:	e00f      	b.n	800ac02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800abe2:	4b1b      	ldr	r3, [pc, #108]	@ (800ac50 <UART_SetConfig+0x90c>)
 800abe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abe6:	e00c      	b.n	800ac02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abe8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac54 <UART_SetConfig+0x910>)
 800abea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abec:	e009      	b.n	800ac02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf4:	e005      	b.n	800ac02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800abf6:	2300      	movs	r3, #0
 800abf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ac00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f000 81ee 	beq.w	800afe6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac0e:	4a12      	ldr	r2, [pc, #72]	@ (800ac58 <UART_SetConfig+0x914>)
 800ac10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac14:	461a      	mov	r2, r3
 800ac16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac18:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac1c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	4613      	mov	r3, r2
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	4413      	add	r3, r2
 800ac28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d305      	bcc.n	800ac3a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d910      	bls.n	800ac5c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ac40:	e1d1      	b.n	800afe6 <UART_SetConfig+0xca2>
 800ac42:	bf00      	nop
 800ac44:	40011c00 	.word	0x40011c00
 800ac48:	58024400 	.word	0x58024400
 800ac4c:	58000c00 	.word	0x58000c00
 800ac50:	03d09000 	.word	0x03d09000
 800ac54:	003d0900 	.word	0x003d0900
 800ac58:	0800dcb4 	.word	0x0800dcb4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac5e:	2200      	movs	r2, #0
 800ac60:	60bb      	str	r3, [r7, #8]
 800ac62:	60fa      	str	r2, [r7, #12]
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac68:	4ac0      	ldr	r2, [pc, #768]	@ (800af6c <UART_SetConfig+0xc28>)
 800ac6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	2200      	movs	r2, #0
 800ac72:	603b      	str	r3, [r7, #0]
 800ac74:	607a      	str	r2, [r7, #4]
 800ac76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac7e:	f7f5 fb8f 	bl	80003a0 <__aeabi_uldivmod>
 800ac82:	4602      	mov	r2, r0
 800ac84:	460b      	mov	r3, r1
 800ac86:	4610      	mov	r0, r2
 800ac88:	4619      	mov	r1, r3
 800ac8a:	f04f 0200 	mov.w	r2, #0
 800ac8e:	f04f 0300 	mov.w	r3, #0
 800ac92:	020b      	lsls	r3, r1, #8
 800ac94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac98:	0202      	lsls	r2, r0, #8
 800ac9a:	6979      	ldr	r1, [r7, #20]
 800ac9c:	6849      	ldr	r1, [r1, #4]
 800ac9e:	0849      	lsrs	r1, r1, #1
 800aca0:	2000      	movs	r0, #0
 800aca2:	460c      	mov	r4, r1
 800aca4:	4605      	mov	r5, r0
 800aca6:	eb12 0804 	adds.w	r8, r2, r4
 800acaa:	eb43 0905 	adc.w	r9, r3, r5
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	469a      	mov	sl, r3
 800acb6:	4693      	mov	fp, r2
 800acb8:	4652      	mov	r2, sl
 800acba:	465b      	mov	r3, fp
 800acbc:	4640      	mov	r0, r8
 800acbe:	4649      	mov	r1, r9
 800acc0:	f7f5 fb6e 	bl	80003a0 <__aeabi_uldivmod>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4613      	mov	r3, r2
 800acca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800accc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acd2:	d308      	bcc.n	800ace6 <UART_SetConfig+0x9a2>
 800acd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acda:	d204      	bcs.n	800ace6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ace2:	60da      	str	r2, [r3, #12]
 800ace4:	e17f      	b.n	800afe6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800acec:	e17b      	b.n	800afe6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	69db      	ldr	r3, [r3, #28]
 800acf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acf6:	f040 80bd 	bne.w	800ae74 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800acfa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800acfe:	2b20      	cmp	r3, #32
 800ad00:	dc48      	bgt.n	800ad94 <UART_SetConfig+0xa50>
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	db7b      	blt.n	800adfe <UART_SetConfig+0xaba>
 800ad06:	2b20      	cmp	r3, #32
 800ad08:	d879      	bhi.n	800adfe <UART_SetConfig+0xaba>
 800ad0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad10 <UART_SetConfig+0x9cc>)
 800ad0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad10:	0800ad9b 	.word	0x0800ad9b
 800ad14:	0800ada3 	.word	0x0800ada3
 800ad18:	0800adff 	.word	0x0800adff
 800ad1c:	0800adff 	.word	0x0800adff
 800ad20:	0800adab 	.word	0x0800adab
 800ad24:	0800adff 	.word	0x0800adff
 800ad28:	0800adff 	.word	0x0800adff
 800ad2c:	0800adff 	.word	0x0800adff
 800ad30:	0800adbb 	.word	0x0800adbb
 800ad34:	0800adff 	.word	0x0800adff
 800ad38:	0800adff 	.word	0x0800adff
 800ad3c:	0800adff 	.word	0x0800adff
 800ad40:	0800adff 	.word	0x0800adff
 800ad44:	0800adff 	.word	0x0800adff
 800ad48:	0800adff 	.word	0x0800adff
 800ad4c:	0800adff 	.word	0x0800adff
 800ad50:	0800adcb 	.word	0x0800adcb
 800ad54:	0800adff 	.word	0x0800adff
 800ad58:	0800adff 	.word	0x0800adff
 800ad5c:	0800adff 	.word	0x0800adff
 800ad60:	0800adff 	.word	0x0800adff
 800ad64:	0800adff 	.word	0x0800adff
 800ad68:	0800adff 	.word	0x0800adff
 800ad6c:	0800adff 	.word	0x0800adff
 800ad70:	0800adff 	.word	0x0800adff
 800ad74:	0800adff 	.word	0x0800adff
 800ad78:	0800adff 	.word	0x0800adff
 800ad7c:	0800adff 	.word	0x0800adff
 800ad80:	0800adff 	.word	0x0800adff
 800ad84:	0800adff 	.word	0x0800adff
 800ad88:	0800adff 	.word	0x0800adff
 800ad8c:	0800adff 	.word	0x0800adff
 800ad90:	0800adf1 	.word	0x0800adf1
 800ad94:	2b40      	cmp	r3, #64	@ 0x40
 800ad96:	d02e      	beq.n	800adf6 <UART_SetConfig+0xab2>
 800ad98:	e031      	b.n	800adfe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad9a:	f7fb fc8f 	bl	80066bc <HAL_RCC_GetPCLK1Freq>
 800ad9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ada0:	e033      	b.n	800ae0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ada2:	f7fb fca1 	bl	80066e8 <HAL_RCC_GetPCLK2Freq>
 800ada6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ada8:	e02f      	b.n	800ae0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fd fb5c 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800adb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb8:	e027      	b.n	800ae0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adba:	f107 0318 	add.w	r3, r7, #24
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7fd fca8 	bl	8008714 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adc8:	e01f      	b.n	800ae0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adca:	4b69      	ldr	r3, [pc, #420]	@ (800af70 <UART_SetConfig+0xc2c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 0320 	and.w	r3, r3, #32
 800add2:	2b00      	cmp	r3, #0
 800add4:	d009      	beq.n	800adea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800add6:	4b66      	ldr	r3, [pc, #408]	@ (800af70 <UART_SetConfig+0xc2c>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	08db      	lsrs	r3, r3, #3
 800addc:	f003 0303 	and.w	r3, r3, #3
 800ade0:	4a64      	ldr	r2, [pc, #400]	@ (800af74 <UART_SetConfig+0xc30>)
 800ade2:	fa22 f303 	lsr.w	r3, r2, r3
 800ade6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ade8:	e00f      	b.n	800ae0a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800adea:	4b62      	ldr	r3, [pc, #392]	@ (800af74 <UART_SetConfig+0xc30>)
 800adec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adee:	e00c      	b.n	800ae0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800adf0:	4b61      	ldr	r3, [pc, #388]	@ (800af78 <UART_SetConfig+0xc34>)
 800adf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adf4:	e009      	b.n	800ae0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adfc:	e005      	b.n	800ae0a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800adfe:	2300      	movs	r3, #0
 800ae00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ae08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f000 80ea 	beq.w	800afe6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae16:	4a55      	ldr	r2, [pc, #340]	@ (800af6c <UART_SetConfig+0xc28>)
 800ae18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae20:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae24:	005a      	lsls	r2, r3, #1
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	085b      	lsrs	r3, r3, #1
 800ae2c:	441a      	add	r2, r3
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae36:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3a:	2b0f      	cmp	r3, #15
 800ae3c:	d916      	bls.n	800ae6c <UART_SetConfig+0xb28>
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae44:	d212      	bcs.n	800ae6c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	f023 030f 	bic.w	r3, r3, #15
 800ae4e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae52:	085b      	lsrs	r3, r3, #1
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	f003 0307 	and.w	r3, r3, #7
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ae68:	60da      	str	r2, [r3, #12]
 800ae6a:	e0bc      	b.n	800afe6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ae72:	e0b8      	b.n	800afe6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae74:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae78:	2b20      	cmp	r3, #32
 800ae7a:	dc4b      	bgt.n	800af14 <UART_SetConfig+0xbd0>
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f2c0 8087 	blt.w	800af90 <UART_SetConfig+0xc4c>
 800ae82:	2b20      	cmp	r3, #32
 800ae84:	f200 8084 	bhi.w	800af90 <UART_SetConfig+0xc4c>
 800ae88:	a201      	add	r2, pc, #4	@ (adr r2, 800ae90 <UART_SetConfig+0xb4c>)
 800ae8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8e:	bf00      	nop
 800ae90:	0800af1b 	.word	0x0800af1b
 800ae94:	0800af23 	.word	0x0800af23
 800ae98:	0800af91 	.word	0x0800af91
 800ae9c:	0800af91 	.word	0x0800af91
 800aea0:	0800af2b 	.word	0x0800af2b
 800aea4:	0800af91 	.word	0x0800af91
 800aea8:	0800af91 	.word	0x0800af91
 800aeac:	0800af91 	.word	0x0800af91
 800aeb0:	0800af3b 	.word	0x0800af3b
 800aeb4:	0800af91 	.word	0x0800af91
 800aeb8:	0800af91 	.word	0x0800af91
 800aebc:	0800af91 	.word	0x0800af91
 800aec0:	0800af91 	.word	0x0800af91
 800aec4:	0800af91 	.word	0x0800af91
 800aec8:	0800af91 	.word	0x0800af91
 800aecc:	0800af91 	.word	0x0800af91
 800aed0:	0800af4b 	.word	0x0800af4b
 800aed4:	0800af91 	.word	0x0800af91
 800aed8:	0800af91 	.word	0x0800af91
 800aedc:	0800af91 	.word	0x0800af91
 800aee0:	0800af91 	.word	0x0800af91
 800aee4:	0800af91 	.word	0x0800af91
 800aee8:	0800af91 	.word	0x0800af91
 800aeec:	0800af91 	.word	0x0800af91
 800aef0:	0800af91 	.word	0x0800af91
 800aef4:	0800af91 	.word	0x0800af91
 800aef8:	0800af91 	.word	0x0800af91
 800aefc:	0800af91 	.word	0x0800af91
 800af00:	0800af91 	.word	0x0800af91
 800af04:	0800af91 	.word	0x0800af91
 800af08:	0800af91 	.word	0x0800af91
 800af0c:	0800af91 	.word	0x0800af91
 800af10:	0800af83 	.word	0x0800af83
 800af14:	2b40      	cmp	r3, #64	@ 0x40
 800af16:	d037      	beq.n	800af88 <UART_SetConfig+0xc44>
 800af18:	e03a      	b.n	800af90 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af1a:	f7fb fbcf 	bl	80066bc <HAL_RCC_GetPCLK1Freq>
 800af1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af20:	e03c      	b.n	800af9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af22:	f7fb fbe1 	bl	80066e8 <HAL_RCC_GetPCLK2Freq>
 800af26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af28:	e038      	b.n	800af9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fd fa9c 	bl	800846c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af38:	e030      	b.n	800af9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af3a:	f107 0318 	add.w	r3, r7, #24
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fd fbe8 	bl	8008714 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af48:	e028      	b.n	800af9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af4a:	4b09      	ldr	r3, [pc, #36]	@ (800af70 <UART_SetConfig+0xc2c>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 0320 	and.w	r3, r3, #32
 800af52:	2b00      	cmp	r3, #0
 800af54:	d012      	beq.n	800af7c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af56:	4b06      	ldr	r3, [pc, #24]	@ (800af70 <UART_SetConfig+0xc2c>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	08db      	lsrs	r3, r3, #3
 800af5c:	f003 0303 	and.w	r3, r3, #3
 800af60:	4a04      	ldr	r2, [pc, #16]	@ (800af74 <UART_SetConfig+0xc30>)
 800af62:	fa22 f303 	lsr.w	r3, r2, r3
 800af66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af68:	e018      	b.n	800af9c <UART_SetConfig+0xc58>
 800af6a:	bf00      	nop
 800af6c:	0800dcb4 	.word	0x0800dcb4
 800af70:	58024400 	.word	0x58024400
 800af74:	03d09000 	.word	0x03d09000
 800af78:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800af7c:	4b24      	ldr	r3, [pc, #144]	@ (800b010 <UART_SetConfig+0xccc>)
 800af7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af80:	e00c      	b.n	800af9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af82:	4b24      	ldr	r3, [pc, #144]	@ (800b014 <UART_SetConfig+0xcd0>)
 800af84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af86:	e009      	b.n	800af9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af8e:	e005      	b.n	800af9c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800af90:	2300      	movs	r3, #0
 800af92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af9a:	bf00      	nop
    }

    if (pclk != 0U)
 800af9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d021      	beq.n	800afe6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa6:	4a1c      	ldr	r2, [pc, #112]	@ (800b018 <UART_SetConfig+0xcd4>)
 800afa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afac:	461a      	mov	r2, r3
 800afae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afb0:	fbb3 f2f2 	udiv	r2, r3, r2
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	085b      	lsrs	r3, r3, #1
 800afba:	441a      	add	r2, r3
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800afc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc8:	2b0f      	cmp	r3, #15
 800afca:	d909      	bls.n	800afe0 <UART_SetConfig+0xc9c>
 800afcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afd2:	d205      	bcs.n	800afe0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800afd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	60da      	str	r2, [r3, #12]
 800afde:	e002      	b.n	800afe6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	2201      	movs	r2, #1
 800afea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	2201      	movs	r2, #1
 800aff2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	2200      	movs	r2, #0
 800affa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	2200      	movs	r2, #0
 800b000:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b002:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b006:	4618      	mov	r0, r3
 800b008:	3748      	adds	r7, #72	@ 0x48
 800b00a:	46bd      	mov	sp, r7
 800b00c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b010:	03d09000 	.word	0x03d09000
 800b014:	003d0900 	.word	0x003d0900
 800b018:	0800dcb4 	.word	0x0800dcb4

0800b01c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b028:	f003 0308 	and.w	r3, r3, #8
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00a      	beq.n	800b046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	430a      	orrs	r2, r1
 800b044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b04a:	f003 0301 	and.w	r3, r3, #1
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d00a      	beq.n	800b068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	430a      	orrs	r2, r1
 800b066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b06c:	f003 0302 	and.w	r3, r3, #2
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00a      	beq.n	800b08a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	430a      	orrs	r2, r1
 800b088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b08e:	f003 0304 	and.w	r3, r3, #4
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00a      	beq.n	800b0ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	430a      	orrs	r2, r1
 800b0aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b0:	f003 0310 	and.w	r3, r3, #16
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00a      	beq.n	800b0ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	430a      	orrs	r2, r1
 800b0cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0d2:	f003 0320 	and.w	r3, r3, #32
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00a      	beq.n	800b0f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	430a      	orrs	r2, r1
 800b0ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d01a      	beq.n	800b132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	430a      	orrs	r2, r1
 800b110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b11a:	d10a      	bne.n	800b132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	430a      	orrs	r2, r1
 800b130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00a      	beq.n	800b154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	430a      	orrs	r2, r1
 800b152:	605a      	str	r2, [r3, #4]
  }
}
 800b154:	bf00      	nop
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b098      	sub	sp, #96	@ 0x60
 800b164:	af02      	add	r7, sp, #8
 800b166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b170:	f7f6 fb5e 	bl	8001830 <HAL_GetTick>
 800b174:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 0308 	and.w	r3, r3, #8
 800b180:	2b08      	cmp	r3, #8
 800b182:	d12f      	bne.n	800b1e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b184:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b18c:	2200      	movs	r2, #0
 800b18e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f88e 	bl	800b2b4 <UART_WaitOnFlagUntilTimeout>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d022      	beq.n	800b1e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a6:	e853 3f00 	ldrex	r3, [r3]
 800b1aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b1c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1c4:	e841 2300 	strex	r3, r2, [r1]
 800b1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b1ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1e6      	bne.n	800b19e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2220      	movs	r2, #32
 800b1d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	e063      	b.n	800b2ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f003 0304 	and.w	r3, r3, #4
 800b1ee:	2b04      	cmp	r3, #4
 800b1f0:	d149      	bne.n	800b286 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 f857 	bl	800b2b4 <UART_WaitOnFlagUntilTimeout>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d03c      	beq.n	800b286 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b214:	e853 3f00 	ldrex	r3, [r3]
 800b218:	623b      	str	r3, [r7, #32]
   return(result);
 800b21a:	6a3b      	ldr	r3, [r7, #32]
 800b21c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b220:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	461a      	mov	r2, r3
 800b228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b22a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b22c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b232:	e841 2300 	strex	r3, r2, [r1]
 800b236:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1e6      	bne.n	800b20c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	3308      	adds	r3, #8
 800b244:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	e853 3f00 	ldrex	r3, [r3]
 800b24c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f023 0301 	bic.w	r3, r3, #1
 800b254:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	3308      	adds	r3, #8
 800b25c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b25e:	61fa      	str	r2, [r7, #28]
 800b260:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b262:	69b9      	ldr	r1, [r7, #24]
 800b264:	69fa      	ldr	r2, [r7, #28]
 800b266:	e841 2300 	strex	r3, r2, [r1]
 800b26a:	617b      	str	r3, [r7, #20]
   return(result);
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1e5      	bne.n	800b23e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2220      	movs	r2, #32
 800b276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b282:	2303      	movs	r3, #3
 800b284:	e012      	b.n	800b2ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2220      	movs	r2, #32
 800b28a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2220      	movs	r2, #32
 800b292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3758      	adds	r7, #88	@ 0x58
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2c4:	e04f      	b.n	800b366 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2cc:	d04b      	beq.n	800b366 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2ce:	f7f6 faaf 	bl	8001830 <HAL_GetTick>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	69ba      	ldr	r2, [r7, #24]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d302      	bcc.n	800b2e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d101      	bne.n	800b2e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	e04e      	b.n	800b386 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 0304 	and.w	r3, r3, #4
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d037      	beq.n	800b366 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	2b80      	cmp	r3, #128	@ 0x80
 800b2fa:	d034      	beq.n	800b366 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2b40      	cmp	r3, #64	@ 0x40
 800b300:	d031      	beq.n	800b366 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	69db      	ldr	r3, [r3, #28]
 800b308:	f003 0308 	and.w	r3, r3, #8
 800b30c:	2b08      	cmp	r3, #8
 800b30e:	d110      	bne.n	800b332 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2208      	movs	r2, #8
 800b316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f000 f839 	bl	800b390 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2208      	movs	r2, #8
 800b322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	e029      	b.n	800b386 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	69db      	ldr	r3, [r3, #28]
 800b338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b33c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b340:	d111      	bne.n	800b366 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b34a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f000 f81f 	bl	800b390 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2220      	movs	r2, #32
 800b356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b362:	2303      	movs	r3, #3
 800b364:	e00f      	b.n	800b386 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	69da      	ldr	r2, [r3, #28]
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	4013      	ands	r3, r2
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	429a      	cmp	r2, r3
 800b374:	bf0c      	ite	eq
 800b376:	2301      	moveq	r3, #1
 800b378:	2300      	movne	r3, #0
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	461a      	mov	r2, r3
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	429a      	cmp	r2, r3
 800b382:	d0a0      	beq.n	800b2c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
	...

0800b390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b390:	b480      	push	{r7}
 800b392:	b095      	sub	sp, #84	@ 0x54
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3a0:	e853 3f00 	ldrex	r3, [r3]
 800b3a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b3bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b3be:	e841 2300 	strex	r3, r2, [r1]
 800b3c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1e6      	bne.n	800b398 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	3308      	adds	r3, #8
 800b3d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d2:	6a3b      	ldr	r3, [r7, #32]
 800b3d4:	e853 3f00 	ldrex	r3, [r3]
 800b3d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3da:	69fa      	ldr	r2, [r7, #28]
 800b3dc:	4b1e      	ldr	r3, [pc, #120]	@ (800b458 <UART_EndRxTransfer+0xc8>)
 800b3de:	4013      	ands	r3, r2
 800b3e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3308      	adds	r3, #8
 800b3e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3f2:	e841 2300 	strex	r3, r2, [r1]
 800b3f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1e5      	bne.n	800b3ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b402:	2b01      	cmp	r3, #1
 800b404:	d118      	bne.n	800b438 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	e853 3f00 	ldrex	r3, [r3]
 800b412:	60bb      	str	r3, [r7, #8]
   return(result);
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	f023 0310 	bic.w	r3, r3, #16
 800b41a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	461a      	mov	r2, r3
 800b422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b424:	61bb      	str	r3, [r7, #24]
 800b426:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b428:	6979      	ldr	r1, [r7, #20]
 800b42a:	69ba      	ldr	r2, [r7, #24]
 800b42c:	e841 2300 	strex	r3, r2, [r1]
 800b430:	613b      	str	r3, [r7, #16]
   return(result);
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1e6      	bne.n	800b406 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2220      	movs	r2, #32
 800b43c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b44c:	bf00      	nop
 800b44e:	3754      	adds	r7, #84	@ 0x54
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr
 800b458:	effffffe 	.word	0xeffffffe

0800b45c <__cvt>:
 800b45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b45e:	ed2d 8b02 	vpush	{d8}
 800b462:	eeb0 8b40 	vmov.f64	d8, d0
 800b466:	b085      	sub	sp, #20
 800b468:	4617      	mov	r7, r2
 800b46a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b46c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b46e:	ee18 2a90 	vmov	r2, s17
 800b472:	f025 0520 	bic.w	r5, r5, #32
 800b476:	2a00      	cmp	r2, #0
 800b478:	bfb6      	itet	lt
 800b47a:	222d      	movlt	r2, #45	@ 0x2d
 800b47c:	2200      	movge	r2, #0
 800b47e:	eeb1 8b40 	vneglt.f64	d8, d0
 800b482:	2d46      	cmp	r5, #70	@ 0x46
 800b484:	460c      	mov	r4, r1
 800b486:	701a      	strb	r2, [r3, #0]
 800b488:	d004      	beq.n	800b494 <__cvt+0x38>
 800b48a:	2d45      	cmp	r5, #69	@ 0x45
 800b48c:	d100      	bne.n	800b490 <__cvt+0x34>
 800b48e:	3401      	adds	r4, #1
 800b490:	2102      	movs	r1, #2
 800b492:	e000      	b.n	800b496 <__cvt+0x3a>
 800b494:	2103      	movs	r1, #3
 800b496:	ab03      	add	r3, sp, #12
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	ab02      	add	r3, sp, #8
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	4622      	mov	r2, r4
 800b4a0:	4633      	mov	r3, r6
 800b4a2:	eeb0 0b48 	vmov.f64	d0, d8
 800b4a6:	f000 fe2f 	bl	800c108 <_dtoa_r>
 800b4aa:	2d47      	cmp	r5, #71	@ 0x47
 800b4ac:	d114      	bne.n	800b4d8 <__cvt+0x7c>
 800b4ae:	07fb      	lsls	r3, r7, #31
 800b4b0:	d50a      	bpl.n	800b4c8 <__cvt+0x6c>
 800b4b2:	1902      	adds	r2, r0, r4
 800b4b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4bc:	bf08      	it	eq
 800b4be:	9203      	streq	r2, [sp, #12]
 800b4c0:	2130      	movs	r1, #48	@ 0x30
 800b4c2:	9b03      	ldr	r3, [sp, #12]
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d319      	bcc.n	800b4fc <__cvt+0xa0>
 800b4c8:	9b03      	ldr	r3, [sp, #12]
 800b4ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4cc:	1a1b      	subs	r3, r3, r0
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	b005      	add	sp, #20
 800b4d2:	ecbd 8b02 	vpop	{d8}
 800b4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4d8:	2d46      	cmp	r5, #70	@ 0x46
 800b4da:	eb00 0204 	add.w	r2, r0, r4
 800b4de:	d1e9      	bne.n	800b4b4 <__cvt+0x58>
 800b4e0:	7803      	ldrb	r3, [r0, #0]
 800b4e2:	2b30      	cmp	r3, #48	@ 0x30
 800b4e4:	d107      	bne.n	800b4f6 <__cvt+0x9a>
 800b4e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ee:	bf1c      	itt	ne
 800b4f0:	f1c4 0401 	rsbne	r4, r4, #1
 800b4f4:	6034      	strne	r4, [r6, #0]
 800b4f6:	6833      	ldr	r3, [r6, #0]
 800b4f8:	441a      	add	r2, r3
 800b4fa:	e7db      	b.n	800b4b4 <__cvt+0x58>
 800b4fc:	1c5c      	adds	r4, r3, #1
 800b4fe:	9403      	str	r4, [sp, #12]
 800b500:	7019      	strb	r1, [r3, #0]
 800b502:	e7de      	b.n	800b4c2 <__cvt+0x66>

0800b504 <__exponent>:
 800b504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b506:	2900      	cmp	r1, #0
 800b508:	bfba      	itte	lt
 800b50a:	4249      	neglt	r1, r1
 800b50c:	232d      	movlt	r3, #45	@ 0x2d
 800b50e:	232b      	movge	r3, #43	@ 0x2b
 800b510:	2909      	cmp	r1, #9
 800b512:	7002      	strb	r2, [r0, #0]
 800b514:	7043      	strb	r3, [r0, #1]
 800b516:	dd29      	ble.n	800b56c <__exponent+0x68>
 800b518:	f10d 0307 	add.w	r3, sp, #7
 800b51c:	461d      	mov	r5, r3
 800b51e:	270a      	movs	r7, #10
 800b520:	461a      	mov	r2, r3
 800b522:	fbb1 f6f7 	udiv	r6, r1, r7
 800b526:	fb07 1416 	mls	r4, r7, r6, r1
 800b52a:	3430      	adds	r4, #48	@ 0x30
 800b52c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b530:	460c      	mov	r4, r1
 800b532:	2c63      	cmp	r4, #99	@ 0x63
 800b534:	f103 33ff 	add.w	r3, r3, #4294967295
 800b538:	4631      	mov	r1, r6
 800b53a:	dcf1      	bgt.n	800b520 <__exponent+0x1c>
 800b53c:	3130      	adds	r1, #48	@ 0x30
 800b53e:	1e94      	subs	r4, r2, #2
 800b540:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b544:	1c41      	adds	r1, r0, #1
 800b546:	4623      	mov	r3, r4
 800b548:	42ab      	cmp	r3, r5
 800b54a:	d30a      	bcc.n	800b562 <__exponent+0x5e>
 800b54c:	f10d 0309 	add.w	r3, sp, #9
 800b550:	1a9b      	subs	r3, r3, r2
 800b552:	42ac      	cmp	r4, r5
 800b554:	bf88      	it	hi
 800b556:	2300      	movhi	r3, #0
 800b558:	3302      	adds	r3, #2
 800b55a:	4403      	add	r3, r0
 800b55c:	1a18      	subs	r0, r3, r0
 800b55e:	b003      	add	sp, #12
 800b560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b562:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b566:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b56a:	e7ed      	b.n	800b548 <__exponent+0x44>
 800b56c:	2330      	movs	r3, #48	@ 0x30
 800b56e:	3130      	adds	r1, #48	@ 0x30
 800b570:	7083      	strb	r3, [r0, #2]
 800b572:	70c1      	strb	r1, [r0, #3]
 800b574:	1d03      	adds	r3, r0, #4
 800b576:	e7f1      	b.n	800b55c <__exponent+0x58>

0800b578 <_printf_float>:
 800b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	b08d      	sub	sp, #52	@ 0x34
 800b57e:	460c      	mov	r4, r1
 800b580:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b584:	4616      	mov	r6, r2
 800b586:	461f      	mov	r7, r3
 800b588:	4605      	mov	r5, r0
 800b58a:	f000 fcbb 	bl	800bf04 <_localeconv_r>
 800b58e:	f8d0 b000 	ldr.w	fp, [r0]
 800b592:	4658      	mov	r0, fp
 800b594:	f7f4 fefc 	bl	8000390 <strlen>
 800b598:	2300      	movs	r3, #0
 800b59a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b59c:	f8d8 3000 	ldr.w	r3, [r8]
 800b5a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b5a4:	6822      	ldr	r2, [r4, #0]
 800b5a6:	9005      	str	r0, [sp, #20]
 800b5a8:	3307      	adds	r3, #7
 800b5aa:	f023 0307 	bic.w	r3, r3, #7
 800b5ae:	f103 0108 	add.w	r1, r3, #8
 800b5b2:	f8c8 1000 	str.w	r1, [r8]
 800b5b6:	ed93 0b00 	vldr	d0, [r3]
 800b5ba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b818 <_printf_float+0x2a0>
 800b5be:	eeb0 7bc0 	vabs.f64	d7, d0
 800b5c2:	eeb4 7b46 	vcmp.f64	d7, d6
 800b5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800b5ce:	dd24      	ble.n	800b61a <_printf_float+0xa2>
 800b5d0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5d8:	d502      	bpl.n	800b5e0 <_printf_float+0x68>
 800b5da:	232d      	movs	r3, #45	@ 0x2d
 800b5dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5e0:	498f      	ldr	r1, [pc, #572]	@ (800b820 <_printf_float+0x2a8>)
 800b5e2:	4b90      	ldr	r3, [pc, #576]	@ (800b824 <_printf_float+0x2ac>)
 800b5e4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800b5e8:	bf8c      	ite	hi
 800b5ea:	4688      	movhi	r8, r1
 800b5ec:	4698      	movls	r8, r3
 800b5ee:	f022 0204 	bic.w	r2, r2, #4
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	6123      	str	r3, [r4, #16]
 800b5f6:	6022      	str	r2, [r4, #0]
 800b5f8:	f04f 0a00 	mov.w	sl, #0
 800b5fc:	9700      	str	r7, [sp, #0]
 800b5fe:	4633      	mov	r3, r6
 800b600:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b602:	4621      	mov	r1, r4
 800b604:	4628      	mov	r0, r5
 800b606:	f000 f9d1 	bl	800b9ac <_printf_common>
 800b60a:	3001      	adds	r0, #1
 800b60c:	f040 8089 	bne.w	800b722 <_printf_float+0x1aa>
 800b610:	f04f 30ff 	mov.w	r0, #4294967295
 800b614:	b00d      	add	sp, #52	@ 0x34
 800b616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b61a:	eeb4 0b40 	vcmp.f64	d0, d0
 800b61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b622:	d709      	bvc.n	800b638 <_printf_float+0xc0>
 800b624:	ee10 3a90 	vmov	r3, s1
 800b628:	2b00      	cmp	r3, #0
 800b62a:	bfbc      	itt	lt
 800b62c:	232d      	movlt	r3, #45	@ 0x2d
 800b62e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b632:	497d      	ldr	r1, [pc, #500]	@ (800b828 <_printf_float+0x2b0>)
 800b634:	4b7d      	ldr	r3, [pc, #500]	@ (800b82c <_printf_float+0x2b4>)
 800b636:	e7d5      	b.n	800b5e4 <_printf_float+0x6c>
 800b638:	6863      	ldr	r3, [r4, #4]
 800b63a:	1c59      	adds	r1, r3, #1
 800b63c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800b640:	d139      	bne.n	800b6b6 <_printf_float+0x13e>
 800b642:	2306      	movs	r3, #6
 800b644:	6063      	str	r3, [r4, #4]
 800b646:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b64a:	2300      	movs	r3, #0
 800b64c:	6022      	str	r2, [r4, #0]
 800b64e:	9303      	str	r3, [sp, #12]
 800b650:	ab0a      	add	r3, sp, #40	@ 0x28
 800b652:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b656:	ab09      	add	r3, sp, #36	@ 0x24
 800b658:	9300      	str	r3, [sp, #0]
 800b65a:	6861      	ldr	r1, [r4, #4]
 800b65c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b660:	4628      	mov	r0, r5
 800b662:	f7ff fefb 	bl	800b45c <__cvt>
 800b666:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b66a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b66c:	4680      	mov	r8, r0
 800b66e:	d129      	bne.n	800b6c4 <_printf_float+0x14c>
 800b670:	1cc8      	adds	r0, r1, #3
 800b672:	db02      	blt.n	800b67a <_printf_float+0x102>
 800b674:	6863      	ldr	r3, [r4, #4]
 800b676:	4299      	cmp	r1, r3
 800b678:	dd41      	ble.n	800b6fe <_printf_float+0x186>
 800b67a:	f1a9 0902 	sub.w	r9, r9, #2
 800b67e:	fa5f f989 	uxtb.w	r9, r9
 800b682:	3901      	subs	r1, #1
 800b684:	464a      	mov	r2, r9
 800b686:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b68a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b68c:	f7ff ff3a 	bl	800b504 <__exponent>
 800b690:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b692:	1813      	adds	r3, r2, r0
 800b694:	2a01      	cmp	r2, #1
 800b696:	4682      	mov	sl, r0
 800b698:	6123      	str	r3, [r4, #16]
 800b69a:	dc02      	bgt.n	800b6a2 <_printf_float+0x12a>
 800b69c:	6822      	ldr	r2, [r4, #0]
 800b69e:	07d2      	lsls	r2, r2, #31
 800b6a0:	d501      	bpl.n	800b6a6 <_printf_float+0x12e>
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	6123      	str	r3, [r4, #16]
 800b6a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d0a6      	beq.n	800b5fc <_printf_float+0x84>
 800b6ae:	232d      	movs	r3, #45	@ 0x2d
 800b6b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6b4:	e7a2      	b.n	800b5fc <_printf_float+0x84>
 800b6b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b6ba:	d1c4      	bne.n	800b646 <_printf_float+0xce>
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1c2      	bne.n	800b646 <_printf_float+0xce>
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e7bf      	b.n	800b644 <_printf_float+0xcc>
 800b6c4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b6c8:	d9db      	bls.n	800b682 <_printf_float+0x10a>
 800b6ca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800b6ce:	d118      	bne.n	800b702 <_printf_float+0x18a>
 800b6d0:	2900      	cmp	r1, #0
 800b6d2:	6863      	ldr	r3, [r4, #4]
 800b6d4:	dd0b      	ble.n	800b6ee <_printf_float+0x176>
 800b6d6:	6121      	str	r1, [r4, #16]
 800b6d8:	b913      	cbnz	r3, 800b6e0 <_printf_float+0x168>
 800b6da:	6822      	ldr	r2, [r4, #0]
 800b6dc:	07d0      	lsls	r0, r2, #31
 800b6de:	d502      	bpl.n	800b6e6 <_printf_float+0x16e>
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	440b      	add	r3, r1
 800b6e4:	6123      	str	r3, [r4, #16]
 800b6e6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b6e8:	f04f 0a00 	mov.w	sl, #0
 800b6ec:	e7db      	b.n	800b6a6 <_printf_float+0x12e>
 800b6ee:	b913      	cbnz	r3, 800b6f6 <_printf_float+0x17e>
 800b6f0:	6822      	ldr	r2, [r4, #0]
 800b6f2:	07d2      	lsls	r2, r2, #31
 800b6f4:	d501      	bpl.n	800b6fa <_printf_float+0x182>
 800b6f6:	3302      	adds	r3, #2
 800b6f8:	e7f4      	b.n	800b6e4 <_printf_float+0x16c>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e7f2      	b.n	800b6e4 <_printf_float+0x16c>
 800b6fe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800b702:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b704:	4299      	cmp	r1, r3
 800b706:	db05      	blt.n	800b714 <_printf_float+0x19c>
 800b708:	6823      	ldr	r3, [r4, #0]
 800b70a:	6121      	str	r1, [r4, #16]
 800b70c:	07d8      	lsls	r0, r3, #31
 800b70e:	d5ea      	bpl.n	800b6e6 <_printf_float+0x16e>
 800b710:	1c4b      	adds	r3, r1, #1
 800b712:	e7e7      	b.n	800b6e4 <_printf_float+0x16c>
 800b714:	2900      	cmp	r1, #0
 800b716:	bfd4      	ite	le
 800b718:	f1c1 0202 	rsble	r2, r1, #2
 800b71c:	2201      	movgt	r2, #1
 800b71e:	4413      	add	r3, r2
 800b720:	e7e0      	b.n	800b6e4 <_printf_float+0x16c>
 800b722:	6823      	ldr	r3, [r4, #0]
 800b724:	055a      	lsls	r2, r3, #21
 800b726:	d407      	bmi.n	800b738 <_printf_float+0x1c0>
 800b728:	6923      	ldr	r3, [r4, #16]
 800b72a:	4642      	mov	r2, r8
 800b72c:	4631      	mov	r1, r6
 800b72e:	4628      	mov	r0, r5
 800b730:	47b8      	blx	r7
 800b732:	3001      	adds	r0, #1
 800b734:	d12a      	bne.n	800b78c <_printf_float+0x214>
 800b736:	e76b      	b.n	800b610 <_printf_float+0x98>
 800b738:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b73c:	f240 80e0 	bls.w	800b900 <_printf_float+0x388>
 800b740:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b744:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b74c:	d133      	bne.n	800b7b6 <_printf_float+0x23e>
 800b74e:	4a38      	ldr	r2, [pc, #224]	@ (800b830 <_printf_float+0x2b8>)
 800b750:	2301      	movs	r3, #1
 800b752:	4631      	mov	r1, r6
 800b754:	4628      	mov	r0, r5
 800b756:	47b8      	blx	r7
 800b758:	3001      	adds	r0, #1
 800b75a:	f43f af59 	beq.w	800b610 <_printf_float+0x98>
 800b75e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b762:	4543      	cmp	r3, r8
 800b764:	db02      	blt.n	800b76c <_printf_float+0x1f4>
 800b766:	6823      	ldr	r3, [r4, #0]
 800b768:	07d8      	lsls	r0, r3, #31
 800b76a:	d50f      	bpl.n	800b78c <_printf_float+0x214>
 800b76c:	9b05      	ldr	r3, [sp, #20]
 800b76e:	465a      	mov	r2, fp
 800b770:	4631      	mov	r1, r6
 800b772:	4628      	mov	r0, r5
 800b774:	47b8      	blx	r7
 800b776:	3001      	adds	r0, #1
 800b778:	f43f af4a 	beq.w	800b610 <_printf_float+0x98>
 800b77c:	f04f 0900 	mov.w	r9, #0
 800b780:	f108 38ff 	add.w	r8, r8, #4294967295
 800b784:	f104 0a1a 	add.w	sl, r4, #26
 800b788:	45c8      	cmp	r8, r9
 800b78a:	dc09      	bgt.n	800b7a0 <_printf_float+0x228>
 800b78c:	6823      	ldr	r3, [r4, #0]
 800b78e:	079b      	lsls	r3, r3, #30
 800b790:	f100 8107 	bmi.w	800b9a2 <_printf_float+0x42a>
 800b794:	68e0      	ldr	r0, [r4, #12]
 800b796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b798:	4298      	cmp	r0, r3
 800b79a:	bfb8      	it	lt
 800b79c:	4618      	movlt	r0, r3
 800b79e:	e739      	b.n	800b614 <_printf_float+0x9c>
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	4652      	mov	r2, sl
 800b7a4:	4631      	mov	r1, r6
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	47b8      	blx	r7
 800b7aa:	3001      	adds	r0, #1
 800b7ac:	f43f af30 	beq.w	800b610 <_printf_float+0x98>
 800b7b0:	f109 0901 	add.w	r9, r9, #1
 800b7b4:	e7e8      	b.n	800b788 <_printf_float+0x210>
 800b7b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	dc3b      	bgt.n	800b834 <_printf_float+0x2bc>
 800b7bc:	4a1c      	ldr	r2, [pc, #112]	@ (800b830 <_printf_float+0x2b8>)
 800b7be:	2301      	movs	r3, #1
 800b7c0:	4631      	mov	r1, r6
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	47b8      	blx	r7
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	f43f af22 	beq.w	800b610 <_printf_float+0x98>
 800b7cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b7d0:	ea59 0303 	orrs.w	r3, r9, r3
 800b7d4:	d102      	bne.n	800b7dc <_printf_float+0x264>
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	07d9      	lsls	r1, r3, #31
 800b7da:	d5d7      	bpl.n	800b78c <_printf_float+0x214>
 800b7dc:	9b05      	ldr	r3, [sp, #20]
 800b7de:	465a      	mov	r2, fp
 800b7e0:	4631      	mov	r1, r6
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	47b8      	blx	r7
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	f43f af12 	beq.w	800b610 <_printf_float+0x98>
 800b7ec:	f04f 0a00 	mov.w	sl, #0
 800b7f0:	f104 0b1a 	add.w	fp, r4, #26
 800b7f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7f6:	425b      	negs	r3, r3
 800b7f8:	4553      	cmp	r3, sl
 800b7fa:	dc01      	bgt.n	800b800 <_printf_float+0x288>
 800b7fc:	464b      	mov	r3, r9
 800b7fe:	e794      	b.n	800b72a <_printf_float+0x1b2>
 800b800:	2301      	movs	r3, #1
 800b802:	465a      	mov	r2, fp
 800b804:	4631      	mov	r1, r6
 800b806:	4628      	mov	r0, r5
 800b808:	47b8      	blx	r7
 800b80a:	3001      	adds	r0, #1
 800b80c:	f43f af00 	beq.w	800b610 <_printf_float+0x98>
 800b810:	f10a 0a01 	add.w	sl, sl, #1
 800b814:	e7ee      	b.n	800b7f4 <_printf_float+0x27c>
 800b816:	bf00      	nop
 800b818:	ffffffff 	.word	0xffffffff
 800b81c:	7fefffff 	.word	0x7fefffff
 800b820:	0800dcd0 	.word	0x0800dcd0
 800b824:	0800dccc 	.word	0x0800dccc
 800b828:	0800dcd8 	.word	0x0800dcd8
 800b82c:	0800dcd4 	.word	0x0800dcd4
 800b830:	0800dcdc 	.word	0x0800dcdc
 800b834:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b836:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b83a:	4553      	cmp	r3, sl
 800b83c:	bfa8      	it	ge
 800b83e:	4653      	movge	r3, sl
 800b840:	2b00      	cmp	r3, #0
 800b842:	4699      	mov	r9, r3
 800b844:	dc37      	bgt.n	800b8b6 <_printf_float+0x33e>
 800b846:	2300      	movs	r3, #0
 800b848:	9307      	str	r3, [sp, #28]
 800b84a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b84e:	f104 021a 	add.w	r2, r4, #26
 800b852:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b854:	9907      	ldr	r1, [sp, #28]
 800b856:	9306      	str	r3, [sp, #24]
 800b858:	eba3 0309 	sub.w	r3, r3, r9
 800b85c:	428b      	cmp	r3, r1
 800b85e:	dc31      	bgt.n	800b8c4 <_printf_float+0x34c>
 800b860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b862:	459a      	cmp	sl, r3
 800b864:	dc3b      	bgt.n	800b8de <_printf_float+0x366>
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	07da      	lsls	r2, r3, #31
 800b86a:	d438      	bmi.n	800b8de <_printf_float+0x366>
 800b86c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b86e:	ebaa 0903 	sub.w	r9, sl, r3
 800b872:	9b06      	ldr	r3, [sp, #24]
 800b874:	ebaa 0303 	sub.w	r3, sl, r3
 800b878:	4599      	cmp	r9, r3
 800b87a:	bfa8      	it	ge
 800b87c:	4699      	movge	r9, r3
 800b87e:	f1b9 0f00 	cmp.w	r9, #0
 800b882:	dc34      	bgt.n	800b8ee <_printf_float+0x376>
 800b884:	f04f 0800 	mov.w	r8, #0
 800b888:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b88c:	f104 0b1a 	add.w	fp, r4, #26
 800b890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b892:	ebaa 0303 	sub.w	r3, sl, r3
 800b896:	eba3 0309 	sub.w	r3, r3, r9
 800b89a:	4543      	cmp	r3, r8
 800b89c:	f77f af76 	ble.w	800b78c <_printf_float+0x214>
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	465a      	mov	r2, fp
 800b8a4:	4631      	mov	r1, r6
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	47b8      	blx	r7
 800b8aa:	3001      	adds	r0, #1
 800b8ac:	f43f aeb0 	beq.w	800b610 <_printf_float+0x98>
 800b8b0:	f108 0801 	add.w	r8, r8, #1
 800b8b4:	e7ec      	b.n	800b890 <_printf_float+0x318>
 800b8b6:	4642      	mov	r2, r8
 800b8b8:	4631      	mov	r1, r6
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	47b8      	blx	r7
 800b8be:	3001      	adds	r0, #1
 800b8c0:	d1c1      	bne.n	800b846 <_printf_float+0x2ce>
 800b8c2:	e6a5      	b.n	800b610 <_printf_float+0x98>
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	4631      	mov	r1, r6
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	9206      	str	r2, [sp, #24]
 800b8cc:	47b8      	blx	r7
 800b8ce:	3001      	adds	r0, #1
 800b8d0:	f43f ae9e 	beq.w	800b610 <_printf_float+0x98>
 800b8d4:	9b07      	ldr	r3, [sp, #28]
 800b8d6:	9a06      	ldr	r2, [sp, #24]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	9307      	str	r3, [sp, #28]
 800b8dc:	e7b9      	b.n	800b852 <_printf_float+0x2da>
 800b8de:	9b05      	ldr	r3, [sp, #20]
 800b8e0:	465a      	mov	r2, fp
 800b8e2:	4631      	mov	r1, r6
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	47b8      	blx	r7
 800b8e8:	3001      	adds	r0, #1
 800b8ea:	d1bf      	bne.n	800b86c <_printf_float+0x2f4>
 800b8ec:	e690      	b.n	800b610 <_printf_float+0x98>
 800b8ee:	9a06      	ldr	r2, [sp, #24]
 800b8f0:	464b      	mov	r3, r9
 800b8f2:	4442      	add	r2, r8
 800b8f4:	4631      	mov	r1, r6
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	47b8      	blx	r7
 800b8fa:	3001      	adds	r0, #1
 800b8fc:	d1c2      	bne.n	800b884 <_printf_float+0x30c>
 800b8fe:	e687      	b.n	800b610 <_printf_float+0x98>
 800b900:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b904:	f1b9 0f01 	cmp.w	r9, #1
 800b908:	dc01      	bgt.n	800b90e <_printf_float+0x396>
 800b90a:	07db      	lsls	r3, r3, #31
 800b90c:	d536      	bpl.n	800b97c <_printf_float+0x404>
 800b90e:	2301      	movs	r3, #1
 800b910:	4642      	mov	r2, r8
 800b912:	4631      	mov	r1, r6
 800b914:	4628      	mov	r0, r5
 800b916:	47b8      	blx	r7
 800b918:	3001      	adds	r0, #1
 800b91a:	f43f ae79 	beq.w	800b610 <_printf_float+0x98>
 800b91e:	9b05      	ldr	r3, [sp, #20]
 800b920:	465a      	mov	r2, fp
 800b922:	4631      	mov	r1, r6
 800b924:	4628      	mov	r0, r5
 800b926:	47b8      	blx	r7
 800b928:	3001      	adds	r0, #1
 800b92a:	f43f ae71 	beq.w	800b610 <_printf_float+0x98>
 800b92e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b932:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b93a:	f109 39ff 	add.w	r9, r9, #4294967295
 800b93e:	d018      	beq.n	800b972 <_printf_float+0x3fa>
 800b940:	464b      	mov	r3, r9
 800b942:	f108 0201 	add.w	r2, r8, #1
 800b946:	4631      	mov	r1, r6
 800b948:	4628      	mov	r0, r5
 800b94a:	47b8      	blx	r7
 800b94c:	3001      	adds	r0, #1
 800b94e:	d10c      	bne.n	800b96a <_printf_float+0x3f2>
 800b950:	e65e      	b.n	800b610 <_printf_float+0x98>
 800b952:	2301      	movs	r3, #1
 800b954:	465a      	mov	r2, fp
 800b956:	4631      	mov	r1, r6
 800b958:	4628      	mov	r0, r5
 800b95a:	47b8      	blx	r7
 800b95c:	3001      	adds	r0, #1
 800b95e:	f43f ae57 	beq.w	800b610 <_printf_float+0x98>
 800b962:	f108 0801 	add.w	r8, r8, #1
 800b966:	45c8      	cmp	r8, r9
 800b968:	dbf3      	blt.n	800b952 <_printf_float+0x3da>
 800b96a:	4653      	mov	r3, sl
 800b96c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b970:	e6dc      	b.n	800b72c <_printf_float+0x1b4>
 800b972:	f04f 0800 	mov.w	r8, #0
 800b976:	f104 0b1a 	add.w	fp, r4, #26
 800b97a:	e7f4      	b.n	800b966 <_printf_float+0x3ee>
 800b97c:	2301      	movs	r3, #1
 800b97e:	4642      	mov	r2, r8
 800b980:	e7e1      	b.n	800b946 <_printf_float+0x3ce>
 800b982:	2301      	movs	r3, #1
 800b984:	464a      	mov	r2, r9
 800b986:	4631      	mov	r1, r6
 800b988:	4628      	mov	r0, r5
 800b98a:	47b8      	blx	r7
 800b98c:	3001      	adds	r0, #1
 800b98e:	f43f ae3f 	beq.w	800b610 <_printf_float+0x98>
 800b992:	f108 0801 	add.w	r8, r8, #1
 800b996:	68e3      	ldr	r3, [r4, #12]
 800b998:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b99a:	1a5b      	subs	r3, r3, r1
 800b99c:	4543      	cmp	r3, r8
 800b99e:	dcf0      	bgt.n	800b982 <_printf_float+0x40a>
 800b9a0:	e6f8      	b.n	800b794 <_printf_float+0x21c>
 800b9a2:	f04f 0800 	mov.w	r8, #0
 800b9a6:	f104 0919 	add.w	r9, r4, #25
 800b9aa:	e7f4      	b.n	800b996 <_printf_float+0x41e>

0800b9ac <_printf_common>:
 800b9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9b0:	4616      	mov	r6, r2
 800b9b2:	4698      	mov	r8, r3
 800b9b4:	688a      	ldr	r2, [r1, #8]
 800b9b6:	690b      	ldr	r3, [r1, #16]
 800b9b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	bfb8      	it	lt
 800b9c0:	4613      	movlt	r3, r2
 800b9c2:	6033      	str	r3, [r6, #0]
 800b9c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b9c8:	4607      	mov	r7, r0
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	b10a      	cbz	r2, 800b9d2 <_printf_common+0x26>
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	6033      	str	r3, [r6, #0]
 800b9d2:	6823      	ldr	r3, [r4, #0]
 800b9d4:	0699      	lsls	r1, r3, #26
 800b9d6:	bf42      	ittt	mi
 800b9d8:	6833      	ldrmi	r3, [r6, #0]
 800b9da:	3302      	addmi	r3, #2
 800b9dc:	6033      	strmi	r3, [r6, #0]
 800b9de:	6825      	ldr	r5, [r4, #0]
 800b9e0:	f015 0506 	ands.w	r5, r5, #6
 800b9e4:	d106      	bne.n	800b9f4 <_printf_common+0x48>
 800b9e6:	f104 0a19 	add.w	sl, r4, #25
 800b9ea:	68e3      	ldr	r3, [r4, #12]
 800b9ec:	6832      	ldr	r2, [r6, #0]
 800b9ee:	1a9b      	subs	r3, r3, r2
 800b9f0:	42ab      	cmp	r3, r5
 800b9f2:	dc26      	bgt.n	800ba42 <_printf_common+0x96>
 800b9f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b9f8:	6822      	ldr	r2, [r4, #0]
 800b9fa:	3b00      	subs	r3, #0
 800b9fc:	bf18      	it	ne
 800b9fe:	2301      	movne	r3, #1
 800ba00:	0692      	lsls	r2, r2, #26
 800ba02:	d42b      	bmi.n	800ba5c <_printf_common+0xb0>
 800ba04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba08:	4641      	mov	r1, r8
 800ba0a:	4638      	mov	r0, r7
 800ba0c:	47c8      	blx	r9
 800ba0e:	3001      	adds	r0, #1
 800ba10:	d01e      	beq.n	800ba50 <_printf_common+0xa4>
 800ba12:	6823      	ldr	r3, [r4, #0]
 800ba14:	6922      	ldr	r2, [r4, #16]
 800ba16:	f003 0306 	and.w	r3, r3, #6
 800ba1a:	2b04      	cmp	r3, #4
 800ba1c:	bf02      	ittt	eq
 800ba1e:	68e5      	ldreq	r5, [r4, #12]
 800ba20:	6833      	ldreq	r3, [r6, #0]
 800ba22:	1aed      	subeq	r5, r5, r3
 800ba24:	68a3      	ldr	r3, [r4, #8]
 800ba26:	bf0c      	ite	eq
 800ba28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba2c:	2500      	movne	r5, #0
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	bfc4      	itt	gt
 800ba32:	1a9b      	subgt	r3, r3, r2
 800ba34:	18ed      	addgt	r5, r5, r3
 800ba36:	2600      	movs	r6, #0
 800ba38:	341a      	adds	r4, #26
 800ba3a:	42b5      	cmp	r5, r6
 800ba3c:	d11a      	bne.n	800ba74 <_printf_common+0xc8>
 800ba3e:	2000      	movs	r0, #0
 800ba40:	e008      	b.n	800ba54 <_printf_common+0xa8>
 800ba42:	2301      	movs	r3, #1
 800ba44:	4652      	mov	r2, sl
 800ba46:	4641      	mov	r1, r8
 800ba48:	4638      	mov	r0, r7
 800ba4a:	47c8      	blx	r9
 800ba4c:	3001      	adds	r0, #1
 800ba4e:	d103      	bne.n	800ba58 <_printf_common+0xac>
 800ba50:	f04f 30ff 	mov.w	r0, #4294967295
 800ba54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba58:	3501      	adds	r5, #1
 800ba5a:	e7c6      	b.n	800b9ea <_printf_common+0x3e>
 800ba5c:	18e1      	adds	r1, r4, r3
 800ba5e:	1c5a      	adds	r2, r3, #1
 800ba60:	2030      	movs	r0, #48	@ 0x30
 800ba62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba66:	4422      	add	r2, r4
 800ba68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba70:	3302      	adds	r3, #2
 800ba72:	e7c7      	b.n	800ba04 <_printf_common+0x58>
 800ba74:	2301      	movs	r3, #1
 800ba76:	4622      	mov	r2, r4
 800ba78:	4641      	mov	r1, r8
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	47c8      	blx	r9
 800ba7e:	3001      	adds	r0, #1
 800ba80:	d0e6      	beq.n	800ba50 <_printf_common+0xa4>
 800ba82:	3601      	adds	r6, #1
 800ba84:	e7d9      	b.n	800ba3a <_printf_common+0x8e>
	...

0800ba88 <_printf_i>:
 800ba88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba8c:	7e0f      	ldrb	r7, [r1, #24]
 800ba8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba90:	2f78      	cmp	r7, #120	@ 0x78
 800ba92:	4691      	mov	r9, r2
 800ba94:	4680      	mov	r8, r0
 800ba96:	460c      	mov	r4, r1
 800ba98:	469a      	mov	sl, r3
 800ba9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba9e:	d807      	bhi.n	800bab0 <_printf_i+0x28>
 800baa0:	2f62      	cmp	r7, #98	@ 0x62
 800baa2:	d80a      	bhi.n	800baba <_printf_i+0x32>
 800baa4:	2f00      	cmp	r7, #0
 800baa6:	f000 80d1 	beq.w	800bc4c <_printf_i+0x1c4>
 800baaa:	2f58      	cmp	r7, #88	@ 0x58
 800baac:	f000 80b8 	beq.w	800bc20 <_printf_i+0x198>
 800bab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bab8:	e03a      	b.n	800bb30 <_printf_i+0xa8>
 800baba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800babe:	2b15      	cmp	r3, #21
 800bac0:	d8f6      	bhi.n	800bab0 <_printf_i+0x28>
 800bac2:	a101      	add	r1, pc, #4	@ (adr r1, 800bac8 <_printf_i+0x40>)
 800bac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bac8:	0800bb21 	.word	0x0800bb21
 800bacc:	0800bb35 	.word	0x0800bb35
 800bad0:	0800bab1 	.word	0x0800bab1
 800bad4:	0800bab1 	.word	0x0800bab1
 800bad8:	0800bab1 	.word	0x0800bab1
 800badc:	0800bab1 	.word	0x0800bab1
 800bae0:	0800bb35 	.word	0x0800bb35
 800bae4:	0800bab1 	.word	0x0800bab1
 800bae8:	0800bab1 	.word	0x0800bab1
 800baec:	0800bab1 	.word	0x0800bab1
 800baf0:	0800bab1 	.word	0x0800bab1
 800baf4:	0800bc33 	.word	0x0800bc33
 800baf8:	0800bb5f 	.word	0x0800bb5f
 800bafc:	0800bbed 	.word	0x0800bbed
 800bb00:	0800bab1 	.word	0x0800bab1
 800bb04:	0800bab1 	.word	0x0800bab1
 800bb08:	0800bc55 	.word	0x0800bc55
 800bb0c:	0800bab1 	.word	0x0800bab1
 800bb10:	0800bb5f 	.word	0x0800bb5f
 800bb14:	0800bab1 	.word	0x0800bab1
 800bb18:	0800bab1 	.word	0x0800bab1
 800bb1c:	0800bbf5 	.word	0x0800bbf5
 800bb20:	6833      	ldr	r3, [r6, #0]
 800bb22:	1d1a      	adds	r2, r3, #4
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6032      	str	r2, [r6, #0]
 800bb28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb30:	2301      	movs	r3, #1
 800bb32:	e09c      	b.n	800bc6e <_printf_i+0x1e6>
 800bb34:	6833      	ldr	r3, [r6, #0]
 800bb36:	6820      	ldr	r0, [r4, #0]
 800bb38:	1d19      	adds	r1, r3, #4
 800bb3a:	6031      	str	r1, [r6, #0]
 800bb3c:	0606      	lsls	r6, r0, #24
 800bb3e:	d501      	bpl.n	800bb44 <_printf_i+0xbc>
 800bb40:	681d      	ldr	r5, [r3, #0]
 800bb42:	e003      	b.n	800bb4c <_printf_i+0xc4>
 800bb44:	0645      	lsls	r5, r0, #25
 800bb46:	d5fb      	bpl.n	800bb40 <_printf_i+0xb8>
 800bb48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb4c:	2d00      	cmp	r5, #0
 800bb4e:	da03      	bge.n	800bb58 <_printf_i+0xd0>
 800bb50:	232d      	movs	r3, #45	@ 0x2d
 800bb52:	426d      	negs	r5, r5
 800bb54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb58:	4858      	ldr	r0, [pc, #352]	@ (800bcbc <_printf_i+0x234>)
 800bb5a:	230a      	movs	r3, #10
 800bb5c:	e011      	b.n	800bb82 <_printf_i+0xfa>
 800bb5e:	6821      	ldr	r1, [r4, #0]
 800bb60:	6833      	ldr	r3, [r6, #0]
 800bb62:	0608      	lsls	r0, r1, #24
 800bb64:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb68:	d402      	bmi.n	800bb70 <_printf_i+0xe8>
 800bb6a:	0649      	lsls	r1, r1, #25
 800bb6c:	bf48      	it	mi
 800bb6e:	b2ad      	uxthmi	r5, r5
 800bb70:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb72:	4852      	ldr	r0, [pc, #328]	@ (800bcbc <_printf_i+0x234>)
 800bb74:	6033      	str	r3, [r6, #0]
 800bb76:	bf14      	ite	ne
 800bb78:	230a      	movne	r3, #10
 800bb7a:	2308      	moveq	r3, #8
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb82:	6866      	ldr	r6, [r4, #4]
 800bb84:	60a6      	str	r6, [r4, #8]
 800bb86:	2e00      	cmp	r6, #0
 800bb88:	db05      	blt.n	800bb96 <_printf_i+0x10e>
 800bb8a:	6821      	ldr	r1, [r4, #0]
 800bb8c:	432e      	orrs	r6, r5
 800bb8e:	f021 0104 	bic.w	r1, r1, #4
 800bb92:	6021      	str	r1, [r4, #0]
 800bb94:	d04b      	beq.n	800bc2e <_printf_i+0x1a6>
 800bb96:	4616      	mov	r6, r2
 800bb98:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb9c:	fb03 5711 	mls	r7, r3, r1, r5
 800bba0:	5dc7      	ldrb	r7, [r0, r7]
 800bba2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bba6:	462f      	mov	r7, r5
 800bba8:	42bb      	cmp	r3, r7
 800bbaa:	460d      	mov	r5, r1
 800bbac:	d9f4      	bls.n	800bb98 <_printf_i+0x110>
 800bbae:	2b08      	cmp	r3, #8
 800bbb0:	d10b      	bne.n	800bbca <_printf_i+0x142>
 800bbb2:	6823      	ldr	r3, [r4, #0]
 800bbb4:	07df      	lsls	r7, r3, #31
 800bbb6:	d508      	bpl.n	800bbca <_printf_i+0x142>
 800bbb8:	6923      	ldr	r3, [r4, #16]
 800bbba:	6861      	ldr	r1, [r4, #4]
 800bbbc:	4299      	cmp	r1, r3
 800bbbe:	bfde      	ittt	le
 800bbc0:	2330      	movle	r3, #48	@ 0x30
 800bbc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bbc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bbca:	1b92      	subs	r2, r2, r6
 800bbcc:	6122      	str	r2, [r4, #16]
 800bbce:	f8cd a000 	str.w	sl, [sp]
 800bbd2:	464b      	mov	r3, r9
 800bbd4:	aa03      	add	r2, sp, #12
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	4640      	mov	r0, r8
 800bbda:	f7ff fee7 	bl	800b9ac <_printf_common>
 800bbde:	3001      	adds	r0, #1
 800bbe0:	d14a      	bne.n	800bc78 <_printf_i+0x1f0>
 800bbe2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe6:	b004      	add	sp, #16
 800bbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbec:	6823      	ldr	r3, [r4, #0]
 800bbee:	f043 0320 	orr.w	r3, r3, #32
 800bbf2:	6023      	str	r3, [r4, #0]
 800bbf4:	4832      	ldr	r0, [pc, #200]	@ (800bcc0 <_printf_i+0x238>)
 800bbf6:	2778      	movs	r7, #120	@ 0x78
 800bbf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bbfc:	6823      	ldr	r3, [r4, #0]
 800bbfe:	6831      	ldr	r1, [r6, #0]
 800bc00:	061f      	lsls	r7, r3, #24
 800bc02:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc06:	d402      	bmi.n	800bc0e <_printf_i+0x186>
 800bc08:	065f      	lsls	r7, r3, #25
 800bc0a:	bf48      	it	mi
 800bc0c:	b2ad      	uxthmi	r5, r5
 800bc0e:	6031      	str	r1, [r6, #0]
 800bc10:	07d9      	lsls	r1, r3, #31
 800bc12:	bf44      	itt	mi
 800bc14:	f043 0320 	orrmi.w	r3, r3, #32
 800bc18:	6023      	strmi	r3, [r4, #0]
 800bc1a:	b11d      	cbz	r5, 800bc24 <_printf_i+0x19c>
 800bc1c:	2310      	movs	r3, #16
 800bc1e:	e7ad      	b.n	800bb7c <_printf_i+0xf4>
 800bc20:	4826      	ldr	r0, [pc, #152]	@ (800bcbc <_printf_i+0x234>)
 800bc22:	e7e9      	b.n	800bbf8 <_printf_i+0x170>
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	f023 0320 	bic.w	r3, r3, #32
 800bc2a:	6023      	str	r3, [r4, #0]
 800bc2c:	e7f6      	b.n	800bc1c <_printf_i+0x194>
 800bc2e:	4616      	mov	r6, r2
 800bc30:	e7bd      	b.n	800bbae <_printf_i+0x126>
 800bc32:	6833      	ldr	r3, [r6, #0]
 800bc34:	6825      	ldr	r5, [r4, #0]
 800bc36:	6961      	ldr	r1, [r4, #20]
 800bc38:	1d18      	adds	r0, r3, #4
 800bc3a:	6030      	str	r0, [r6, #0]
 800bc3c:	062e      	lsls	r6, r5, #24
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	d501      	bpl.n	800bc46 <_printf_i+0x1be>
 800bc42:	6019      	str	r1, [r3, #0]
 800bc44:	e002      	b.n	800bc4c <_printf_i+0x1c4>
 800bc46:	0668      	lsls	r0, r5, #25
 800bc48:	d5fb      	bpl.n	800bc42 <_printf_i+0x1ba>
 800bc4a:	8019      	strh	r1, [r3, #0]
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	6123      	str	r3, [r4, #16]
 800bc50:	4616      	mov	r6, r2
 800bc52:	e7bc      	b.n	800bbce <_printf_i+0x146>
 800bc54:	6833      	ldr	r3, [r6, #0]
 800bc56:	1d1a      	adds	r2, r3, #4
 800bc58:	6032      	str	r2, [r6, #0]
 800bc5a:	681e      	ldr	r6, [r3, #0]
 800bc5c:	6862      	ldr	r2, [r4, #4]
 800bc5e:	2100      	movs	r1, #0
 800bc60:	4630      	mov	r0, r6
 800bc62:	f7f4 fb45 	bl	80002f0 <memchr>
 800bc66:	b108      	cbz	r0, 800bc6c <_printf_i+0x1e4>
 800bc68:	1b80      	subs	r0, r0, r6
 800bc6a:	6060      	str	r0, [r4, #4]
 800bc6c:	6863      	ldr	r3, [r4, #4]
 800bc6e:	6123      	str	r3, [r4, #16]
 800bc70:	2300      	movs	r3, #0
 800bc72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc76:	e7aa      	b.n	800bbce <_printf_i+0x146>
 800bc78:	6923      	ldr	r3, [r4, #16]
 800bc7a:	4632      	mov	r2, r6
 800bc7c:	4649      	mov	r1, r9
 800bc7e:	4640      	mov	r0, r8
 800bc80:	47d0      	blx	sl
 800bc82:	3001      	adds	r0, #1
 800bc84:	d0ad      	beq.n	800bbe2 <_printf_i+0x15a>
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	079b      	lsls	r3, r3, #30
 800bc8a:	d413      	bmi.n	800bcb4 <_printf_i+0x22c>
 800bc8c:	68e0      	ldr	r0, [r4, #12]
 800bc8e:	9b03      	ldr	r3, [sp, #12]
 800bc90:	4298      	cmp	r0, r3
 800bc92:	bfb8      	it	lt
 800bc94:	4618      	movlt	r0, r3
 800bc96:	e7a6      	b.n	800bbe6 <_printf_i+0x15e>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	4632      	mov	r2, r6
 800bc9c:	4649      	mov	r1, r9
 800bc9e:	4640      	mov	r0, r8
 800bca0:	47d0      	blx	sl
 800bca2:	3001      	adds	r0, #1
 800bca4:	d09d      	beq.n	800bbe2 <_printf_i+0x15a>
 800bca6:	3501      	adds	r5, #1
 800bca8:	68e3      	ldr	r3, [r4, #12]
 800bcaa:	9903      	ldr	r1, [sp, #12]
 800bcac:	1a5b      	subs	r3, r3, r1
 800bcae:	42ab      	cmp	r3, r5
 800bcb0:	dcf2      	bgt.n	800bc98 <_printf_i+0x210>
 800bcb2:	e7eb      	b.n	800bc8c <_printf_i+0x204>
 800bcb4:	2500      	movs	r5, #0
 800bcb6:	f104 0619 	add.w	r6, r4, #25
 800bcba:	e7f5      	b.n	800bca8 <_printf_i+0x220>
 800bcbc:	0800dcde 	.word	0x0800dcde
 800bcc0:	0800dcef 	.word	0x0800dcef

0800bcc4 <std>:
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	b510      	push	{r4, lr}
 800bcc8:	4604      	mov	r4, r0
 800bcca:	e9c0 3300 	strd	r3, r3, [r0]
 800bcce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcd2:	6083      	str	r3, [r0, #8]
 800bcd4:	8181      	strh	r1, [r0, #12]
 800bcd6:	6643      	str	r3, [r0, #100]	@ 0x64
 800bcd8:	81c2      	strh	r2, [r0, #14]
 800bcda:	6183      	str	r3, [r0, #24]
 800bcdc:	4619      	mov	r1, r3
 800bcde:	2208      	movs	r2, #8
 800bce0:	305c      	adds	r0, #92	@ 0x5c
 800bce2:	f000 f906 	bl	800bef2 <memset>
 800bce6:	4b0d      	ldr	r3, [pc, #52]	@ (800bd1c <std+0x58>)
 800bce8:	6263      	str	r3, [r4, #36]	@ 0x24
 800bcea:	4b0d      	ldr	r3, [pc, #52]	@ (800bd20 <std+0x5c>)
 800bcec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bcee:	4b0d      	ldr	r3, [pc, #52]	@ (800bd24 <std+0x60>)
 800bcf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bcf2:	4b0d      	ldr	r3, [pc, #52]	@ (800bd28 <std+0x64>)
 800bcf4:	6323      	str	r3, [r4, #48]	@ 0x30
 800bcf6:	4b0d      	ldr	r3, [pc, #52]	@ (800bd2c <std+0x68>)
 800bcf8:	6224      	str	r4, [r4, #32]
 800bcfa:	429c      	cmp	r4, r3
 800bcfc:	d006      	beq.n	800bd0c <std+0x48>
 800bcfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd02:	4294      	cmp	r4, r2
 800bd04:	d002      	beq.n	800bd0c <std+0x48>
 800bd06:	33d0      	adds	r3, #208	@ 0xd0
 800bd08:	429c      	cmp	r4, r3
 800bd0a:	d105      	bne.n	800bd18 <std+0x54>
 800bd0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd14:	f000 b96a 	b.w	800bfec <__retarget_lock_init_recursive>
 800bd18:	bd10      	pop	{r4, pc}
 800bd1a:	bf00      	nop
 800bd1c:	0800be6d 	.word	0x0800be6d
 800bd20:	0800be8f 	.word	0x0800be8f
 800bd24:	0800bec7 	.word	0x0800bec7
 800bd28:	0800beeb 	.word	0x0800beeb
 800bd2c:	240003e8 	.word	0x240003e8

0800bd30 <stdio_exit_handler>:
 800bd30:	4a02      	ldr	r2, [pc, #8]	@ (800bd3c <stdio_exit_handler+0xc>)
 800bd32:	4903      	ldr	r1, [pc, #12]	@ (800bd40 <stdio_exit_handler+0x10>)
 800bd34:	4803      	ldr	r0, [pc, #12]	@ (800bd44 <stdio_exit_handler+0x14>)
 800bd36:	f000 b869 	b.w	800be0c <_fwalk_sglue>
 800bd3a:	bf00      	nop
 800bd3c:	24000014 	.word	0x24000014
 800bd40:	0800d845 	.word	0x0800d845
 800bd44:	24000024 	.word	0x24000024

0800bd48 <cleanup_stdio>:
 800bd48:	6841      	ldr	r1, [r0, #4]
 800bd4a:	4b0c      	ldr	r3, [pc, #48]	@ (800bd7c <cleanup_stdio+0x34>)
 800bd4c:	4299      	cmp	r1, r3
 800bd4e:	b510      	push	{r4, lr}
 800bd50:	4604      	mov	r4, r0
 800bd52:	d001      	beq.n	800bd58 <cleanup_stdio+0x10>
 800bd54:	f001 fd76 	bl	800d844 <_fflush_r>
 800bd58:	68a1      	ldr	r1, [r4, #8]
 800bd5a:	4b09      	ldr	r3, [pc, #36]	@ (800bd80 <cleanup_stdio+0x38>)
 800bd5c:	4299      	cmp	r1, r3
 800bd5e:	d002      	beq.n	800bd66 <cleanup_stdio+0x1e>
 800bd60:	4620      	mov	r0, r4
 800bd62:	f001 fd6f 	bl	800d844 <_fflush_r>
 800bd66:	68e1      	ldr	r1, [r4, #12]
 800bd68:	4b06      	ldr	r3, [pc, #24]	@ (800bd84 <cleanup_stdio+0x3c>)
 800bd6a:	4299      	cmp	r1, r3
 800bd6c:	d004      	beq.n	800bd78 <cleanup_stdio+0x30>
 800bd6e:	4620      	mov	r0, r4
 800bd70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd74:	f001 bd66 	b.w	800d844 <_fflush_r>
 800bd78:	bd10      	pop	{r4, pc}
 800bd7a:	bf00      	nop
 800bd7c:	240003e8 	.word	0x240003e8
 800bd80:	24000450 	.word	0x24000450
 800bd84:	240004b8 	.word	0x240004b8

0800bd88 <global_stdio_init.part.0>:
 800bd88:	b510      	push	{r4, lr}
 800bd8a:	4b0b      	ldr	r3, [pc, #44]	@ (800bdb8 <global_stdio_init.part.0+0x30>)
 800bd8c:	4c0b      	ldr	r4, [pc, #44]	@ (800bdbc <global_stdio_init.part.0+0x34>)
 800bd8e:	4a0c      	ldr	r2, [pc, #48]	@ (800bdc0 <global_stdio_init.part.0+0x38>)
 800bd90:	601a      	str	r2, [r3, #0]
 800bd92:	4620      	mov	r0, r4
 800bd94:	2200      	movs	r2, #0
 800bd96:	2104      	movs	r1, #4
 800bd98:	f7ff ff94 	bl	800bcc4 <std>
 800bd9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bda0:	2201      	movs	r2, #1
 800bda2:	2109      	movs	r1, #9
 800bda4:	f7ff ff8e 	bl	800bcc4 <std>
 800bda8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bdac:	2202      	movs	r2, #2
 800bdae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdb2:	2112      	movs	r1, #18
 800bdb4:	f7ff bf86 	b.w	800bcc4 <std>
 800bdb8:	24000520 	.word	0x24000520
 800bdbc:	240003e8 	.word	0x240003e8
 800bdc0:	0800bd31 	.word	0x0800bd31

0800bdc4 <__sfp_lock_acquire>:
 800bdc4:	4801      	ldr	r0, [pc, #4]	@ (800bdcc <__sfp_lock_acquire+0x8>)
 800bdc6:	f000 b912 	b.w	800bfee <__retarget_lock_acquire_recursive>
 800bdca:	bf00      	nop
 800bdcc:	24000529 	.word	0x24000529

0800bdd0 <__sfp_lock_release>:
 800bdd0:	4801      	ldr	r0, [pc, #4]	@ (800bdd8 <__sfp_lock_release+0x8>)
 800bdd2:	f000 b90d 	b.w	800bff0 <__retarget_lock_release_recursive>
 800bdd6:	bf00      	nop
 800bdd8:	24000529 	.word	0x24000529

0800bddc <__sinit>:
 800bddc:	b510      	push	{r4, lr}
 800bdde:	4604      	mov	r4, r0
 800bde0:	f7ff fff0 	bl	800bdc4 <__sfp_lock_acquire>
 800bde4:	6a23      	ldr	r3, [r4, #32]
 800bde6:	b11b      	cbz	r3, 800bdf0 <__sinit+0x14>
 800bde8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdec:	f7ff bff0 	b.w	800bdd0 <__sfp_lock_release>
 800bdf0:	4b04      	ldr	r3, [pc, #16]	@ (800be04 <__sinit+0x28>)
 800bdf2:	6223      	str	r3, [r4, #32]
 800bdf4:	4b04      	ldr	r3, [pc, #16]	@ (800be08 <__sinit+0x2c>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1f5      	bne.n	800bde8 <__sinit+0xc>
 800bdfc:	f7ff ffc4 	bl	800bd88 <global_stdio_init.part.0>
 800be00:	e7f2      	b.n	800bde8 <__sinit+0xc>
 800be02:	bf00      	nop
 800be04:	0800bd49 	.word	0x0800bd49
 800be08:	24000520 	.word	0x24000520

0800be0c <_fwalk_sglue>:
 800be0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be10:	4607      	mov	r7, r0
 800be12:	4688      	mov	r8, r1
 800be14:	4614      	mov	r4, r2
 800be16:	2600      	movs	r6, #0
 800be18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be1c:	f1b9 0901 	subs.w	r9, r9, #1
 800be20:	d505      	bpl.n	800be2e <_fwalk_sglue+0x22>
 800be22:	6824      	ldr	r4, [r4, #0]
 800be24:	2c00      	cmp	r4, #0
 800be26:	d1f7      	bne.n	800be18 <_fwalk_sglue+0xc>
 800be28:	4630      	mov	r0, r6
 800be2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2e:	89ab      	ldrh	r3, [r5, #12]
 800be30:	2b01      	cmp	r3, #1
 800be32:	d907      	bls.n	800be44 <_fwalk_sglue+0x38>
 800be34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be38:	3301      	adds	r3, #1
 800be3a:	d003      	beq.n	800be44 <_fwalk_sglue+0x38>
 800be3c:	4629      	mov	r1, r5
 800be3e:	4638      	mov	r0, r7
 800be40:	47c0      	blx	r8
 800be42:	4306      	orrs	r6, r0
 800be44:	3568      	adds	r5, #104	@ 0x68
 800be46:	e7e9      	b.n	800be1c <_fwalk_sglue+0x10>

0800be48 <iprintf>:
 800be48:	b40f      	push	{r0, r1, r2, r3}
 800be4a:	b507      	push	{r0, r1, r2, lr}
 800be4c:	4906      	ldr	r1, [pc, #24]	@ (800be68 <iprintf+0x20>)
 800be4e:	ab04      	add	r3, sp, #16
 800be50:	6808      	ldr	r0, [r1, #0]
 800be52:	f853 2b04 	ldr.w	r2, [r3], #4
 800be56:	6881      	ldr	r1, [r0, #8]
 800be58:	9301      	str	r3, [sp, #4]
 800be5a:	f001 fb57 	bl	800d50c <_vfiprintf_r>
 800be5e:	b003      	add	sp, #12
 800be60:	f85d eb04 	ldr.w	lr, [sp], #4
 800be64:	b004      	add	sp, #16
 800be66:	4770      	bx	lr
 800be68:	24000020 	.word	0x24000020

0800be6c <__sread>:
 800be6c:	b510      	push	{r4, lr}
 800be6e:	460c      	mov	r4, r1
 800be70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be74:	f000 f86c 	bl	800bf50 <_read_r>
 800be78:	2800      	cmp	r0, #0
 800be7a:	bfab      	itete	ge
 800be7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800be7e:	89a3      	ldrhlt	r3, [r4, #12]
 800be80:	181b      	addge	r3, r3, r0
 800be82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800be86:	bfac      	ite	ge
 800be88:	6563      	strge	r3, [r4, #84]	@ 0x54
 800be8a:	81a3      	strhlt	r3, [r4, #12]
 800be8c:	bd10      	pop	{r4, pc}

0800be8e <__swrite>:
 800be8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be92:	461f      	mov	r7, r3
 800be94:	898b      	ldrh	r3, [r1, #12]
 800be96:	05db      	lsls	r3, r3, #23
 800be98:	4605      	mov	r5, r0
 800be9a:	460c      	mov	r4, r1
 800be9c:	4616      	mov	r6, r2
 800be9e:	d505      	bpl.n	800beac <__swrite+0x1e>
 800bea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea4:	2302      	movs	r3, #2
 800bea6:	2200      	movs	r2, #0
 800bea8:	f000 f840 	bl	800bf2c <_lseek_r>
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800beb6:	81a3      	strh	r3, [r4, #12]
 800beb8:	4632      	mov	r2, r6
 800beba:	463b      	mov	r3, r7
 800bebc:	4628      	mov	r0, r5
 800bebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bec2:	f000 b857 	b.w	800bf74 <_write_r>

0800bec6 <__sseek>:
 800bec6:	b510      	push	{r4, lr}
 800bec8:	460c      	mov	r4, r1
 800beca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bece:	f000 f82d 	bl	800bf2c <_lseek_r>
 800bed2:	1c43      	adds	r3, r0, #1
 800bed4:	89a3      	ldrh	r3, [r4, #12]
 800bed6:	bf15      	itete	ne
 800bed8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800beda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bede:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bee2:	81a3      	strheq	r3, [r4, #12]
 800bee4:	bf18      	it	ne
 800bee6:	81a3      	strhne	r3, [r4, #12]
 800bee8:	bd10      	pop	{r4, pc}

0800beea <__sclose>:
 800beea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beee:	f000 b80d 	b.w	800bf0c <_close_r>

0800bef2 <memset>:
 800bef2:	4402      	add	r2, r0
 800bef4:	4603      	mov	r3, r0
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d100      	bne.n	800befc <memset+0xa>
 800befa:	4770      	bx	lr
 800befc:	f803 1b01 	strb.w	r1, [r3], #1
 800bf00:	e7f9      	b.n	800bef6 <memset+0x4>
	...

0800bf04 <_localeconv_r>:
 800bf04:	4800      	ldr	r0, [pc, #0]	@ (800bf08 <_localeconv_r+0x4>)
 800bf06:	4770      	bx	lr
 800bf08:	24000160 	.word	0x24000160

0800bf0c <_close_r>:
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	4d06      	ldr	r5, [pc, #24]	@ (800bf28 <_close_r+0x1c>)
 800bf10:	2300      	movs	r3, #0
 800bf12:	4604      	mov	r4, r0
 800bf14:	4608      	mov	r0, r1
 800bf16:	602b      	str	r3, [r5, #0]
 800bf18:	f7f5 f9f0 	bl	80012fc <_close>
 800bf1c:	1c43      	adds	r3, r0, #1
 800bf1e:	d102      	bne.n	800bf26 <_close_r+0x1a>
 800bf20:	682b      	ldr	r3, [r5, #0]
 800bf22:	b103      	cbz	r3, 800bf26 <_close_r+0x1a>
 800bf24:	6023      	str	r3, [r4, #0]
 800bf26:	bd38      	pop	{r3, r4, r5, pc}
 800bf28:	24000524 	.word	0x24000524

0800bf2c <_lseek_r>:
 800bf2c:	b538      	push	{r3, r4, r5, lr}
 800bf2e:	4d07      	ldr	r5, [pc, #28]	@ (800bf4c <_lseek_r+0x20>)
 800bf30:	4604      	mov	r4, r0
 800bf32:	4608      	mov	r0, r1
 800bf34:	4611      	mov	r1, r2
 800bf36:	2200      	movs	r2, #0
 800bf38:	602a      	str	r2, [r5, #0]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	f7f5 fa05 	bl	800134a <_lseek>
 800bf40:	1c43      	adds	r3, r0, #1
 800bf42:	d102      	bne.n	800bf4a <_lseek_r+0x1e>
 800bf44:	682b      	ldr	r3, [r5, #0]
 800bf46:	b103      	cbz	r3, 800bf4a <_lseek_r+0x1e>
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
 800bf4c:	24000524 	.word	0x24000524

0800bf50 <_read_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4d07      	ldr	r5, [pc, #28]	@ (800bf70 <_read_r+0x20>)
 800bf54:	4604      	mov	r4, r0
 800bf56:	4608      	mov	r0, r1
 800bf58:	4611      	mov	r1, r2
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	602a      	str	r2, [r5, #0]
 800bf5e:	461a      	mov	r2, r3
 800bf60:	f7f5 f993 	bl	800128a <_read>
 800bf64:	1c43      	adds	r3, r0, #1
 800bf66:	d102      	bne.n	800bf6e <_read_r+0x1e>
 800bf68:	682b      	ldr	r3, [r5, #0]
 800bf6a:	b103      	cbz	r3, 800bf6e <_read_r+0x1e>
 800bf6c:	6023      	str	r3, [r4, #0]
 800bf6e:	bd38      	pop	{r3, r4, r5, pc}
 800bf70:	24000524 	.word	0x24000524

0800bf74 <_write_r>:
 800bf74:	b538      	push	{r3, r4, r5, lr}
 800bf76:	4d07      	ldr	r5, [pc, #28]	@ (800bf94 <_write_r+0x20>)
 800bf78:	4604      	mov	r4, r0
 800bf7a:	4608      	mov	r0, r1
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	2200      	movs	r2, #0
 800bf80:	602a      	str	r2, [r5, #0]
 800bf82:	461a      	mov	r2, r3
 800bf84:	f7f5 f99e 	bl	80012c4 <_write>
 800bf88:	1c43      	adds	r3, r0, #1
 800bf8a:	d102      	bne.n	800bf92 <_write_r+0x1e>
 800bf8c:	682b      	ldr	r3, [r5, #0]
 800bf8e:	b103      	cbz	r3, 800bf92 <_write_r+0x1e>
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	bd38      	pop	{r3, r4, r5, pc}
 800bf94:	24000524 	.word	0x24000524

0800bf98 <__errno>:
 800bf98:	4b01      	ldr	r3, [pc, #4]	@ (800bfa0 <__errno+0x8>)
 800bf9a:	6818      	ldr	r0, [r3, #0]
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	24000020 	.word	0x24000020

0800bfa4 <__libc_init_array>:
 800bfa4:	b570      	push	{r4, r5, r6, lr}
 800bfa6:	4d0d      	ldr	r5, [pc, #52]	@ (800bfdc <__libc_init_array+0x38>)
 800bfa8:	4c0d      	ldr	r4, [pc, #52]	@ (800bfe0 <__libc_init_array+0x3c>)
 800bfaa:	1b64      	subs	r4, r4, r5
 800bfac:	10a4      	asrs	r4, r4, #2
 800bfae:	2600      	movs	r6, #0
 800bfb0:	42a6      	cmp	r6, r4
 800bfb2:	d109      	bne.n	800bfc8 <__libc_init_array+0x24>
 800bfb4:	4d0b      	ldr	r5, [pc, #44]	@ (800bfe4 <__libc_init_array+0x40>)
 800bfb6:	4c0c      	ldr	r4, [pc, #48]	@ (800bfe8 <__libc_init_array+0x44>)
 800bfb8:	f001 fe52 	bl	800dc60 <_init>
 800bfbc:	1b64      	subs	r4, r4, r5
 800bfbe:	10a4      	asrs	r4, r4, #2
 800bfc0:	2600      	movs	r6, #0
 800bfc2:	42a6      	cmp	r6, r4
 800bfc4:	d105      	bne.n	800bfd2 <__libc_init_array+0x2e>
 800bfc6:	bd70      	pop	{r4, r5, r6, pc}
 800bfc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfcc:	4798      	blx	r3
 800bfce:	3601      	adds	r6, #1
 800bfd0:	e7ee      	b.n	800bfb0 <__libc_init_array+0xc>
 800bfd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfd6:	4798      	blx	r3
 800bfd8:	3601      	adds	r6, #1
 800bfda:	e7f2      	b.n	800bfc2 <__libc_init_array+0x1e>
 800bfdc:	0800e04c 	.word	0x0800e04c
 800bfe0:	0800e04c 	.word	0x0800e04c
 800bfe4:	0800e04c 	.word	0x0800e04c
 800bfe8:	0800e050 	.word	0x0800e050

0800bfec <__retarget_lock_init_recursive>:
 800bfec:	4770      	bx	lr

0800bfee <__retarget_lock_acquire_recursive>:
 800bfee:	4770      	bx	lr

0800bff0 <__retarget_lock_release_recursive>:
 800bff0:	4770      	bx	lr

0800bff2 <quorem>:
 800bff2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff6:	6903      	ldr	r3, [r0, #16]
 800bff8:	690c      	ldr	r4, [r1, #16]
 800bffa:	42a3      	cmp	r3, r4
 800bffc:	4607      	mov	r7, r0
 800bffe:	db7e      	blt.n	800c0fe <quorem+0x10c>
 800c000:	3c01      	subs	r4, #1
 800c002:	f101 0814 	add.w	r8, r1, #20
 800c006:	00a3      	lsls	r3, r4, #2
 800c008:	f100 0514 	add.w	r5, r0, #20
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c012:	9301      	str	r3, [sp, #4]
 800c014:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c018:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c01c:	3301      	adds	r3, #1
 800c01e:	429a      	cmp	r2, r3
 800c020:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c024:	fbb2 f6f3 	udiv	r6, r2, r3
 800c028:	d32e      	bcc.n	800c088 <quorem+0x96>
 800c02a:	f04f 0a00 	mov.w	sl, #0
 800c02e:	46c4      	mov	ip, r8
 800c030:	46ae      	mov	lr, r5
 800c032:	46d3      	mov	fp, sl
 800c034:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c038:	b298      	uxth	r0, r3
 800c03a:	fb06 a000 	mla	r0, r6, r0, sl
 800c03e:	0c02      	lsrs	r2, r0, #16
 800c040:	0c1b      	lsrs	r3, r3, #16
 800c042:	fb06 2303 	mla	r3, r6, r3, r2
 800c046:	f8de 2000 	ldr.w	r2, [lr]
 800c04a:	b280      	uxth	r0, r0
 800c04c:	b292      	uxth	r2, r2
 800c04e:	1a12      	subs	r2, r2, r0
 800c050:	445a      	add	r2, fp
 800c052:	f8de 0000 	ldr.w	r0, [lr]
 800c056:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c060:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c064:	b292      	uxth	r2, r2
 800c066:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c06a:	45e1      	cmp	r9, ip
 800c06c:	f84e 2b04 	str.w	r2, [lr], #4
 800c070:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c074:	d2de      	bcs.n	800c034 <quorem+0x42>
 800c076:	9b00      	ldr	r3, [sp, #0]
 800c078:	58eb      	ldr	r3, [r5, r3]
 800c07a:	b92b      	cbnz	r3, 800c088 <quorem+0x96>
 800c07c:	9b01      	ldr	r3, [sp, #4]
 800c07e:	3b04      	subs	r3, #4
 800c080:	429d      	cmp	r5, r3
 800c082:	461a      	mov	r2, r3
 800c084:	d32f      	bcc.n	800c0e6 <quorem+0xf4>
 800c086:	613c      	str	r4, [r7, #16]
 800c088:	4638      	mov	r0, r7
 800c08a:	f001 f90d 	bl	800d2a8 <__mcmp>
 800c08e:	2800      	cmp	r0, #0
 800c090:	db25      	blt.n	800c0de <quorem+0xec>
 800c092:	4629      	mov	r1, r5
 800c094:	2000      	movs	r0, #0
 800c096:	f858 2b04 	ldr.w	r2, [r8], #4
 800c09a:	f8d1 c000 	ldr.w	ip, [r1]
 800c09e:	fa1f fe82 	uxth.w	lr, r2
 800c0a2:	fa1f f38c 	uxth.w	r3, ip
 800c0a6:	eba3 030e 	sub.w	r3, r3, lr
 800c0aa:	4403      	add	r3, r0
 800c0ac:	0c12      	lsrs	r2, r2, #16
 800c0ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c0b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0bc:	45c1      	cmp	r9, r8
 800c0be:	f841 3b04 	str.w	r3, [r1], #4
 800c0c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c0c6:	d2e6      	bcs.n	800c096 <quorem+0xa4>
 800c0c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0d0:	b922      	cbnz	r2, 800c0dc <quorem+0xea>
 800c0d2:	3b04      	subs	r3, #4
 800c0d4:	429d      	cmp	r5, r3
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	d30b      	bcc.n	800c0f2 <quorem+0x100>
 800c0da:	613c      	str	r4, [r7, #16]
 800c0dc:	3601      	adds	r6, #1
 800c0de:	4630      	mov	r0, r6
 800c0e0:	b003      	add	sp, #12
 800c0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e6:	6812      	ldr	r2, [r2, #0]
 800c0e8:	3b04      	subs	r3, #4
 800c0ea:	2a00      	cmp	r2, #0
 800c0ec:	d1cb      	bne.n	800c086 <quorem+0x94>
 800c0ee:	3c01      	subs	r4, #1
 800c0f0:	e7c6      	b.n	800c080 <quorem+0x8e>
 800c0f2:	6812      	ldr	r2, [r2, #0]
 800c0f4:	3b04      	subs	r3, #4
 800c0f6:	2a00      	cmp	r2, #0
 800c0f8:	d1ef      	bne.n	800c0da <quorem+0xe8>
 800c0fa:	3c01      	subs	r4, #1
 800c0fc:	e7ea      	b.n	800c0d4 <quorem+0xe2>
 800c0fe:	2000      	movs	r0, #0
 800c100:	e7ee      	b.n	800c0e0 <quorem+0xee>
 800c102:	0000      	movs	r0, r0
 800c104:	0000      	movs	r0, r0
	...

0800c108 <_dtoa_r>:
 800c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10c:	ed2d 8b02 	vpush	{d8}
 800c110:	69c7      	ldr	r7, [r0, #28]
 800c112:	b091      	sub	sp, #68	@ 0x44
 800c114:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c118:	ec55 4b10 	vmov	r4, r5, d0
 800c11c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c11e:	9107      	str	r1, [sp, #28]
 800c120:	4681      	mov	r9, r0
 800c122:	9209      	str	r2, [sp, #36]	@ 0x24
 800c124:	930d      	str	r3, [sp, #52]	@ 0x34
 800c126:	b97f      	cbnz	r7, 800c148 <_dtoa_r+0x40>
 800c128:	2010      	movs	r0, #16
 800c12a:	f000 fd95 	bl	800cc58 <malloc>
 800c12e:	4602      	mov	r2, r0
 800c130:	f8c9 001c 	str.w	r0, [r9, #28]
 800c134:	b920      	cbnz	r0, 800c140 <_dtoa_r+0x38>
 800c136:	4ba0      	ldr	r3, [pc, #640]	@ (800c3b8 <_dtoa_r+0x2b0>)
 800c138:	21ef      	movs	r1, #239	@ 0xef
 800c13a:	48a0      	ldr	r0, [pc, #640]	@ (800c3bc <_dtoa_r+0x2b4>)
 800c13c:	f001 fc5c 	bl	800d9f8 <__assert_func>
 800c140:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c144:	6007      	str	r7, [r0, #0]
 800c146:	60c7      	str	r7, [r0, #12]
 800c148:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c14c:	6819      	ldr	r1, [r3, #0]
 800c14e:	b159      	cbz	r1, 800c168 <_dtoa_r+0x60>
 800c150:	685a      	ldr	r2, [r3, #4]
 800c152:	604a      	str	r2, [r1, #4]
 800c154:	2301      	movs	r3, #1
 800c156:	4093      	lsls	r3, r2
 800c158:	608b      	str	r3, [r1, #8]
 800c15a:	4648      	mov	r0, r9
 800c15c:	f000 fe72 	bl	800ce44 <_Bfree>
 800c160:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c164:	2200      	movs	r2, #0
 800c166:	601a      	str	r2, [r3, #0]
 800c168:	1e2b      	subs	r3, r5, #0
 800c16a:	bfbb      	ittet	lt
 800c16c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c170:	9303      	strlt	r3, [sp, #12]
 800c172:	2300      	movge	r3, #0
 800c174:	2201      	movlt	r2, #1
 800c176:	bfac      	ite	ge
 800c178:	6033      	strge	r3, [r6, #0]
 800c17a:	6032      	strlt	r2, [r6, #0]
 800c17c:	4b90      	ldr	r3, [pc, #576]	@ (800c3c0 <_dtoa_r+0x2b8>)
 800c17e:	9e03      	ldr	r6, [sp, #12]
 800c180:	43b3      	bics	r3, r6
 800c182:	d110      	bne.n	800c1a6 <_dtoa_r+0x9e>
 800c184:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c186:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c18a:	6013      	str	r3, [r2, #0]
 800c18c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c190:	4323      	orrs	r3, r4
 800c192:	f000 84e6 	beq.w	800cb62 <_dtoa_r+0xa5a>
 800c196:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c198:	4f8a      	ldr	r7, [pc, #552]	@ (800c3c4 <_dtoa_r+0x2bc>)
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f000 84e8 	beq.w	800cb70 <_dtoa_r+0xa68>
 800c1a0:	1cfb      	adds	r3, r7, #3
 800c1a2:	f000 bce3 	b.w	800cb6c <_dtoa_r+0xa64>
 800c1a6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c1aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1b2:	d10a      	bne.n	800c1ca <_dtoa_r+0xc2>
 800c1b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	6013      	str	r3, [r2, #0]
 800c1ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c1bc:	b113      	cbz	r3, 800c1c4 <_dtoa_r+0xbc>
 800c1be:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c1c0:	4b81      	ldr	r3, [pc, #516]	@ (800c3c8 <_dtoa_r+0x2c0>)
 800c1c2:	6013      	str	r3, [r2, #0]
 800c1c4:	4f81      	ldr	r7, [pc, #516]	@ (800c3cc <_dtoa_r+0x2c4>)
 800c1c6:	f000 bcd3 	b.w	800cb70 <_dtoa_r+0xa68>
 800c1ca:	aa0e      	add	r2, sp, #56	@ 0x38
 800c1cc:	a90f      	add	r1, sp, #60	@ 0x3c
 800c1ce:	4648      	mov	r0, r9
 800c1d0:	eeb0 0b48 	vmov.f64	d0, d8
 800c1d4:	f001 f918 	bl	800d408 <__d2b>
 800c1d8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c1dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1de:	9001      	str	r0, [sp, #4]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d045      	beq.n	800c270 <_dtoa_r+0x168>
 800c1e4:	eeb0 7b48 	vmov.f64	d7, d8
 800c1e8:	ee18 1a90 	vmov	r1, s17
 800c1ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c1f0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c1f4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c1f8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c1fc:	2500      	movs	r5, #0
 800c1fe:	ee07 1a90 	vmov	s15, r1
 800c202:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c206:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c3a0 <_dtoa_r+0x298>
 800c20a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c20e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c3a8 <_dtoa_r+0x2a0>
 800c212:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c216:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c3b0 <_dtoa_r+0x2a8>
 800c21a:	ee07 3a90 	vmov	s15, r3
 800c21e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c222:	eeb0 7b46 	vmov.f64	d7, d6
 800c226:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c22a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c22e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c236:	ee16 8a90 	vmov	r8, s13
 800c23a:	d508      	bpl.n	800c24e <_dtoa_r+0x146>
 800c23c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c240:	eeb4 6b47 	vcmp.f64	d6, d7
 800c244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c248:	bf18      	it	ne
 800c24a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800c24e:	f1b8 0f16 	cmp.w	r8, #22
 800c252:	d82b      	bhi.n	800c2ac <_dtoa_r+0x1a4>
 800c254:	495e      	ldr	r1, [pc, #376]	@ (800c3d0 <_dtoa_r+0x2c8>)
 800c256:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c25a:	ed91 7b00 	vldr	d7, [r1]
 800c25e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c266:	d501      	bpl.n	800c26c <_dtoa_r+0x164>
 800c268:	f108 38ff 	add.w	r8, r8, #4294967295
 800c26c:	2100      	movs	r1, #0
 800c26e:	e01e      	b.n	800c2ae <_dtoa_r+0x1a6>
 800c270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c272:	4413      	add	r3, r2
 800c274:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c278:	2920      	cmp	r1, #32
 800c27a:	bfc1      	itttt	gt
 800c27c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c280:	408e      	lslgt	r6, r1
 800c282:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c286:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c28a:	bfd6      	itet	le
 800c28c:	f1c1 0120 	rsble	r1, r1, #32
 800c290:	4331      	orrgt	r1, r6
 800c292:	fa04 f101 	lslle.w	r1, r4, r1
 800c296:	ee07 1a90 	vmov	s15, r1
 800c29a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	ee17 1a90 	vmov	r1, s15
 800c2a4:	2501      	movs	r5, #1
 800c2a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c2aa:	e7a8      	b.n	800c1fe <_dtoa_r+0xf6>
 800c2ac:	2101      	movs	r1, #1
 800c2ae:	1ad2      	subs	r2, r2, r3
 800c2b0:	1e53      	subs	r3, r2, #1
 800c2b2:	9306      	str	r3, [sp, #24]
 800c2b4:	bf45      	ittet	mi
 800c2b6:	f1c2 0301 	rsbmi	r3, r2, #1
 800c2ba:	9304      	strmi	r3, [sp, #16]
 800c2bc:	2300      	movpl	r3, #0
 800c2be:	2300      	movmi	r3, #0
 800c2c0:	bf4c      	ite	mi
 800c2c2:	9306      	strmi	r3, [sp, #24]
 800c2c4:	9304      	strpl	r3, [sp, #16]
 800c2c6:	f1b8 0f00 	cmp.w	r8, #0
 800c2ca:	910c      	str	r1, [sp, #48]	@ 0x30
 800c2cc:	db18      	blt.n	800c300 <_dtoa_r+0x1f8>
 800c2ce:	9b06      	ldr	r3, [sp, #24]
 800c2d0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c2d4:	4443      	add	r3, r8
 800c2d6:	9306      	str	r3, [sp, #24]
 800c2d8:	2300      	movs	r3, #0
 800c2da:	9a07      	ldr	r2, [sp, #28]
 800c2dc:	2a09      	cmp	r2, #9
 800c2de:	d845      	bhi.n	800c36c <_dtoa_r+0x264>
 800c2e0:	2a05      	cmp	r2, #5
 800c2e2:	bfc4      	itt	gt
 800c2e4:	3a04      	subgt	r2, #4
 800c2e6:	9207      	strgt	r2, [sp, #28]
 800c2e8:	9a07      	ldr	r2, [sp, #28]
 800c2ea:	f1a2 0202 	sub.w	r2, r2, #2
 800c2ee:	bfcc      	ite	gt
 800c2f0:	2400      	movgt	r4, #0
 800c2f2:	2401      	movle	r4, #1
 800c2f4:	2a03      	cmp	r2, #3
 800c2f6:	d844      	bhi.n	800c382 <_dtoa_r+0x27a>
 800c2f8:	e8df f002 	tbb	[pc, r2]
 800c2fc:	0b173634 	.word	0x0b173634
 800c300:	9b04      	ldr	r3, [sp, #16]
 800c302:	2200      	movs	r2, #0
 800c304:	eba3 0308 	sub.w	r3, r3, r8
 800c308:	9304      	str	r3, [sp, #16]
 800c30a:	920a      	str	r2, [sp, #40]	@ 0x28
 800c30c:	f1c8 0300 	rsb	r3, r8, #0
 800c310:	e7e3      	b.n	800c2da <_dtoa_r+0x1d2>
 800c312:	2201      	movs	r2, #1
 800c314:	9208      	str	r2, [sp, #32]
 800c316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c318:	eb08 0b02 	add.w	fp, r8, r2
 800c31c:	f10b 0a01 	add.w	sl, fp, #1
 800c320:	4652      	mov	r2, sl
 800c322:	2a01      	cmp	r2, #1
 800c324:	bfb8      	it	lt
 800c326:	2201      	movlt	r2, #1
 800c328:	e006      	b.n	800c338 <_dtoa_r+0x230>
 800c32a:	2201      	movs	r2, #1
 800c32c:	9208      	str	r2, [sp, #32]
 800c32e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c330:	2a00      	cmp	r2, #0
 800c332:	dd29      	ble.n	800c388 <_dtoa_r+0x280>
 800c334:	4693      	mov	fp, r2
 800c336:	4692      	mov	sl, r2
 800c338:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c33c:	2100      	movs	r1, #0
 800c33e:	2004      	movs	r0, #4
 800c340:	f100 0614 	add.w	r6, r0, #20
 800c344:	4296      	cmp	r6, r2
 800c346:	d926      	bls.n	800c396 <_dtoa_r+0x28e>
 800c348:	6079      	str	r1, [r7, #4]
 800c34a:	4648      	mov	r0, r9
 800c34c:	9305      	str	r3, [sp, #20]
 800c34e:	f000 fd39 	bl	800cdc4 <_Balloc>
 800c352:	9b05      	ldr	r3, [sp, #20]
 800c354:	4607      	mov	r7, r0
 800c356:	2800      	cmp	r0, #0
 800c358:	d13e      	bne.n	800c3d8 <_dtoa_r+0x2d0>
 800c35a:	4b1e      	ldr	r3, [pc, #120]	@ (800c3d4 <_dtoa_r+0x2cc>)
 800c35c:	4602      	mov	r2, r0
 800c35e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c362:	e6ea      	b.n	800c13a <_dtoa_r+0x32>
 800c364:	2200      	movs	r2, #0
 800c366:	e7e1      	b.n	800c32c <_dtoa_r+0x224>
 800c368:	2200      	movs	r2, #0
 800c36a:	e7d3      	b.n	800c314 <_dtoa_r+0x20c>
 800c36c:	2401      	movs	r4, #1
 800c36e:	2200      	movs	r2, #0
 800c370:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c374:	f04f 3bff 	mov.w	fp, #4294967295
 800c378:	2100      	movs	r1, #0
 800c37a:	46da      	mov	sl, fp
 800c37c:	2212      	movs	r2, #18
 800c37e:	9109      	str	r1, [sp, #36]	@ 0x24
 800c380:	e7da      	b.n	800c338 <_dtoa_r+0x230>
 800c382:	2201      	movs	r2, #1
 800c384:	9208      	str	r2, [sp, #32]
 800c386:	e7f5      	b.n	800c374 <_dtoa_r+0x26c>
 800c388:	f04f 0b01 	mov.w	fp, #1
 800c38c:	46da      	mov	sl, fp
 800c38e:	465a      	mov	r2, fp
 800c390:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c394:	e7d0      	b.n	800c338 <_dtoa_r+0x230>
 800c396:	3101      	adds	r1, #1
 800c398:	0040      	lsls	r0, r0, #1
 800c39a:	e7d1      	b.n	800c340 <_dtoa_r+0x238>
 800c39c:	f3af 8000 	nop.w
 800c3a0:	636f4361 	.word	0x636f4361
 800c3a4:	3fd287a7 	.word	0x3fd287a7
 800c3a8:	8b60c8b3 	.word	0x8b60c8b3
 800c3ac:	3fc68a28 	.word	0x3fc68a28
 800c3b0:	509f79fb 	.word	0x509f79fb
 800c3b4:	3fd34413 	.word	0x3fd34413
 800c3b8:	0800dd0d 	.word	0x0800dd0d
 800c3bc:	0800dd24 	.word	0x0800dd24
 800c3c0:	7ff00000 	.word	0x7ff00000
 800c3c4:	0800dd09 	.word	0x0800dd09
 800c3c8:	0800dcdd 	.word	0x0800dcdd
 800c3cc:	0800dcdc 	.word	0x0800dcdc
 800c3d0:	0800de78 	.word	0x0800de78
 800c3d4:	0800dd7c 	.word	0x0800dd7c
 800c3d8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c3dc:	f1ba 0f0e 	cmp.w	sl, #14
 800c3e0:	6010      	str	r0, [r2, #0]
 800c3e2:	d86e      	bhi.n	800c4c2 <_dtoa_r+0x3ba>
 800c3e4:	2c00      	cmp	r4, #0
 800c3e6:	d06c      	beq.n	800c4c2 <_dtoa_r+0x3ba>
 800c3e8:	f1b8 0f00 	cmp.w	r8, #0
 800c3ec:	f340 80b4 	ble.w	800c558 <_dtoa_r+0x450>
 800c3f0:	4ac8      	ldr	r2, [pc, #800]	@ (800c714 <_dtoa_r+0x60c>)
 800c3f2:	f008 010f 	and.w	r1, r8, #15
 800c3f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c3fa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c3fe:	ed92 7b00 	vldr	d7, [r2]
 800c402:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c406:	f000 809b 	beq.w	800c540 <_dtoa_r+0x438>
 800c40a:	4ac3      	ldr	r2, [pc, #780]	@ (800c718 <_dtoa_r+0x610>)
 800c40c:	ed92 6b08 	vldr	d6, [r2, #32]
 800c410:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c414:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c418:	f001 010f 	and.w	r1, r1, #15
 800c41c:	2203      	movs	r2, #3
 800c41e:	48be      	ldr	r0, [pc, #760]	@ (800c718 <_dtoa_r+0x610>)
 800c420:	2900      	cmp	r1, #0
 800c422:	f040 808f 	bne.w	800c544 <_dtoa_r+0x43c>
 800c426:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c42a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c42e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c432:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c434:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c438:	2900      	cmp	r1, #0
 800c43a:	f000 80b3 	beq.w	800c5a4 <_dtoa_r+0x49c>
 800c43e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c442:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c44a:	f140 80ab 	bpl.w	800c5a4 <_dtoa_r+0x49c>
 800c44e:	f1ba 0f00 	cmp.w	sl, #0
 800c452:	f000 80a7 	beq.w	800c5a4 <_dtoa_r+0x49c>
 800c456:	f1bb 0f00 	cmp.w	fp, #0
 800c45a:	dd30      	ble.n	800c4be <_dtoa_r+0x3b6>
 800c45c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800c460:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c464:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c468:	f108 31ff 	add.w	r1, r8, #4294967295
 800c46c:	9105      	str	r1, [sp, #20]
 800c46e:	3201      	adds	r2, #1
 800c470:	465c      	mov	r4, fp
 800c472:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c476:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800c47a:	ee07 2a90 	vmov	s15, r2
 800c47e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c482:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c486:	ee15 2a90 	vmov	r2, s11
 800c48a:	ec51 0b15 	vmov	r0, r1, d5
 800c48e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800c492:	2c00      	cmp	r4, #0
 800c494:	f040 808a 	bne.w	800c5ac <_dtoa_r+0x4a4>
 800c498:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c49c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c4a0:	ec41 0b17 	vmov	d7, r0, r1
 800c4a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ac:	f300 826a 	bgt.w	800c984 <_dtoa_r+0x87c>
 800c4b0:	eeb1 7b47 	vneg.f64	d7, d7
 800c4b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4bc:	d423      	bmi.n	800c506 <_dtoa_r+0x3fe>
 800c4be:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c4c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c4c4:	2a00      	cmp	r2, #0
 800c4c6:	f2c0 8129 	blt.w	800c71c <_dtoa_r+0x614>
 800c4ca:	f1b8 0f0e 	cmp.w	r8, #14
 800c4ce:	f300 8125 	bgt.w	800c71c <_dtoa_r+0x614>
 800c4d2:	4b90      	ldr	r3, [pc, #576]	@ (800c714 <_dtoa_r+0x60c>)
 800c4d4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c4d8:	ed93 6b00 	vldr	d6, [r3]
 800c4dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f280 80c8 	bge.w	800c674 <_dtoa_r+0x56c>
 800c4e4:	f1ba 0f00 	cmp.w	sl, #0
 800c4e8:	f300 80c4 	bgt.w	800c674 <_dtoa_r+0x56c>
 800c4ec:	d10b      	bne.n	800c506 <_dtoa_r+0x3fe>
 800c4ee:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800c4f2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c4f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c502:	f2c0 823c 	blt.w	800c97e <_dtoa_r+0x876>
 800c506:	2400      	movs	r4, #0
 800c508:	4625      	mov	r5, r4
 800c50a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c50c:	43db      	mvns	r3, r3
 800c50e:	9305      	str	r3, [sp, #20]
 800c510:	463e      	mov	r6, r7
 800c512:	f04f 0800 	mov.w	r8, #0
 800c516:	4621      	mov	r1, r4
 800c518:	4648      	mov	r0, r9
 800c51a:	f000 fc93 	bl	800ce44 <_Bfree>
 800c51e:	2d00      	cmp	r5, #0
 800c520:	f000 80a2 	beq.w	800c668 <_dtoa_r+0x560>
 800c524:	f1b8 0f00 	cmp.w	r8, #0
 800c528:	d005      	beq.n	800c536 <_dtoa_r+0x42e>
 800c52a:	45a8      	cmp	r8, r5
 800c52c:	d003      	beq.n	800c536 <_dtoa_r+0x42e>
 800c52e:	4641      	mov	r1, r8
 800c530:	4648      	mov	r0, r9
 800c532:	f000 fc87 	bl	800ce44 <_Bfree>
 800c536:	4629      	mov	r1, r5
 800c538:	4648      	mov	r0, r9
 800c53a:	f000 fc83 	bl	800ce44 <_Bfree>
 800c53e:	e093      	b.n	800c668 <_dtoa_r+0x560>
 800c540:	2202      	movs	r2, #2
 800c542:	e76c      	b.n	800c41e <_dtoa_r+0x316>
 800c544:	07cc      	lsls	r4, r1, #31
 800c546:	d504      	bpl.n	800c552 <_dtoa_r+0x44a>
 800c548:	ed90 6b00 	vldr	d6, [r0]
 800c54c:	3201      	adds	r2, #1
 800c54e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c552:	1049      	asrs	r1, r1, #1
 800c554:	3008      	adds	r0, #8
 800c556:	e763      	b.n	800c420 <_dtoa_r+0x318>
 800c558:	d022      	beq.n	800c5a0 <_dtoa_r+0x498>
 800c55a:	f1c8 0100 	rsb	r1, r8, #0
 800c55e:	4a6d      	ldr	r2, [pc, #436]	@ (800c714 <_dtoa_r+0x60c>)
 800c560:	f001 000f 	and.w	r0, r1, #15
 800c564:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c568:	ed92 7b00 	vldr	d7, [r2]
 800c56c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c570:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c574:	4868      	ldr	r0, [pc, #416]	@ (800c718 <_dtoa_r+0x610>)
 800c576:	1109      	asrs	r1, r1, #4
 800c578:	2400      	movs	r4, #0
 800c57a:	2202      	movs	r2, #2
 800c57c:	b929      	cbnz	r1, 800c58a <_dtoa_r+0x482>
 800c57e:	2c00      	cmp	r4, #0
 800c580:	f43f af57 	beq.w	800c432 <_dtoa_r+0x32a>
 800c584:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c588:	e753      	b.n	800c432 <_dtoa_r+0x32a>
 800c58a:	07ce      	lsls	r6, r1, #31
 800c58c:	d505      	bpl.n	800c59a <_dtoa_r+0x492>
 800c58e:	ed90 6b00 	vldr	d6, [r0]
 800c592:	3201      	adds	r2, #1
 800c594:	2401      	movs	r4, #1
 800c596:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c59a:	1049      	asrs	r1, r1, #1
 800c59c:	3008      	adds	r0, #8
 800c59e:	e7ed      	b.n	800c57c <_dtoa_r+0x474>
 800c5a0:	2202      	movs	r2, #2
 800c5a2:	e746      	b.n	800c432 <_dtoa_r+0x32a>
 800c5a4:	f8cd 8014 	str.w	r8, [sp, #20]
 800c5a8:	4654      	mov	r4, sl
 800c5aa:	e762      	b.n	800c472 <_dtoa_r+0x36a>
 800c5ac:	4a59      	ldr	r2, [pc, #356]	@ (800c714 <_dtoa_r+0x60c>)
 800c5ae:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c5b2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c5b6:	9a08      	ldr	r2, [sp, #32]
 800c5b8:	ec41 0b17 	vmov	d7, r0, r1
 800c5bc:	443c      	add	r4, r7
 800c5be:	b34a      	cbz	r2, 800c614 <_dtoa_r+0x50c>
 800c5c0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800c5c4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800c5c8:	463e      	mov	r6, r7
 800c5ca:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c5ce:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c5d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c5d6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c5da:	ee14 2a90 	vmov	r2, s9
 800c5de:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c5e2:	3230      	adds	r2, #48	@ 0x30
 800c5e4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c5e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5f0:	f806 2b01 	strb.w	r2, [r6], #1
 800c5f4:	d438      	bmi.n	800c668 <_dtoa_r+0x560>
 800c5f6:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c5fa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c602:	d46e      	bmi.n	800c6e2 <_dtoa_r+0x5da>
 800c604:	42a6      	cmp	r6, r4
 800c606:	f43f af5a 	beq.w	800c4be <_dtoa_r+0x3b6>
 800c60a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c60e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c612:	e7e0      	b.n	800c5d6 <_dtoa_r+0x4ce>
 800c614:	4621      	mov	r1, r4
 800c616:	463e      	mov	r6, r7
 800c618:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c61c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800c620:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c624:	ee14 2a90 	vmov	r2, s9
 800c628:	3230      	adds	r2, #48	@ 0x30
 800c62a:	f806 2b01 	strb.w	r2, [r6], #1
 800c62e:	42a6      	cmp	r6, r4
 800c630:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c634:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c638:	d119      	bne.n	800c66e <_dtoa_r+0x566>
 800c63a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800c63e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c642:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c64a:	dc4a      	bgt.n	800c6e2 <_dtoa_r+0x5da>
 800c64c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c650:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c658:	f57f af31 	bpl.w	800c4be <_dtoa_r+0x3b6>
 800c65c:	460e      	mov	r6, r1
 800c65e:	3901      	subs	r1, #1
 800c660:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c664:	2b30      	cmp	r3, #48	@ 0x30
 800c666:	d0f9      	beq.n	800c65c <_dtoa_r+0x554>
 800c668:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c66c:	e027      	b.n	800c6be <_dtoa_r+0x5b6>
 800c66e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c672:	e7d5      	b.n	800c620 <_dtoa_r+0x518>
 800c674:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c678:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800c67c:	463e      	mov	r6, r7
 800c67e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c682:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c686:	ee15 3a10 	vmov	r3, s10
 800c68a:	3330      	adds	r3, #48	@ 0x30
 800c68c:	f806 3b01 	strb.w	r3, [r6], #1
 800c690:	1bf3      	subs	r3, r6, r7
 800c692:	459a      	cmp	sl, r3
 800c694:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c698:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c69c:	d132      	bne.n	800c704 <_dtoa_r+0x5fc>
 800c69e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c6a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6aa:	dc18      	bgt.n	800c6de <_dtoa_r+0x5d6>
 800c6ac:	eeb4 7b46 	vcmp.f64	d7, d6
 800c6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b4:	d103      	bne.n	800c6be <_dtoa_r+0x5b6>
 800c6b6:	ee15 3a10 	vmov	r3, s10
 800c6ba:	07db      	lsls	r3, r3, #31
 800c6bc:	d40f      	bmi.n	800c6de <_dtoa_r+0x5d6>
 800c6be:	9901      	ldr	r1, [sp, #4]
 800c6c0:	4648      	mov	r0, r9
 800c6c2:	f000 fbbf 	bl	800ce44 <_Bfree>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c6ca:	7033      	strb	r3, [r6, #0]
 800c6cc:	f108 0301 	add.w	r3, r8, #1
 800c6d0:	6013      	str	r3, [r2, #0]
 800c6d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f000 824b 	beq.w	800cb70 <_dtoa_r+0xa68>
 800c6da:	601e      	str	r6, [r3, #0]
 800c6dc:	e248      	b.n	800cb70 <_dtoa_r+0xa68>
 800c6de:	f8cd 8014 	str.w	r8, [sp, #20]
 800c6e2:	4633      	mov	r3, r6
 800c6e4:	461e      	mov	r6, r3
 800c6e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6ea:	2a39      	cmp	r2, #57	@ 0x39
 800c6ec:	d106      	bne.n	800c6fc <_dtoa_r+0x5f4>
 800c6ee:	429f      	cmp	r7, r3
 800c6f0:	d1f8      	bne.n	800c6e4 <_dtoa_r+0x5dc>
 800c6f2:	9a05      	ldr	r2, [sp, #20]
 800c6f4:	3201      	adds	r2, #1
 800c6f6:	9205      	str	r2, [sp, #20]
 800c6f8:	2230      	movs	r2, #48	@ 0x30
 800c6fa:	703a      	strb	r2, [r7, #0]
 800c6fc:	781a      	ldrb	r2, [r3, #0]
 800c6fe:	3201      	adds	r2, #1
 800c700:	701a      	strb	r2, [r3, #0]
 800c702:	e7b1      	b.n	800c668 <_dtoa_r+0x560>
 800c704:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c708:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c710:	d1b5      	bne.n	800c67e <_dtoa_r+0x576>
 800c712:	e7d4      	b.n	800c6be <_dtoa_r+0x5b6>
 800c714:	0800de78 	.word	0x0800de78
 800c718:	0800de50 	.word	0x0800de50
 800c71c:	9908      	ldr	r1, [sp, #32]
 800c71e:	2900      	cmp	r1, #0
 800c720:	f000 80e9 	beq.w	800c8f6 <_dtoa_r+0x7ee>
 800c724:	9907      	ldr	r1, [sp, #28]
 800c726:	2901      	cmp	r1, #1
 800c728:	f300 80cb 	bgt.w	800c8c2 <_dtoa_r+0x7ba>
 800c72c:	2d00      	cmp	r5, #0
 800c72e:	f000 80c4 	beq.w	800c8ba <_dtoa_r+0x7b2>
 800c732:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c736:	9e04      	ldr	r6, [sp, #16]
 800c738:	461c      	mov	r4, r3
 800c73a:	9305      	str	r3, [sp, #20]
 800c73c:	9b04      	ldr	r3, [sp, #16]
 800c73e:	4413      	add	r3, r2
 800c740:	9304      	str	r3, [sp, #16]
 800c742:	9b06      	ldr	r3, [sp, #24]
 800c744:	2101      	movs	r1, #1
 800c746:	4413      	add	r3, r2
 800c748:	4648      	mov	r0, r9
 800c74a:	9306      	str	r3, [sp, #24]
 800c74c:	f000 fc2e 	bl	800cfac <__i2b>
 800c750:	9b05      	ldr	r3, [sp, #20]
 800c752:	4605      	mov	r5, r0
 800c754:	b166      	cbz	r6, 800c770 <_dtoa_r+0x668>
 800c756:	9a06      	ldr	r2, [sp, #24]
 800c758:	2a00      	cmp	r2, #0
 800c75a:	dd09      	ble.n	800c770 <_dtoa_r+0x668>
 800c75c:	42b2      	cmp	r2, r6
 800c75e:	9904      	ldr	r1, [sp, #16]
 800c760:	bfa8      	it	ge
 800c762:	4632      	movge	r2, r6
 800c764:	1a89      	subs	r1, r1, r2
 800c766:	9104      	str	r1, [sp, #16]
 800c768:	9906      	ldr	r1, [sp, #24]
 800c76a:	1ab6      	subs	r6, r6, r2
 800c76c:	1a8a      	subs	r2, r1, r2
 800c76e:	9206      	str	r2, [sp, #24]
 800c770:	b30b      	cbz	r3, 800c7b6 <_dtoa_r+0x6ae>
 800c772:	9a08      	ldr	r2, [sp, #32]
 800c774:	2a00      	cmp	r2, #0
 800c776:	f000 80c5 	beq.w	800c904 <_dtoa_r+0x7fc>
 800c77a:	2c00      	cmp	r4, #0
 800c77c:	f000 80bf 	beq.w	800c8fe <_dtoa_r+0x7f6>
 800c780:	4629      	mov	r1, r5
 800c782:	4622      	mov	r2, r4
 800c784:	4648      	mov	r0, r9
 800c786:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c788:	f000 fcc8 	bl	800d11c <__pow5mult>
 800c78c:	9a01      	ldr	r2, [sp, #4]
 800c78e:	4601      	mov	r1, r0
 800c790:	4605      	mov	r5, r0
 800c792:	4648      	mov	r0, r9
 800c794:	f000 fc20 	bl	800cfd8 <__multiply>
 800c798:	9901      	ldr	r1, [sp, #4]
 800c79a:	9005      	str	r0, [sp, #20]
 800c79c:	4648      	mov	r0, r9
 800c79e:	f000 fb51 	bl	800ce44 <_Bfree>
 800c7a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7a4:	1b1b      	subs	r3, r3, r4
 800c7a6:	f000 80b0 	beq.w	800c90a <_dtoa_r+0x802>
 800c7aa:	9905      	ldr	r1, [sp, #20]
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	4648      	mov	r0, r9
 800c7b0:	f000 fcb4 	bl	800d11c <__pow5mult>
 800c7b4:	9001      	str	r0, [sp, #4]
 800c7b6:	2101      	movs	r1, #1
 800c7b8:	4648      	mov	r0, r9
 800c7ba:	f000 fbf7 	bl	800cfac <__i2b>
 800c7be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	f000 81da 	beq.w	800cb7c <_dtoa_r+0xa74>
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	4601      	mov	r1, r0
 800c7cc:	4648      	mov	r0, r9
 800c7ce:	f000 fca5 	bl	800d11c <__pow5mult>
 800c7d2:	9b07      	ldr	r3, [sp, #28]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	f300 80a0 	bgt.w	800c91c <_dtoa_r+0x814>
 800c7dc:	9b02      	ldr	r3, [sp, #8]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f040 8096 	bne.w	800c910 <_dtoa_r+0x808>
 800c7e4:	9b03      	ldr	r3, [sp, #12]
 800c7e6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c7ea:	2a00      	cmp	r2, #0
 800c7ec:	f040 8092 	bne.w	800c914 <_dtoa_r+0x80c>
 800c7f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c7f4:	0d12      	lsrs	r2, r2, #20
 800c7f6:	0512      	lsls	r2, r2, #20
 800c7f8:	2a00      	cmp	r2, #0
 800c7fa:	f000 808d 	beq.w	800c918 <_dtoa_r+0x810>
 800c7fe:	9b04      	ldr	r3, [sp, #16]
 800c800:	3301      	adds	r3, #1
 800c802:	9304      	str	r3, [sp, #16]
 800c804:	9b06      	ldr	r3, [sp, #24]
 800c806:	3301      	adds	r3, #1
 800c808:	9306      	str	r3, [sp, #24]
 800c80a:	2301      	movs	r3, #1
 800c80c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c80e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c810:	2b00      	cmp	r3, #0
 800c812:	f000 81b9 	beq.w	800cb88 <_dtoa_r+0xa80>
 800c816:	6922      	ldr	r2, [r4, #16]
 800c818:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c81c:	6910      	ldr	r0, [r2, #16]
 800c81e:	f000 fb79 	bl	800cf14 <__hi0bits>
 800c822:	f1c0 0020 	rsb	r0, r0, #32
 800c826:	9b06      	ldr	r3, [sp, #24]
 800c828:	4418      	add	r0, r3
 800c82a:	f010 001f 	ands.w	r0, r0, #31
 800c82e:	f000 8081 	beq.w	800c934 <_dtoa_r+0x82c>
 800c832:	f1c0 0220 	rsb	r2, r0, #32
 800c836:	2a04      	cmp	r2, #4
 800c838:	dd73      	ble.n	800c922 <_dtoa_r+0x81a>
 800c83a:	9b04      	ldr	r3, [sp, #16]
 800c83c:	f1c0 001c 	rsb	r0, r0, #28
 800c840:	4403      	add	r3, r0
 800c842:	9304      	str	r3, [sp, #16]
 800c844:	9b06      	ldr	r3, [sp, #24]
 800c846:	4406      	add	r6, r0
 800c848:	4403      	add	r3, r0
 800c84a:	9306      	str	r3, [sp, #24]
 800c84c:	9b04      	ldr	r3, [sp, #16]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	dd05      	ble.n	800c85e <_dtoa_r+0x756>
 800c852:	9901      	ldr	r1, [sp, #4]
 800c854:	461a      	mov	r2, r3
 800c856:	4648      	mov	r0, r9
 800c858:	f000 fcba 	bl	800d1d0 <__lshift>
 800c85c:	9001      	str	r0, [sp, #4]
 800c85e:	9b06      	ldr	r3, [sp, #24]
 800c860:	2b00      	cmp	r3, #0
 800c862:	dd05      	ble.n	800c870 <_dtoa_r+0x768>
 800c864:	4621      	mov	r1, r4
 800c866:	461a      	mov	r2, r3
 800c868:	4648      	mov	r0, r9
 800c86a:	f000 fcb1 	bl	800d1d0 <__lshift>
 800c86e:	4604      	mov	r4, r0
 800c870:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c872:	2b00      	cmp	r3, #0
 800c874:	d060      	beq.n	800c938 <_dtoa_r+0x830>
 800c876:	9801      	ldr	r0, [sp, #4]
 800c878:	4621      	mov	r1, r4
 800c87a:	f000 fd15 	bl	800d2a8 <__mcmp>
 800c87e:	2800      	cmp	r0, #0
 800c880:	da5a      	bge.n	800c938 <_dtoa_r+0x830>
 800c882:	f108 33ff 	add.w	r3, r8, #4294967295
 800c886:	9305      	str	r3, [sp, #20]
 800c888:	9901      	ldr	r1, [sp, #4]
 800c88a:	2300      	movs	r3, #0
 800c88c:	220a      	movs	r2, #10
 800c88e:	4648      	mov	r0, r9
 800c890:	f000 fafa 	bl	800ce88 <__multadd>
 800c894:	9b08      	ldr	r3, [sp, #32]
 800c896:	9001      	str	r0, [sp, #4]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 8177 	beq.w	800cb8c <_dtoa_r+0xa84>
 800c89e:	4629      	mov	r1, r5
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	220a      	movs	r2, #10
 800c8a4:	4648      	mov	r0, r9
 800c8a6:	f000 faef 	bl	800ce88 <__multadd>
 800c8aa:	f1bb 0f00 	cmp.w	fp, #0
 800c8ae:	4605      	mov	r5, r0
 800c8b0:	dc6e      	bgt.n	800c990 <_dtoa_r+0x888>
 800c8b2:	9b07      	ldr	r3, [sp, #28]
 800c8b4:	2b02      	cmp	r3, #2
 800c8b6:	dc48      	bgt.n	800c94a <_dtoa_r+0x842>
 800c8b8:	e06a      	b.n	800c990 <_dtoa_r+0x888>
 800c8ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c8c0:	e739      	b.n	800c736 <_dtoa_r+0x62e>
 800c8c2:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c8c6:	42a3      	cmp	r3, r4
 800c8c8:	db07      	blt.n	800c8da <_dtoa_r+0x7d2>
 800c8ca:	f1ba 0f00 	cmp.w	sl, #0
 800c8ce:	eba3 0404 	sub.w	r4, r3, r4
 800c8d2:	db0b      	blt.n	800c8ec <_dtoa_r+0x7e4>
 800c8d4:	9e04      	ldr	r6, [sp, #16]
 800c8d6:	4652      	mov	r2, sl
 800c8d8:	e72f      	b.n	800c73a <_dtoa_r+0x632>
 800c8da:	1ae2      	subs	r2, r4, r3
 800c8dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8de:	9e04      	ldr	r6, [sp, #16]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8e4:	4652      	mov	r2, sl
 800c8e6:	4623      	mov	r3, r4
 800c8e8:	2400      	movs	r4, #0
 800c8ea:	e726      	b.n	800c73a <_dtoa_r+0x632>
 800c8ec:	9a04      	ldr	r2, [sp, #16]
 800c8ee:	eba2 060a 	sub.w	r6, r2, sl
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	e721      	b.n	800c73a <_dtoa_r+0x632>
 800c8f6:	9e04      	ldr	r6, [sp, #16]
 800c8f8:	9d08      	ldr	r5, [sp, #32]
 800c8fa:	461c      	mov	r4, r3
 800c8fc:	e72a      	b.n	800c754 <_dtoa_r+0x64c>
 800c8fe:	9a01      	ldr	r2, [sp, #4]
 800c900:	9205      	str	r2, [sp, #20]
 800c902:	e752      	b.n	800c7aa <_dtoa_r+0x6a2>
 800c904:	9901      	ldr	r1, [sp, #4]
 800c906:	461a      	mov	r2, r3
 800c908:	e751      	b.n	800c7ae <_dtoa_r+0x6a6>
 800c90a:	9b05      	ldr	r3, [sp, #20]
 800c90c:	9301      	str	r3, [sp, #4]
 800c90e:	e752      	b.n	800c7b6 <_dtoa_r+0x6ae>
 800c910:	2300      	movs	r3, #0
 800c912:	e77b      	b.n	800c80c <_dtoa_r+0x704>
 800c914:	9b02      	ldr	r3, [sp, #8]
 800c916:	e779      	b.n	800c80c <_dtoa_r+0x704>
 800c918:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c91a:	e778      	b.n	800c80e <_dtoa_r+0x706>
 800c91c:	2300      	movs	r3, #0
 800c91e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c920:	e779      	b.n	800c816 <_dtoa_r+0x70e>
 800c922:	d093      	beq.n	800c84c <_dtoa_r+0x744>
 800c924:	9b04      	ldr	r3, [sp, #16]
 800c926:	321c      	adds	r2, #28
 800c928:	4413      	add	r3, r2
 800c92a:	9304      	str	r3, [sp, #16]
 800c92c:	9b06      	ldr	r3, [sp, #24]
 800c92e:	4416      	add	r6, r2
 800c930:	4413      	add	r3, r2
 800c932:	e78a      	b.n	800c84a <_dtoa_r+0x742>
 800c934:	4602      	mov	r2, r0
 800c936:	e7f5      	b.n	800c924 <_dtoa_r+0x81c>
 800c938:	f1ba 0f00 	cmp.w	sl, #0
 800c93c:	f8cd 8014 	str.w	r8, [sp, #20]
 800c940:	46d3      	mov	fp, sl
 800c942:	dc21      	bgt.n	800c988 <_dtoa_r+0x880>
 800c944:	9b07      	ldr	r3, [sp, #28]
 800c946:	2b02      	cmp	r3, #2
 800c948:	dd1e      	ble.n	800c988 <_dtoa_r+0x880>
 800c94a:	f1bb 0f00 	cmp.w	fp, #0
 800c94e:	f47f addc 	bne.w	800c50a <_dtoa_r+0x402>
 800c952:	4621      	mov	r1, r4
 800c954:	465b      	mov	r3, fp
 800c956:	2205      	movs	r2, #5
 800c958:	4648      	mov	r0, r9
 800c95a:	f000 fa95 	bl	800ce88 <__multadd>
 800c95e:	4601      	mov	r1, r0
 800c960:	4604      	mov	r4, r0
 800c962:	9801      	ldr	r0, [sp, #4]
 800c964:	f000 fca0 	bl	800d2a8 <__mcmp>
 800c968:	2800      	cmp	r0, #0
 800c96a:	f77f adce 	ble.w	800c50a <_dtoa_r+0x402>
 800c96e:	463e      	mov	r6, r7
 800c970:	2331      	movs	r3, #49	@ 0x31
 800c972:	f806 3b01 	strb.w	r3, [r6], #1
 800c976:	9b05      	ldr	r3, [sp, #20]
 800c978:	3301      	adds	r3, #1
 800c97a:	9305      	str	r3, [sp, #20]
 800c97c:	e5c9      	b.n	800c512 <_dtoa_r+0x40a>
 800c97e:	f8cd 8014 	str.w	r8, [sp, #20]
 800c982:	4654      	mov	r4, sl
 800c984:	4625      	mov	r5, r4
 800c986:	e7f2      	b.n	800c96e <_dtoa_r+0x866>
 800c988:	9b08      	ldr	r3, [sp, #32]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f000 8102 	beq.w	800cb94 <_dtoa_r+0xa8c>
 800c990:	2e00      	cmp	r6, #0
 800c992:	dd05      	ble.n	800c9a0 <_dtoa_r+0x898>
 800c994:	4629      	mov	r1, r5
 800c996:	4632      	mov	r2, r6
 800c998:	4648      	mov	r0, r9
 800c99a:	f000 fc19 	bl	800d1d0 <__lshift>
 800c99e:	4605      	mov	r5, r0
 800c9a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d058      	beq.n	800ca58 <_dtoa_r+0x950>
 800c9a6:	6869      	ldr	r1, [r5, #4]
 800c9a8:	4648      	mov	r0, r9
 800c9aa:	f000 fa0b 	bl	800cdc4 <_Balloc>
 800c9ae:	4606      	mov	r6, r0
 800c9b0:	b928      	cbnz	r0, 800c9be <_dtoa_r+0x8b6>
 800c9b2:	4b82      	ldr	r3, [pc, #520]	@ (800cbbc <_dtoa_r+0xab4>)
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c9ba:	f7ff bbbe 	b.w	800c13a <_dtoa_r+0x32>
 800c9be:	692a      	ldr	r2, [r5, #16]
 800c9c0:	3202      	adds	r2, #2
 800c9c2:	0092      	lsls	r2, r2, #2
 800c9c4:	f105 010c 	add.w	r1, r5, #12
 800c9c8:	300c      	adds	r0, #12
 800c9ca:	f001 f807 	bl	800d9dc <memcpy>
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	4631      	mov	r1, r6
 800c9d2:	4648      	mov	r0, r9
 800c9d4:	f000 fbfc 	bl	800d1d0 <__lshift>
 800c9d8:	1c7b      	adds	r3, r7, #1
 800c9da:	9304      	str	r3, [sp, #16]
 800c9dc:	eb07 030b 	add.w	r3, r7, fp
 800c9e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9e2:	9b02      	ldr	r3, [sp, #8]
 800c9e4:	f003 0301 	and.w	r3, r3, #1
 800c9e8:	46a8      	mov	r8, r5
 800c9ea:	9308      	str	r3, [sp, #32]
 800c9ec:	4605      	mov	r5, r0
 800c9ee:	9b04      	ldr	r3, [sp, #16]
 800c9f0:	9801      	ldr	r0, [sp, #4]
 800c9f2:	4621      	mov	r1, r4
 800c9f4:	f103 3bff 	add.w	fp, r3, #4294967295
 800c9f8:	f7ff fafb 	bl	800bff2 <quorem>
 800c9fc:	4641      	mov	r1, r8
 800c9fe:	9002      	str	r0, [sp, #8]
 800ca00:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800ca04:	9801      	ldr	r0, [sp, #4]
 800ca06:	f000 fc4f 	bl	800d2a8 <__mcmp>
 800ca0a:	462a      	mov	r2, r5
 800ca0c:	9006      	str	r0, [sp, #24]
 800ca0e:	4621      	mov	r1, r4
 800ca10:	4648      	mov	r0, r9
 800ca12:	f000 fc65 	bl	800d2e0 <__mdiff>
 800ca16:	68c2      	ldr	r2, [r0, #12]
 800ca18:	4606      	mov	r6, r0
 800ca1a:	b9fa      	cbnz	r2, 800ca5c <_dtoa_r+0x954>
 800ca1c:	4601      	mov	r1, r0
 800ca1e:	9801      	ldr	r0, [sp, #4]
 800ca20:	f000 fc42 	bl	800d2a8 <__mcmp>
 800ca24:	4602      	mov	r2, r0
 800ca26:	4631      	mov	r1, r6
 800ca28:	4648      	mov	r0, r9
 800ca2a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ca2c:	f000 fa0a 	bl	800ce44 <_Bfree>
 800ca30:	9b07      	ldr	r3, [sp, #28]
 800ca32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca34:	9e04      	ldr	r6, [sp, #16]
 800ca36:	ea42 0103 	orr.w	r1, r2, r3
 800ca3a:	9b08      	ldr	r3, [sp, #32]
 800ca3c:	4319      	orrs	r1, r3
 800ca3e:	d10f      	bne.n	800ca60 <_dtoa_r+0x958>
 800ca40:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ca44:	d028      	beq.n	800ca98 <_dtoa_r+0x990>
 800ca46:	9b06      	ldr	r3, [sp, #24]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	dd02      	ble.n	800ca52 <_dtoa_r+0x94a>
 800ca4c:	9b02      	ldr	r3, [sp, #8]
 800ca4e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800ca52:	f88b a000 	strb.w	sl, [fp]
 800ca56:	e55e      	b.n	800c516 <_dtoa_r+0x40e>
 800ca58:	4628      	mov	r0, r5
 800ca5a:	e7bd      	b.n	800c9d8 <_dtoa_r+0x8d0>
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	e7e2      	b.n	800ca26 <_dtoa_r+0x91e>
 800ca60:	9b06      	ldr	r3, [sp, #24]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	db04      	blt.n	800ca70 <_dtoa_r+0x968>
 800ca66:	9907      	ldr	r1, [sp, #28]
 800ca68:	430b      	orrs	r3, r1
 800ca6a:	9908      	ldr	r1, [sp, #32]
 800ca6c:	430b      	orrs	r3, r1
 800ca6e:	d120      	bne.n	800cab2 <_dtoa_r+0x9aa>
 800ca70:	2a00      	cmp	r2, #0
 800ca72:	ddee      	ble.n	800ca52 <_dtoa_r+0x94a>
 800ca74:	9901      	ldr	r1, [sp, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	4648      	mov	r0, r9
 800ca7a:	f000 fba9 	bl	800d1d0 <__lshift>
 800ca7e:	4621      	mov	r1, r4
 800ca80:	9001      	str	r0, [sp, #4]
 800ca82:	f000 fc11 	bl	800d2a8 <__mcmp>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	dc03      	bgt.n	800ca92 <_dtoa_r+0x98a>
 800ca8a:	d1e2      	bne.n	800ca52 <_dtoa_r+0x94a>
 800ca8c:	f01a 0f01 	tst.w	sl, #1
 800ca90:	d0df      	beq.n	800ca52 <_dtoa_r+0x94a>
 800ca92:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800ca96:	d1d9      	bne.n	800ca4c <_dtoa_r+0x944>
 800ca98:	2339      	movs	r3, #57	@ 0x39
 800ca9a:	f88b 3000 	strb.w	r3, [fp]
 800ca9e:	4633      	mov	r3, r6
 800caa0:	461e      	mov	r6, r3
 800caa2:	3b01      	subs	r3, #1
 800caa4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800caa8:	2a39      	cmp	r2, #57	@ 0x39
 800caaa:	d052      	beq.n	800cb52 <_dtoa_r+0xa4a>
 800caac:	3201      	adds	r2, #1
 800caae:	701a      	strb	r2, [r3, #0]
 800cab0:	e531      	b.n	800c516 <_dtoa_r+0x40e>
 800cab2:	2a00      	cmp	r2, #0
 800cab4:	dd07      	ble.n	800cac6 <_dtoa_r+0x9be>
 800cab6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800caba:	d0ed      	beq.n	800ca98 <_dtoa_r+0x990>
 800cabc:	f10a 0301 	add.w	r3, sl, #1
 800cac0:	f88b 3000 	strb.w	r3, [fp]
 800cac4:	e527      	b.n	800c516 <_dtoa_r+0x40e>
 800cac6:	9b04      	ldr	r3, [sp, #16]
 800cac8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800caca:	f803 ac01 	strb.w	sl, [r3, #-1]
 800cace:	4293      	cmp	r3, r2
 800cad0:	d029      	beq.n	800cb26 <_dtoa_r+0xa1e>
 800cad2:	9901      	ldr	r1, [sp, #4]
 800cad4:	2300      	movs	r3, #0
 800cad6:	220a      	movs	r2, #10
 800cad8:	4648      	mov	r0, r9
 800cada:	f000 f9d5 	bl	800ce88 <__multadd>
 800cade:	45a8      	cmp	r8, r5
 800cae0:	9001      	str	r0, [sp, #4]
 800cae2:	f04f 0300 	mov.w	r3, #0
 800cae6:	f04f 020a 	mov.w	r2, #10
 800caea:	4641      	mov	r1, r8
 800caec:	4648      	mov	r0, r9
 800caee:	d107      	bne.n	800cb00 <_dtoa_r+0x9f8>
 800caf0:	f000 f9ca 	bl	800ce88 <__multadd>
 800caf4:	4680      	mov	r8, r0
 800caf6:	4605      	mov	r5, r0
 800caf8:	9b04      	ldr	r3, [sp, #16]
 800cafa:	3301      	adds	r3, #1
 800cafc:	9304      	str	r3, [sp, #16]
 800cafe:	e776      	b.n	800c9ee <_dtoa_r+0x8e6>
 800cb00:	f000 f9c2 	bl	800ce88 <__multadd>
 800cb04:	4629      	mov	r1, r5
 800cb06:	4680      	mov	r8, r0
 800cb08:	2300      	movs	r3, #0
 800cb0a:	220a      	movs	r2, #10
 800cb0c:	4648      	mov	r0, r9
 800cb0e:	f000 f9bb 	bl	800ce88 <__multadd>
 800cb12:	4605      	mov	r5, r0
 800cb14:	e7f0      	b.n	800caf8 <_dtoa_r+0x9f0>
 800cb16:	f1bb 0f00 	cmp.w	fp, #0
 800cb1a:	bfcc      	ite	gt
 800cb1c:	465e      	movgt	r6, fp
 800cb1e:	2601      	movle	r6, #1
 800cb20:	443e      	add	r6, r7
 800cb22:	f04f 0800 	mov.w	r8, #0
 800cb26:	9901      	ldr	r1, [sp, #4]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	4648      	mov	r0, r9
 800cb2c:	f000 fb50 	bl	800d1d0 <__lshift>
 800cb30:	4621      	mov	r1, r4
 800cb32:	9001      	str	r0, [sp, #4]
 800cb34:	f000 fbb8 	bl	800d2a8 <__mcmp>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	dcb0      	bgt.n	800ca9e <_dtoa_r+0x996>
 800cb3c:	d102      	bne.n	800cb44 <_dtoa_r+0xa3c>
 800cb3e:	f01a 0f01 	tst.w	sl, #1
 800cb42:	d1ac      	bne.n	800ca9e <_dtoa_r+0x996>
 800cb44:	4633      	mov	r3, r6
 800cb46:	461e      	mov	r6, r3
 800cb48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb4c:	2a30      	cmp	r2, #48	@ 0x30
 800cb4e:	d0fa      	beq.n	800cb46 <_dtoa_r+0xa3e>
 800cb50:	e4e1      	b.n	800c516 <_dtoa_r+0x40e>
 800cb52:	429f      	cmp	r7, r3
 800cb54:	d1a4      	bne.n	800caa0 <_dtoa_r+0x998>
 800cb56:	9b05      	ldr	r3, [sp, #20]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	9305      	str	r3, [sp, #20]
 800cb5c:	2331      	movs	r3, #49	@ 0x31
 800cb5e:	703b      	strb	r3, [r7, #0]
 800cb60:	e4d9      	b.n	800c516 <_dtoa_r+0x40e>
 800cb62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb64:	4f16      	ldr	r7, [pc, #88]	@ (800cbc0 <_dtoa_r+0xab8>)
 800cb66:	b11b      	cbz	r3, 800cb70 <_dtoa_r+0xa68>
 800cb68:	f107 0308 	add.w	r3, r7, #8
 800cb6c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cb6e:	6013      	str	r3, [r2, #0]
 800cb70:	4638      	mov	r0, r7
 800cb72:	b011      	add	sp, #68	@ 0x44
 800cb74:	ecbd 8b02 	vpop	{d8}
 800cb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb7c:	9b07      	ldr	r3, [sp, #28]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	f77f ae2c 	ble.w	800c7dc <_dtoa_r+0x6d4>
 800cb84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb86:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb88:	2001      	movs	r0, #1
 800cb8a:	e64c      	b.n	800c826 <_dtoa_r+0x71e>
 800cb8c:	f1bb 0f00 	cmp.w	fp, #0
 800cb90:	f77f aed8 	ble.w	800c944 <_dtoa_r+0x83c>
 800cb94:	463e      	mov	r6, r7
 800cb96:	9801      	ldr	r0, [sp, #4]
 800cb98:	4621      	mov	r1, r4
 800cb9a:	f7ff fa2a 	bl	800bff2 <quorem>
 800cb9e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800cba2:	f806 ab01 	strb.w	sl, [r6], #1
 800cba6:	1bf2      	subs	r2, r6, r7
 800cba8:	4593      	cmp	fp, r2
 800cbaa:	ddb4      	ble.n	800cb16 <_dtoa_r+0xa0e>
 800cbac:	9901      	ldr	r1, [sp, #4]
 800cbae:	2300      	movs	r3, #0
 800cbb0:	220a      	movs	r2, #10
 800cbb2:	4648      	mov	r0, r9
 800cbb4:	f000 f968 	bl	800ce88 <__multadd>
 800cbb8:	9001      	str	r0, [sp, #4]
 800cbba:	e7ec      	b.n	800cb96 <_dtoa_r+0xa8e>
 800cbbc:	0800dd7c 	.word	0x0800dd7c
 800cbc0:	0800dd00 	.word	0x0800dd00

0800cbc4 <_free_r>:
 800cbc4:	b538      	push	{r3, r4, r5, lr}
 800cbc6:	4605      	mov	r5, r0
 800cbc8:	2900      	cmp	r1, #0
 800cbca:	d041      	beq.n	800cc50 <_free_r+0x8c>
 800cbcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbd0:	1f0c      	subs	r4, r1, #4
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	bfb8      	it	lt
 800cbd6:	18e4      	addlt	r4, r4, r3
 800cbd8:	f000 f8e8 	bl	800cdac <__malloc_lock>
 800cbdc:	4a1d      	ldr	r2, [pc, #116]	@ (800cc54 <_free_r+0x90>)
 800cbde:	6813      	ldr	r3, [r2, #0]
 800cbe0:	b933      	cbnz	r3, 800cbf0 <_free_r+0x2c>
 800cbe2:	6063      	str	r3, [r4, #4]
 800cbe4:	6014      	str	r4, [r2, #0]
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbec:	f000 b8e4 	b.w	800cdb8 <__malloc_unlock>
 800cbf0:	42a3      	cmp	r3, r4
 800cbf2:	d908      	bls.n	800cc06 <_free_r+0x42>
 800cbf4:	6820      	ldr	r0, [r4, #0]
 800cbf6:	1821      	adds	r1, r4, r0
 800cbf8:	428b      	cmp	r3, r1
 800cbfa:	bf01      	itttt	eq
 800cbfc:	6819      	ldreq	r1, [r3, #0]
 800cbfe:	685b      	ldreq	r3, [r3, #4]
 800cc00:	1809      	addeq	r1, r1, r0
 800cc02:	6021      	streq	r1, [r4, #0]
 800cc04:	e7ed      	b.n	800cbe2 <_free_r+0x1e>
 800cc06:	461a      	mov	r2, r3
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	b10b      	cbz	r3, 800cc10 <_free_r+0x4c>
 800cc0c:	42a3      	cmp	r3, r4
 800cc0e:	d9fa      	bls.n	800cc06 <_free_r+0x42>
 800cc10:	6811      	ldr	r1, [r2, #0]
 800cc12:	1850      	adds	r0, r2, r1
 800cc14:	42a0      	cmp	r0, r4
 800cc16:	d10b      	bne.n	800cc30 <_free_r+0x6c>
 800cc18:	6820      	ldr	r0, [r4, #0]
 800cc1a:	4401      	add	r1, r0
 800cc1c:	1850      	adds	r0, r2, r1
 800cc1e:	4283      	cmp	r3, r0
 800cc20:	6011      	str	r1, [r2, #0]
 800cc22:	d1e0      	bne.n	800cbe6 <_free_r+0x22>
 800cc24:	6818      	ldr	r0, [r3, #0]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	6053      	str	r3, [r2, #4]
 800cc2a:	4408      	add	r0, r1
 800cc2c:	6010      	str	r0, [r2, #0]
 800cc2e:	e7da      	b.n	800cbe6 <_free_r+0x22>
 800cc30:	d902      	bls.n	800cc38 <_free_r+0x74>
 800cc32:	230c      	movs	r3, #12
 800cc34:	602b      	str	r3, [r5, #0]
 800cc36:	e7d6      	b.n	800cbe6 <_free_r+0x22>
 800cc38:	6820      	ldr	r0, [r4, #0]
 800cc3a:	1821      	adds	r1, r4, r0
 800cc3c:	428b      	cmp	r3, r1
 800cc3e:	bf04      	itt	eq
 800cc40:	6819      	ldreq	r1, [r3, #0]
 800cc42:	685b      	ldreq	r3, [r3, #4]
 800cc44:	6063      	str	r3, [r4, #4]
 800cc46:	bf04      	itt	eq
 800cc48:	1809      	addeq	r1, r1, r0
 800cc4a:	6021      	streq	r1, [r4, #0]
 800cc4c:	6054      	str	r4, [r2, #4]
 800cc4e:	e7ca      	b.n	800cbe6 <_free_r+0x22>
 800cc50:	bd38      	pop	{r3, r4, r5, pc}
 800cc52:	bf00      	nop
 800cc54:	24000530 	.word	0x24000530

0800cc58 <malloc>:
 800cc58:	4b02      	ldr	r3, [pc, #8]	@ (800cc64 <malloc+0xc>)
 800cc5a:	4601      	mov	r1, r0
 800cc5c:	6818      	ldr	r0, [r3, #0]
 800cc5e:	f000 b825 	b.w	800ccac <_malloc_r>
 800cc62:	bf00      	nop
 800cc64:	24000020 	.word	0x24000020

0800cc68 <sbrk_aligned>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	4e0f      	ldr	r6, [pc, #60]	@ (800cca8 <sbrk_aligned+0x40>)
 800cc6c:	460c      	mov	r4, r1
 800cc6e:	6831      	ldr	r1, [r6, #0]
 800cc70:	4605      	mov	r5, r0
 800cc72:	b911      	cbnz	r1, 800cc7a <sbrk_aligned+0x12>
 800cc74:	f000 fea2 	bl	800d9bc <_sbrk_r>
 800cc78:	6030      	str	r0, [r6, #0]
 800cc7a:	4621      	mov	r1, r4
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f000 fe9d 	bl	800d9bc <_sbrk_r>
 800cc82:	1c43      	adds	r3, r0, #1
 800cc84:	d103      	bne.n	800cc8e <sbrk_aligned+0x26>
 800cc86:	f04f 34ff 	mov.w	r4, #4294967295
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	bd70      	pop	{r4, r5, r6, pc}
 800cc8e:	1cc4      	adds	r4, r0, #3
 800cc90:	f024 0403 	bic.w	r4, r4, #3
 800cc94:	42a0      	cmp	r0, r4
 800cc96:	d0f8      	beq.n	800cc8a <sbrk_aligned+0x22>
 800cc98:	1a21      	subs	r1, r4, r0
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	f000 fe8e 	bl	800d9bc <_sbrk_r>
 800cca0:	3001      	adds	r0, #1
 800cca2:	d1f2      	bne.n	800cc8a <sbrk_aligned+0x22>
 800cca4:	e7ef      	b.n	800cc86 <sbrk_aligned+0x1e>
 800cca6:	bf00      	nop
 800cca8:	2400052c 	.word	0x2400052c

0800ccac <_malloc_r>:
 800ccac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccb0:	1ccd      	adds	r5, r1, #3
 800ccb2:	f025 0503 	bic.w	r5, r5, #3
 800ccb6:	3508      	adds	r5, #8
 800ccb8:	2d0c      	cmp	r5, #12
 800ccba:	bf38      	it	cc
 800ccbc:	250c      	movcc	r5, #12
 800ccbe:	2d00      	cmp	r5, #0
 800ccc0:	4606      	mov	r6, r0
 800ccc2:	db01      	blt.n	800ccc8 <_malloc_r+0x1c>
 800ccc4:	42a9      	cmp	r1, r5
 800ccc6:	d904      	bls.n	800ccd2 <_malloc_r+0x26>
 800ccc8:	230c      	movs	r3, #12
 800ccca:	6033      	str	r3, [r6, #0]
 800cccc:	2000      	movs	r0, #0
 800ccce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cda8 <_malloc_r+0xfc>
 800ccd6:	f000 f869 	bl	800cdac <__malloc_lock>
 800ccda:	f8d8 3000 	ldr.w	r3, [r8]
 800ccde:	461c      	mov	r4, r3
 800cce0:	bb44      	cbnz	r4, 800cd34 <_malloc_r+0x88>
 800cce2:	4629      	mov	r1, r5
 800cce4:	4630      	mov	r0, r6
 800cce6:	f7ff ffbf 	bl	800cc68 <sbrk_aligned>
 800ccea:	1c43      	adds	r3, r0, #1
 800ccec:	4604      	mov	r4, r0
 800ccee:	d158      	bne.n	800cda2 <_malloc_r+0xf6>
 800ccf0:	f8d8 4000 	ldr.w	r4, [r8]
 800ccf4:	4627      	mov	r7, r4
 800ccf6:	2f00      	cmp	r7, #0
 800ccf8:	d143      	bne.n	800cd82 <_malloc_r+0xd6>
 800ccfa:	2c00      	cmp	r4, #0
 800ccfc:	d04b      	beq.n	800cd96 <_malloc_r+0xea>
 800ccfe:	6823      	ldr	r3, [r4, #0]
 800cd00:	4639      	mov	r1, r7
 800cd02:	4630      	mov	r0, r6
 800cd04:	eb04 0903 	add.w	r9, r4, r3
 800cd08:	f000 fe58 	bl	800d9bc <_sbrk_r>
 800cd0c:	4581      	cmp	r9, r0
 800cd0e:	d142      	bne.n	800cd96 <_malloc_r+0xea>
 800cd10:	6821      	ldr	r1, [r4, #0]
 800cd12:	1a6d      	subs	r5, r5, r1
 800cd14:	4629      	mov	r1, r5
 800cd16:	4630      	mov	r0, r6
 800cd18:	f7ff ffa6 	bl	800cc68 <sbrk_aligned>
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	d03a      	beq.n	800cd96 <_malloc_r+0xea>
 800cd20:	6823      	ldr	r3, [r4, #0]
 800cd22:	442b      	add	r3, r5
 800cd24:	6023      	str	r3, [r4, #0]
 800cd26:	f8d8 3000 	ldr.w	r3, [r8]
 800cd2a:	685a      	ldr	r2, [r3, #4]
 800cd2c:	bb62      	cbnz	r2, 800cd88 <_malloc_r+0xdc>
 800cd2e:	f8c8 7000 	str.w	r7, [r8]
 800cd32:	e00f      	b.n	800cd54 <_malloc_r+0xa8>
 800cd34:	6822      	ldr	r2, [r4, #0]
 800cd36:	1b52      	subs	r2, r2, r5
 800cd38:	d420      	bmi.n	800cd7c <_malloc_r+0xd0>
 800cd3a:	2a0b      	cmp	r2, #11
 800cd3c:	d917      	bls.n	800cd6e <_malloc_r+0xc2>
 800cd3e:	1961      	adds	r1, r4, r5
 800cd40:	42a3      	cmp	r3, r4
 800cd42:	6025      	str	r5, [r4, #0]
 800cd44:	bf18      	it	ne
 800cd46:	6059      	strne	r1, [r3, #4]
 800cd48:	6863      	ldr	r3, [r4, #4]
 800cd4a:	bf08      	it	eq
 800cd4c:	f8c8 1000 	streq.w	r1, [r8]
 800cd50:	5162      	str	r2, [r4, r5]
 800cd52:	604b      	str	r3, [r1, #4]
 800cd54:	4630      	mov	r0, r6
 800cd56:	f000 f82f 	bl	800cdb8 <__malloc_unlock>
 800cd5a:	f104 000b 	add.w	r0, r4, #11
 800cd5e:	1d23      	adds	r3, r4, #4
 800cd60:	f020 0007 	bic.w	r0, r0, #7
 800cd64:	1ac2      	subs	r2, r0, r3
 800cd66:	bf1c      	itt	ne
 800cd68:	1a1b      	subne	r3, r3, r0
 800cd6a:	50a3      	strne	r3, [r4, r2]
 800cd6c:	e7af      	b.n	800ccce <_malloc_r+0x22>
 800cd6e:	6862      	ldr	r2, [r4, #4]
 800cd70:	42a3      	cmp	r3, r4
 800cd72:	bf0c      	ite	eq
 800cd74:	f8c8 2000 	streq.w	r2, [r8]
 800cd78:	605a      	strne	r2, [r3, #4]
 800cd7a:	e7eb      	b.n	800cd54 <_malloc_r+0xa8>
 800cd7c:	4623      	mov	r3, r4
 800cd7e:	6864      	ldr	r4, [r4, #4]
 800cd80:	e7ae      	b.n	800cce0 <_malloc_r+0x34>
 800cd82:	463c      	mov	r4, r7
 800cd84:	687f      	ldr	r7, [r7, #4]
 800cd86:	e7b6      	b.n	800ccf6 <_malloc_r+0x4a>
 800cd88:	461a      	mov	r2, r3
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	42a3      	cmp	r3, r4
 800cd8e:	d1fb      	bne.n	800cd88 <_malloc_r+0xdc>
 800cd90:	2300      	movs	r3, #0
 800cd92:	6053      	str	r3, [r2, #4]
 800cd94:	e7de      	b.n	800cd54 <_malloc_r+0xa8>
 800cd96:	230c      	movs	r3, #12
 800cd98:	6033      	str	r3, [r6, #0]
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	f000 f80c 	bl	800cdb8 <__malloc_unlock>
 800cda0:	e794      	b.n	800cccc <_malloc_r+0x20>
 800cda2:	6005      	str	r5, [r0, #0]
 800cda4:	e7d6      	b.n	800cd54 <_malloc_r+0xa8>
 800cda6:	bf00      	nop
 800cda8:	24000530 	.word	0x24000530

0800cdac <__malloc_lock>:
 800cdac:	4801      	ldr	r0, [pc, #4]	@ (800cdb4 <__malloc_lock+0x8>)
 800cdae:	f7ff b91e 	b.w	800bfee <__retarget_lock_acquire_recursive>
 800cdb2:	bf00      	nop
 800cdb4:	24000528 	.word	0x24000528

0800cdb8 <__malloc_unlock>:
 800cdb8:	4801      	ldr	r0, [pc, #4]	@ (800cdc0 <__malloc_unlock+0x8>)
 800cdba:	f7ff b919 	b.w	800bff0 <__retarget_lock_release_recursive>
 800cdbe:	bf00      	nop
 800cdc0:	24000528 	.word	0x24000528

0800cdc4 <_Balloc>:
 800cdc4:	b570      	push	{r4, r5, r6, lr}
 800cdc6:	69c6      	ldr	r6, [r0, #28]
 800cdc8:	4604      	mov	r4, r0
 800cdca:	460d      	mov	r5, r1
 800cdcc:	b976      	cbnz	r6, 800cdec <_Balloc+0x28>
 800cdce:	2010      	movs	r0, #16
 800cdd0:	f7ff ff42 	bl	800cc58 <malloc>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	61e0      	str	r0, [r4, #28]
 800cdd8:	b920      	cbnz	r0, 800cde4 <_Balloc+0x20>
 800cdda:	4b18      	ldr	r3, [pc, #96]	@ (800ce3c <_Balloc+0x78>)
 800cddc:	4818      	ldr	r0, [pc, #96]	@ (800ce40 <_Balloc+0x7c>)
 800cdde:	216b      	movs	r1, #107	@ 0x6b
 800cde0:	f000 fe0a 	bl	800d9f8 <__assert_func>
 800cde4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cde8:	6006      	str	r6, [r0, #0]
 800cdea:	60c6      	str	r6, [r0, #12]
 800cdec:	69e6      	ldr	r6, [r4, #28]
 800cdee:	68f3      	ldr	r3, [r6, #12]
 800cdf0:	b183      	cbz	r3, 800ce14 <_Balloc+0x50>
 800cdf2:	69e3      	ldr	r3, [r4, #28]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cdfa:	b9b8      	cbnz	r0, 800ce2c <_Balloc+0x68>
 800cdfc:	2101      	movs	r1, #1
 800cdfe:	fa01 f605 	lsl.w	r6, r1, r5
 800ce02:	1d72      	adds	r2, r6, #5
 800ce04:	0092      	lsls	r2, r2, #2
 800ce06:	4620      	mov	r0, r4
 800ce08:	f000 fe14 	bl	800da34 <_calloc_r>
 800ce0c:	b160      	cbz	r0, 800ce28 <_Balloc+0x64>
 800ce0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce12:	e00e      	b.n	800ce32 <_Balloc+0x6e>
 800ce14:	2221      	movs	r2, #33	@ 0x21
 800ce16:	2104      	movs	r1, #4
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f000 fe0b 	bl	800da34 <_calloc_r>
 800ce1e:	69e3      	ldr	r3, [r4, #28]
 800ce20:	60f0      	str	r0, [r6, #12]
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1e4      	bne.n	800cdf2 <_Balloc+0x2e>
 800ce28:	2000      	movs	r0, #0
 800ce2a:	bd70      	pop	{r4, r5, r6, pc}
 800ce2c:	6802      	ldr	r2, [r0, #0]
 800ce2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce32:	2300      	movs	r3, #0
 800ce34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce38:	e7f7      	b.n	800ce2a <_Balloc+0x66>
 800ce3a:	bf00      	nop
 800ce3c:	0800dd0d 	.word	0x0800dd0d
 800ce40:	0800dd8d 	.word	0x0800dd8d

0800ce44 <_Bfree>:
 800ce44:	b570      	push	{r4, r5, r6, lr}
 800ce46:	69c6      	ldr	r6, [r0, #28]
 800ce48:	4605      	mov	r5, r0
 800ce4a:	460c      	mov	r4, r1
 800ce4c:	b976      	cbnz	r6, 800ce6c <_Bfree+0x28>
 800ce4e:	2010      	movs	r0, #16
 800ce50:	f7ff ff02 	bl	800cc58 <malloc>
 800ce54:	4602      	mov	r2, r0
 800ce56:	61e8      	str	r0, [r5, #28]
 800ce58:	b920      	cbnz	r0, 800ce64 <_Bfree+0x20>
 800ce5a:	4b09      	ldr	r3, [pc, #36]	@ (800ce80 <_Bfree+0x3c>)
 800ce5c:	4809      	ldr	r0, [pc, #36]	@ (800ce84 <_Bfree+0x40>)
 800ce5e:	218f      	movs	r1, #143	@ 0x8f
 800ce60:	f000 fdca 	bl	800d9f8 <__assert_func>
 800ce64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce68:	6006      	str	r6, [r0, #0]
 800ce6a:	60c6      	str	r6, [r0, #12]
 800ce6c:	b13c      	cbz	r4, 800ce7e <_Bfree+0x3a>
 800ce6e:	69eb      	ldr	r3, [r5, #28]
 800ce70:	6862      	ldr	r2, [r4, #4]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce78:	6021      	str	r1, [r4, #0]
 800ce7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce7e:	bd70      	pop	{r4, r5, r6, pc}
 800ce80:	0800dd0d 	.word	0x0800dd0d
 800ce84:	0800dd8d 	.word	0x0800dd8d

0800ce88 <__multadd>:
 800ce88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce8c:	690d      	ldr	r5, [r1, #16]
 800ce8e:	4607      	mov	r7, r0
 800ce90:	460c      	mov	r4, r1
 800ce92:	461e      	mov	r6, r3
 800ce94:	f101 0c14 	add.w	ip, r1, #20
 800ce98:	2000      	movs	r0, #0
 800ce9a:	f8dc 3000 	ldr.w	r3, [ip]
 800ce9e:	b299      	uxth	r1, r3
 800cea0:	fb02 6101 	mla	r1, r2, r1, r6
 800cea4:	0c1e      	lsrs	r6, r3, #16
 800cea6:	0c0b      	lsrs	r3, r1, #16
 800cea8:	fb02 3306 	mla	r3, r2, r6, r3
 800ceac:	b289      	uxth	r1, r1
 800ceae:	3001      	adds	r0, #1
 800ceb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ceb4:	4285      	cmp	r5, r0
 800ceb6:	f84c 1b04 	str.w	r1, [ip], #4
 800ceba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cebe:	dcec      	bgt.n	800ce9a <__multadd+0x12>
 800cec0:	b30e      	cbz	r6, 800cf06 <__multadd+0x7e>
 800cec2:	68a3      	ldr	r3, [r4, #8]
 800cec4:	42ab      	cmp	r3, r5
 800cec6:	dc19      	bgt.n	800cefc <__multadd+0x74>
 800cec8:	6861      	ldr	r1, [r4, #4]
 800ceca:	4638      	mov	r0, r7
 800cecc:	3101      	adds	r1, #1
 800cece:	f7ff ff79 	bl	800cdc4 <_Balloc>
 800ced2:	4680      	mov	r8, r0
 800ced4:	b928      	cbnz	r0, 800cee2 <__multadd+0x5a>
 800ced6:	4602      	mov	r2, r0
 800ced8:	4b0c      	ldr	r3, [pc, #48]	@ (800cf0c <__multadd+0x84>)
 800ceda:	480d      	ldr	r0, [pc, #52]	@ (800cf10 <__multadd+0x88>)
 800cedc:	21ba      	movs	r1, #186	@ 0xba
 800cede:	f000 fd8b 	bl	800d9f8 <__assert_func>
 800cee2:	6922      	ldr	r2, [r4, #16]
 800cee4:	3202      	adds	r2, #2
 800cee6:	f104 010c 	add.w	r1, r4, #12
 800ceea:	0092      	lsls	r2, r2, #2
 800ceec:	300c      	adds	r0, #12
 800ceee:	f000 fd75 	bl	800d9dc <memcpy>
 800cef2:	4621      	mov	r1, r4
 800cef4:	4638      	mov	r0, r7
 800cef6:	f7ff ffa5 	bl	800ce44 <_Bfree>
 800cefa:	4644      	mov	r4, r8
 800cefc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf00:	3501      	adds	r5, #1
 800cf02:	615e      	str	r6, [r3, #20]
 800cf04:	6125      	str	r5, [r4, #16]
 800cf06:	4620      	mov	r0, r4
 800cf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf0c:	0800dd7c 	.word	0x0800dd7c
 800cf10:	0800dd8d 	.word	0x0800dd8d

0800cf14 <__hi0bits>:
 800cf14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf18:	4603      	mov	r3, r0
 800cf1a:	bf36      	itet	cc
 800cf1c:	0403      	lslcc	r3, r0, #16
 800cf1e:	2000      	movcs	r0, #0
 800cf20:	2010      	movcc	r0, #16
 800cf22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf26:	bf3c      	itt	cc
 800cf28:	021b      	lslcc	r3, r3, #8
 800cf2a:	3008      	addcc	r0, #8
 800cf2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf30:	bf3c      	itt	cc
 800cf32:	011b      	lslcc	r3, r3, #4
 800cf34:	3004      	addcc	r0, #4
 800cf36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf3a:	bf3c      	itt	cc
 800cf3c:	009b      	lslcc	r3, r3, #2
 800cf3e:	3002      	addcc	r0, #2
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	db05      	blt.n	800cf50 <__hi0bits+0x3c>
 800cf44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf48:	f100 0001 	add.w	r0, r0, #1
 800cf4c:	bf08      	it	eq
 800cf4e:	2020      	moveq	r0, #32
 800cf50:	4770      	bx	lr

0800cf52 <__lo0bits>:
 800cf52:	6803      	ldr	r3, [r0, #0]
 800cf54:	4602      	mov	r2, r0
 800cf56:	f013 0007 	ands.w	r0, r3, #7
 800cf5a:	d00b      	beq.n	800cf74 <__lo0bits+0x22>
 800cf5c:	07d9      	lsls	r1, r3, #31
 800cf5e:	d421      	bmi.n	800cfa4 <__lo0bits+0x52>
 800cf60:	0798      	lsls	r0, r3, #30
 800cf62:	bf49      	itett	mi
 800cf64:	085b      	lsrmi	r3, r3, #1
 800cf66:	089b      	lsrpl	r3, r3, #2
 800cf68:	2001      	movmi	r0, #1
 800cf6a:	6013      	strmi	r3, [r2, #0]
 800cf6c:	bf5c      	itt	pl
 800cf6e:	6013      	strpl	r3, [r2, #0]
 800cf70:	2002      	movpl	r0, #2
 800cf72:	4770      	bx	lr
 800cf74:	b299      	uxth	r1, r3
 800cf76:	b909      	cbnz	r1, 800cf7c <__lo0bits+0x2a>
 800cf78:	0c1b      	lsrs	r3, r3, #16
 800cf7a:	2010      	movs	r0, #16
 800cf7c:	b2d9      	uxtb	r1, r3
 800cf7e:	b909      	cbnz	r1, 800cf84 <__lo0bits+0x32>
 800cf80:	3008      	adds	r0, #8
 800cf82:	0a1b      	lsrs	r3, r3, #8
 800cf84:	0719      	lsls	r1, r3, #28
 800cf86:	bf04      	itt	eq
 800cf88:	091b      	lsreq	r3, r3, #4
 800cf8a:	3004      	addeq	r0, #4
 800cf8c:	0799      	lsls	r1, r3, #30
 800cf8e:	bf04      	itt	eq
 800cf90:	089b      	lsreq	r3, r3, #2
 800cf92:	3002      	addeq	r0, #2
 800cf94:	07d9      	lsls	r1, r3, #31
 800cf96:	d403      	bmi.n	800cfa0 <__lo0bits+0x4e>
 800cf98:	085b      	lsrs	r3, r3, #1
 800cf9a:	f100 0001 	add.w	r0, r0, #1
 800cf9e:	d003      	beq.n	800cfa8 <__lo0bits+0x56>
 800cfa0:	6013      	str	r3, [r2, #0]
 800cfa2:	4770      	bx	lr
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	4770      	bx	lr
 800cfa8:	2020      	movs	r0, #32
 800cfaa:	4770      	bx	lr

0800cfac <__i2b>:
 800cfac:	b510      	push	{r4, lr}
 800cfae:	460c      	mov	r4, r1
 800cfb0:	2101      	movs	r1, #1
 800cfb2:	f7ff ff07 	bl	800cdc4 <_Balloc>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	b928      	cbnz	r0, 800cfc6 <__i2b+0x1a>
 800cfba:	4b05      	ldr	r3, [pc, #20]	@ (800cfd0 <__i2b+0x24>)
 800cfbc:	4805      	ldr	r0, [pc, #20]	@ (800cfd4 <__i2b+0x28>)
 800cfbe:	f240 1145 	movw	r1, #325	@ 0x145
 800cfc2:	f000 fd19 	bl	800d9f8 <__assert_func>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	6144      	str	r4, [r0, #20]
 800cfca:	6103      	str	r3, [r0, #16]
 800cfcc:	bd10      	pop	{r4, pc}
 800cfce:	bf00      	nop
 800cfd0:	0800dd7c 	.word	0x0800dd7c
 800cfd4:	0800dd8d 	.word	0x0800dd8d

0800cfd8 <__multiply>:
 800cfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfdc:	4617      	mov	r7, r2
 800cfde:	690a      	ldr	r2, [r1, #16]
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	bfa8      	it	ge
 800cfe6:	463b      	movge	r3, r7
 800cfe8:	4689      	mov	r9, r1
 800cfea:	bfa4      	itt	ge
 800cfec:	460f      	movge	r7, r1
 800cfee:	4699      	movge	r9, r3
 800cff0:	693d      	ldr	r5, [r7, #16]
 800cff2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	6879      	ldr	r1, [r7, #4]
 800cffa:	eb05 060a 	add.w	r6, r5, sl
 800cffe:	42b3      	cmp	r3, r6
 800d000:	b085      	sub	sp, #20
 800d002:	bfb8      	it	lt
 800d004:	3101      	addlt	r1, #1
 800d006:	f7ff fedd 	bl	800cdc4 <_Balloc>
 800d00a:	b930      	cbnz	r0, 800d01a <__multiply+0x42>
 800d00c:	4602      	mov	r2, r0
 800d00e:	4b41      	ldr	r3, [pc, #260]	@ (800d114 <__multiply+0x13c>)
 800d010:	4841      	ldr	r0, [pc, #260]	@ (800d118 <__multiply+0x140>)
 800d012:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d016:	f000 fcef 	bl	800d9f8 <__assert_func>
 800d01a:	f100 0414 	add.w	r4, r0, #20
 800d01e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d022:	4623      	mov	r3, r4
 800d024:	2200      	movs	r2, #0
 800d026:	4573      	cmp	r3, lr
 800d028:	d320      	bcc.n	800d06c <__multiply+0x94>
 800d02a:	f107 0814 	add.w	r8, r7, #20
 800d02e:	f109 0114 	add.w	r1, r9, #20
 800d032:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d036:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d03a:	9302      	str	r3, [sp, #8]
 800d03c:	1beb      	subs	r3, r5, r7
 800d03e:	3b15      	subs	r3, #21
 800d040:	f023 0303 	bic.w	r3, r3, #3
 800d044:	3304      	adds	r3, #4
 800d046:	3715      	adds	r7, #21
 800d048:	42bd      	cmp	r5, r7
 800d04a:	bf38      	it	cc
 800d04c:	2304      	movcc	r3, #4
 800d04e:	9301      	str	r3, [sp, #4]
 800d050:	9b02      	ldr	r3, [sp, #8]
 800d052:	9103      	str	r1, [sp, #12]
 800d054:	428b      	cmp	r3, r1
 800d056:	d80c      	bhi.n	800d072 <__multiply+0x9a>
 800d058:	2e00      	cmp	r6, #0
 800d05a:	dd03      	ble.n	800d064 <__multiply+0x8c>
 800d05c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d060:	2b00      	cmp	r3, #0
 800d062:	d055      	beq.n	800d110 <__multiply+0x138>
 800d064:	6106      	str	r6, [r0, #16]
 800d066:	b005      	add	sp, #20
 800d068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d06c:	f843 2b04 	str.w	r2, [r3], #4
 800d070:	e7d9      	b.n	800d026 <__multiply+0x4e>
 800d072:	f8b1 a000 	ldrh.w	sl, [r1]
 800d076:	f1ba 0f00 	cmp.w	sl, #0
 800d07a:	d01f      	beq.n	800d0bc <__multiply+0xe4>
 800d07c:	46c4      	mov	ip, r8
 800d07e:	46a1      	mov	r9, r4
 800d080:	2700      	movs	r7, #0
 800d082:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d086:	f8d9 3000 	ldr.w	r3, [r9]
 800d08a:	fa1f fb82 	uxth.w	fp, r2
 800d08e:	b29b      	uxth	r3, r3
 800d090:	fb0a 330b 	mla	r3, sl, fp, r3
 800d094:	443b      	add	r3, r7
 800d096:	f8d9 7000 	ldr.w	r7, [r9]
 800d09a:	0c12      	lsrs	r2, r2, #16
 800d09c:	0c3f      	lsrs	r7, r7, #16
 800d09e:	fb0a 7202 	mla	r2, sl, r2, r7
 800d0a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0ac:	4565      	cmp	r5, ip
 800d0ae:	f849 3b04 	str.w	r3, [r9], #4
 800d0b2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d0b6:	d8e4      	bhi.n	800d082 <__multiply+0xaa>
 800d0b8:	9b01      	ldr	r3, [sp, #4]
 800d0ba:	50e7      	str	r7, [r4, r3]
 800d0bc:	9b03      	ldr	r3, [sp, #12]
 800d0be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d0c2:	3104      	adds	r1, #4
 800d0c4:	f1b9 0f00 	cmp.w	r9, #0
 800d0c8:	d020      	beq.n	800d10c <__multiply+0x134>
 800d0ca:	6823      	ldr	r3, [r4, #0]
 800d0cc:	4647      	mov	r7, r8
 800d0ce:	46a4      	mov	ip, r4
 800d0d0:	f04f 0a00 	mov.w	sl, #0
 800d0d4:	f8b7 b000 	ldrh.w	fp, [r7]
 800d0d8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d0dc:	fb09 220b 	mla	r2, r9, fp, r2
 800d0e0:	4452      	add	r2, sl
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0e8:	f84c 3b04 	str.w	r3, [ip], #4
 800d0ec:	f857 3b04 	ldr.w	r3, [r7], #4
 800d0f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0f4:	f8bc 3000 	ldrh.w	r3, [ip]
 800d0f8:	fb09 330a 	mla	r3, r9, sl, r3
 800d0fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d100:	42bd      	cmp	r5, r7
 800d102:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d106:	d8e5      	bhi.n	800d0d4 <__multiply+0xfc>
 800d108:	9a01      	ldr	r2, [sp, #4]
 800d10a:	50a3      	str	r3, [r4, r2]
 800d10c:	3404      	adds	r4, #4
 800d10e:	e79f      	b.n	800d050 <__multiply+0x78>
 800d110:	3e01      	subs	r6, #1
 800d112:	e7a1      	b.n	800d058 <__multiply+0x80>
 800d114:	0800dd7c 	.word	0x0800dd7c
 800d118:	0800dd8d 	.word	0x0800dd8d

0800d11c <__pow5mult>:
 800d11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d120:	4615      	mov	r5, r2
 800d122:	f012 0203 	ands.w	r2, r2, #3
 800d126:	4607      	mov	r7, r0
 800d128:	460e      	mov	r6, r1
 800d12a:	d007      	beq.n	800d13c <__pow5mult+0x20>
 800d12c:	4c25      	ldr	r4, [pc, #148]	@ (800d1c4 <__pow5mult+0xa8>)
 800d12e:	3a01      	subs	r2, #1
 800d130:	2300      	movs	r3, #0
 800d132:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d136:	f7ff fea7 	bl	800ce88 <__multadd>
 800d13a:	4606      	mov	r6, r0
 800d13c:	10ad      	asrs	r5, r5, #2
 800d13e:	d03d      	beq.n	800d1bc <__pow5mult+0xa0>
 800d140:	69fc      	ldr	r4, [r7, #28]
 800d142:	b97c      	cbnz	r4, 800d164 <__pow5mult+0x48>
 800d144:	2010      	movs	r0, #16
 800d146:	f7ff fd87 	bl	800cc58 <malloc>
 800d14a:	4602      	mov	r2, r0
 800d14c:	61f8      	str	r0, [r7, #28]
 800d14e:	b928      	cbnz	r0, 800d15c <__pow5mult+0x40>
 800d150:	4b1d      	ldr	r3, [pc, #116]	@ (800d1c8 <__pow5mult+0xac>)
 800d152:	481e      	ldr	r0, [pc, #120]	@ (800d1cc <__pow5mult+0xb0>)
 800d154:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d158:	f000 fc4e 	bl	800d9f8 <__assert_func>
 800d15c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d160:	6004      	str	r4, [r0, #0]
 800d162:	60c4      	str	r4, [r0, #12]
 800d164:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d168:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d16c:	b94c      	cbnz	r4, 800d182 <__pow5mult+0x66>
 800d16e:	f240 2171 	movw	r1, #625	@ 0x271
 800d172:	4638      	mov	r0, r7
 800d174:	f7ff ff1a 	bl	800cfac <__i2b>
 800d178:	2300      	movs	r3, #0
 800d17a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d17e:	4604      	mov	r4, r0
 800d180:	6003      	str	r3, [r0, #0]
 800d182:	f04f 0900 	mov.w	r9, #0
 800d186:	07eb      	lsls	r3, r5, #31
 800d188:	d50a      	bpl.n	800d1a0 <__pow5mult+0x84>
 800d18a:	4631      	mov	r1, r6
 800d18c:	4622      	mov	r2, r4
 800d18e:	4638      	mov	r0, r7
 800d190:	f7ff ff22 	bl	800cfd8 <__multiply>
 800d194:	4631      	mov	r1, r6
 800d196:	4680      	mov	r8, r0
 800d198:	4638      	mov	r0, r7
 800d19a:	f7ff fe53 	bl	800ce44 <_Bfree>
 800d19e:	4646      	mov	r6, r8
 800d1a0:	106d      	asrs	r5, r5, #1
 800d1a2:	d00b      	beq.n	800d1bc <__pow5mult+0xa0>
 800d1a4:	6820      	ldr	r0, [r4, #0]
 800d1a6:	b938      	cbnz	r0, 800d1b8 <__pow5mult+0x9c>
 800d1a8:	4622      	mov	r2, r4
 800d1aa:	4621      	mov	r1, r4
 800d1ac:	4638      	mov	r0, r7
 800d1ae:	f7ff ff13 	bl	800cfd8 <__multiply>
 800d1b2:	6020      	str	r0, [r4, #0]
 800d1b4:	f8c0 9000 	str.w	r9, [r0]
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	e7e4      	b.n	800d186 <__pow5mult+0x6a>
 800d1bc:	4630      	mov	r0, r6
 800d1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1c2:	bf00      	nop
 800d1c4:	0800de40 	.word	0x0800de40
 800d1c8:	0800dd0d 	.word	0x0800dd0d
 800d1cc:	0800dd8d 	.word	0x0800dd8d

0800d1d0 <__lshift>:
 800d1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1d4:	460c      	mov	r4, r1
 800d1d6:	6849      	ldr	r1, [r1, #4]
 800d1d8:	6923      	ldr	r3, [r4, #16]
 800d1da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1de:	68a3      	ldr	r3, [r4, #8]
 800d1e0:	4607      	mov	r7, r0
 800d1e2:	4691      	mov	r9, r2
 800d1e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d1e8:	f108 0601 	add.w	r6, r8, #1
 800d1ec:	42b3      	cmp	r3, r6
 800d1ee:	db0b      	blt.n	800d208 <__lshift+0x38>
 800d1f0:	4638      	mov	r0, r7
 800d1f2:	f7ff fde7 	bl	800cdc4 <_Balloc>
 800d1f6:	4605      	mov	r5, r0
 800d1f8:	b948      	cbnz	r0, 800d20e <__lshift+0x3e>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	4b28      	ldr	r3, [pc, #160]	@ (800d2a0 <__lshift+0xd0>)
 800d1fe:	4829      	ldr	r0, [pc, #164]	@ (800d2a4 <__lshift+0xd4>)
 800d200:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d204:	f000 fbf8 	bl	800d9f8 <__assert_func>
 800d208:	3101      	adds	r1, #1
 800d20a:	005b      	lsls	r3, r3, #1
 800d20c:	e7ee      	b.n	800d1ec <__lshift+0x1c>
 800d20e:	2300      	movs	r3, #0
 800d210:	f100 0114 	add.w	r1, r0, #20
 800d214:	f100 0210 	add.w	r2, r0, #16
 800d218:	4618      	mov	r0, r3
 800d21a:	4553      	cmp	r3, sl
 800d21c:	db33      	blt.n	800d286 <__lshift+0xb6>
 800d21e:	6920      	ldr	r0, [r4, #16]
 800d220:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d224:	f104 0314 	add.w	r3, r4, #20
 800d228:	f019 091f 	ands.w	r9, r9, #31
 800d22c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d230:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d234:	d02b      	beq.n	800d28e <__lshift+0xbe>
 800d236:	f1c9 0e20 	rsb	lr, r9, #32
 800d23a:	468a      	mov	sl, r1
 800d23c:	2200      	movs	r2, #0
 800d23e:	6818      	ldr	r0, [r3, #0]
 800d240:	fa00 f009 	lsl.w	r0, r0, r9
 800d244:	4310      	orrs	r0, r2
 800d246:	f84a 0b04 	str.w	r0, [sl], #4
 800d24a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d24e:	459c      	cmp	ip, r3
 800d250:	fa22 f20e 	lsr.w	r2, r2, lr
 800d254:	d8f3      	bhi.n	800d23e <__lshift+0x6e>
 800d256:	ebac 0304 	sub.w	r3, ip, r4
 800d25a:	3b15      	subs	r3, #21
 800d25c:	f023 0303 	bic.w	r3, r3, #3
 800d260:	3304      	adds	r3, #4
 800d262:	f104 0015 	add.w	r0, r4, #21
 800d266:	4560      	cmp	r0, ip
 800d268:	bf88      	it	hi
 800d26a:	2304      	movhi	r3, #4
 800d26c:	50ca      	str	r2, [r1, r3]
 800d26e:	b10a      	cbz	r2, 800d274 <__lshift+0xa4>
 800d270:	f108 0602 	add.w	r6, r8, #2
 800d274:	3e01      	subs	r6, #1
 800d276:	4638      	mov	r0, r7
 800d278:	612e      	str	r6, [r5, #16]
 800d27a:	4621      	mov	r1, r4
 800d27c:	f7ff fde2 	bl	800ce44 <_Bfree>
 800d280:	4628      	mov	r0, r5
 800d282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d286:	f842 0f04 	str.w	r0, [r2, #4]!
 800d28a:	3301      	adds	r3, #1
 800d28c:	e7c5      	b.n	800d21a <__lshift+0x4a>
 800d28e:	3904      	subs	r1, #4
 800d290:	f853 2b04 	ldr.w	r2, [r3], #4
 800d294:	f841 2f04 	str.w	r2, [r1, #4]!
 800d298:	459c      	cmp	ip, r3
 800d29a:	d8f9      	bhi.n	800d290 <__lshift+0xc0>
 800d29c:	e7ea      	b.n	800d274 <__lshift+0xa4>
 800d29e:	bf00      	nop
 800d2a0:	0800dd7c 	.word	0x0800dd7c
 800d2a4:	0800dd8d 	.word	0x0800dd8d

0800d2a8 <__mcmp>:
 800d2a8:	690a      	ldr	r2, [r1, #16]
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	6900      	ldr	r0, [r0, #16]
 800d2ae:	1a80      	subs	r0, r0, r2
 800d2b0:	b530      	push	{r4, r5, lr}
 800d2b2:	d10e      	bne.n	800d2d2 <__mcmp+0x2a>
 800d2b4:	3314      	adds	r3, #20
 800d2b6:	3114      	adds	r1, #20
 800d2b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d2bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d2c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2c8:	4295      	cmp	r5, r2
 800d2ca:	d003      	beq.n	800d2d4 <__mcmp+0x2c>
 800d2cc:	d205      	bcs.n	800d2da <__mcmp+0x32>
 800d2ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d2:	bd30      	pop	{r4, r5, pc}
 800d2d4:	42a3      	cmp	r3, r4
 800d2d6:	d3f3      	bcc.n	800d2c0 <__mcmp+0x18>
 800d2d8:	e7fb      	b.n	800d2d2 <__mcmp+0x2a>
 800d2da:	2001      	movs	r0, #1
 800d2dc:	e7f9      	b.n	800d2d2 <__mcmp+0x2a>
	...

0800d2e0 <__mdiff>:
 800d2e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e4:	4689      	mov	r9, r1
 800d2e6:	4606      	mov	r6, r0
 800d2e8:	4611      	mov	r1, r2
 800d2ea:	4648      	mov	r0, r9
 800d2ec:	4614      	mov	r4, r2
 800d2ee:	f7ff ffdb 	bl	800d2a8 <__mcmp>
 800d2f2:	1e05      	subs	r5, r0, #0
 800d2f4:	d112      	bne.n	800d31c <__mdiff+0x3c>
 800d2f6:	4629      	mov	r1, r5
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	f7ff fd63 	bl	800cdc4 <_Balloc>
 800d2fe:	4602      	mov	r2, r0
 800d300:	b928      	cbnz	r0, 800d30e <__mdiff+0x2e>
 800d302:	4b3f      	ldr	r3, [pc, #252]	@ (800d400 <__mdiff+0x120>)
 800d304:	f240 2137 	movw	r1, #567	@ 0x237
 800d308:	483e      	ldr	r0, [pc, #248]	@ (800d404 <__mdiff+0x124>)
 800d30a:	f000 fb75 	bl	800d9f8 <__assert_func>
 800d30e:	2301      	movs	r3, #1
 800d310:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d314:	4610      	mov	r0, r2
 800d316:	b003      	add	sp, #12
 800d318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d31c:	bfbc      	itt	lt
 800d31e:	464b      	movlt	r3, r9
 800d320:	46a1      	movlt	r9, r4
 800d322:	4630      	mov	r0, r6
 800d324:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d328:	bfba      	itte	lt
 800d32a:	461c      	movlt	r4, r3
 800d32c:	2501      	movlt	r5, #1
 800d32e:	2500      	movge	r5, #0
 800d330:	f7ff fd48 	bl	800cdc4 <_Balloc>
 800d334:	4602      	mov	r2, r0
 800d336:	b918      	cbnz	r0, 800d340 <__mdiff+0x60>
 800d338:	4b31      	ldr	r3, [pc, #196]	@ (800d400 <__mdiff+0x120>)
 800d33a:	f240 2145 	movw	r1, #581	@ 0x245
 800d33e:	e7e3      	b.n	800d308 <__mdiff+0x28>
 800d340:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d344:	6926      	ldr	r6, [r4, #16]
 800d346:	60c5      	str	r5, [r0, #12]
 800d348:	f109 0310 	add.w	r3, r9, #16
 800d34c:	f109 0514 	add.w	r5, r9, #20
 800d350:	f104 0e14 	add.w	lr, r4, #20
 800d354:	f100 0b14 	add.w	fp, r0, #20
 800d358:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d35c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d360:	9301      	str	r3, [sp, #4]
 800d362:	46d9      	mov	r9, fp
 800d364:	f04f 0c00 	mov.w	ip, #0
 800d368:	9b01      	ldr	r3, [sp, #4]
 800d36a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d36e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d372:	9301      	str	r3, [sp, #4]
 800d374:	fa1f f38a 	uxth.w	r3, sl
 800d378:	4619      	mov	r1, r3
 800d37a:	b283      	uxth	r3, r0
 800d37c:	1acb      	subs	r3, r1, r3
 800d37e:	0c00      	lsrs	r0, r0, #16
 800d380:	4463      	add	r3, ip
 800d382:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d386:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d390:	4576      	cmp	r6, lr
 800d392:	f849 3b04 	str.w	r3, [r9], #4
 800d396:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d39a:	d8e5      	bhi.n	800d368 <__mdiff+0x88>
 800d39c:	1b33      	subs	r3, r6, r4
 800d39e:	3b15      	subs	r3, #21
 800d3a0:	f023 0303 	bic.w	r3, r3, #3
 800d3a4:	3415      	adds	r4, #21
 800d3a6:	3304      	adds	r3, #4
 800d3a8:	42a6      	cmp	r6, r4
 800d3aa:	bf38      	it	cc
 800d3ac:	2304      	movcc	r3, #4
 800d3ae:	441d      	add	r5, r3
 800d3b0:	445b      	add	r3, fp
 800d3b2:	461e      	mov	r6, r3
 800d3b4:	462c      	mov	r4, r5
 800d3b6:	4544      	cmp	r4, r8
 800d3b8:	d30e      	bcc.n	800d3d8 <__mdiff+0xf8>
 800d3ba:	f108 0103 	add.w	r1, r8, #3
 800d3be:	1b49      	subs	r1, r1, r5
 800d3c0:	f021 0103 	bic.w	r1, r1, #3
 800d3c4:	3d03      	subs	r5, #3
 800d3c6:	45a8      	cmp	r8, r5
 800d3c8:	bf38      	it	cc
 800d3ca:	2100      	movcc	r1, #0
 800d3cc:	440b      	add	r3, r1
 800d3ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3d2:	b191      	cbz	r1, 800d3fa <__mdiff+0x11a>
 800d3d4:	6117      	str	r7, [r2, #16]
 800d3d6:	e79d      	b.n	800d314 <__mdiff+0x34>
 800d3d8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d3dc:	46e6      	mov	lr, ip
 800d3de:	0c08      	lsrs	r0, r1, #16
 800d3e0:	fa1c fc81 	uxtah	ip, ip, r1
 800d3e4:	4471      	add	r1, lr
 800d3e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d3ea:	b289      	uxth	r1, r1
 800d3ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d3f0:	f846 1b04 	str.w	r1, [r6], #4
 800d3f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3f8:	e7dd      	b.n	800d3b6 <__mdiff+0xd6>
 800d3fa:	3f01      	subs	r7, #1
 800d3fc:	e7e7      	b.n	800d3ce <__mdiff+0xee>
 800d3fe:	bf00      	nop
 800d400:	0800dd7c 	.word	0x0800dd7c
 800d404:	0800dd8d 	.word	0x0800dd8d

0800d408 <__d2b>:
 800d408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d40c:	460f      	mov	r7, r1
 800d40e:	2101      	movs	r1, #1
 800d410:	ec59 8b10 	vmov	r8, r9, d0
 800d414:	4616      	mov	r6, r2
 800d416:	f7ff fcd5 	bl	800cdc4 <_Balloc>
 800d41a:	4604      	mov	r4, r0
 800d41c:	b930      	cbnz	r0, 800d42c <__d2b+0x24>
 800d41e:	4602      	mov	r2, r0
 800d420:	4b23      	ldr	r3, [pc, #140]	@ (800d4b0 <__d2b+0xa8>)
 800d422:	4824      	ldr	r0, [pc, #144]	@ (800d4b4 <__d2b+0xac>)
 800d424:	f240 310f 	movw	r1, #783	@ 0x30f
 800d428:	f000 fae6 	bl	800d9f8 <__assert_func>
 800d42c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d430:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d434:	b10d      	cbz	r5, 800d43a <__d2b+0x32>
 800d436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d43a:	9301      	str	r3, [sp, #4]
 800d43c:	f1b8 0300 	subs.w	r3, r8, #0
 800d440:	d023      	beq.n	800d48a <__d2b+0x82>
 800d442:	4668      	mov	r0, sp
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	f7ff fd84 	bl	800cf52 <__lo0bits>
 800d44a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d44e:	b1d0      	cbz	r0, 800d486 <__d2b+0x7e>
 800d450:	f1c0 0320 	rsb	r3, r0, #32
 800d454:	fa02 f303 	lsl.w	r3, r2, r3
 800d458:	430b      	orrs	r3, r1
 800d45a:	40c2      	lsrs	r2, r0
 800d45c:	6163      	str	r3, [r4, #20]
 800d45e:	9201      	str	r2, [sp, #4]
 800d460:	9b01      	ldr	r3, [sp, #4]
 800d462:	61a3      	str	r3, [r4, #24]
 800d464:	2b00      	cmp	r3, #0
 800d466:	bf0c      	ite	eq
 800d468:	2201      	moveq	r2, #1
 800d46a:	2202      	movne	r2, #2
 800d46c:	6122      	str	r2, [r4, #16]
 800d46e:	b1a5      	cbz	r5, 800d49a <__d2b+0x92>
 800d470:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d474:	4405      	add	r5, r0
 800d476:	603d      	str	r5, [r7, #0]
 800d478:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d47c:	6030      	str	r0, [r6, #0]
 800d47e:	4620      	mov	r0, r4
 800d480:	b003      	add	sp, #12
 800d482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d486:	6161      	str	r1, [r4, #20]
 800d488:	e7ea      	b.n	800d460 <__d2b+0x58>
 800d48a:	a801      	add	r0, sp, #4
 800d48c:	f7ff fd61 	bl	800cf52 <__lo0bits>
 800d490:	9b01      	ldr	r3, [sp, #4]
 800d492:	6163      	str	r3, [r4, #20]
 800d494:	3020      	adds	r0, #32
 800d496:	2201      	movs	r2, #1
 800d498:	e7e8      	b.n	800d46c <__d2b+0x64>
 800d49a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d49e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d4a2:	6038      	str	r0, [r7, #0]
 800d4a4:	6918      	ldr	r0, [r3, #16]
 800d4a6:	f7ff fd35 	bl	800cf14 <__hi0bits>
 800d4aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4ae:	e7e5      	b.n	800d47c <__d2b+0x74>
 800d4b0:	0800dd7c 	.word	0x0800dd7c
 800d4b4:	0800dd8d 	.word	0x0800dd8d

0800d4b8 <__sfputc_r>:
 800d4b8:	6893      	ldr	r3, [r2, #8]
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	b410      	push	{r4}
 800d4c0:	6093      	str	r3, [r2, #8]
 800d4c2:	da08      	bge.n	800d4d6 <__sfputc_r+0x1e>
 800d4c4:	6994      	ldr	r4, [r2, #24]
 800d4c6:	42a3      	cmp	r3, r4
 800d4c8:	db01      	blt.n	800d4ce <__sfputc_r+0x16>
 800d4ca:	290a      	cmp	r1, #10
 800d4cc:	d103      	bne.n	800d4d6 <__sfputc_r+0x1e>
 800d4ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4d2:	f000 b9df 	b.w	800d894 <__swbuf_r>
 800d4d6:	6813      	ldr	r3, [r2, #0]
 800d4d8:	1c58      	adds	r0, r3, #1
 800d4da:	6010      	str	r0, [r2, #0]
 800d4dc:	7019      	strb	r1, [r3, #0]
 800d4de:	4608      	mov	r0, r1
 800d4e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4e4:	4770      	bx	lr

0800d4e6 <__sfputs_r>:
 800d4e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e8:	4606      	mov	r6, r0
 800d4ea:	460f      	mov	r7, r1
 800d4ec:	4614      	mov	r4, r2
 800d4ee:	18d5      	adds	r5, r2, r3
 800d4f0:	42ac      	cmp	r4, r5
 800d4f2:	d101      	bne.n	800d4f8 <__sfputs_r+0x12>
 800d4f4:	2000      	movs	r0, #0
 800d4f6:	e007      	b.n	800d508 <__sfputs_r+0x22>
 800d4f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4fc:	463a      	mov	r2, r7
 800d4fe:	4630      	mov	r0, r6
 800d500:	f7ff ffda 	bl	800d4b8 <__sfputc_r>
 800d504:	1c43      	adds	r3, r0, #1
 800d506:	d1f3      	bne.n	800d4f0 <__sfputs_r+0xa>
 800d508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d50c <_vfiprintf_r>:
 800d50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d510:	460d      	mov	r5, r1
 800d512:	b09d      	sub	sp, #116	@ 0x74
 800d514:	4614      	mov	r4, r2
 800d516:	4698      	mov	r8, r3
 800d518:	4606      	mov	r6, r0
 800d51a:	b118      	cbz	r0, 800d524 <_vfiprintf_r+0x18>
 800d51c:	6a03      	ldr	r3, [r0, #32]
 800d51e:	b90b      	cbnz	r3, 800d524 <_vfiprintf_r+0x18>
 800d520:	f7fe fc5c 	bl	800bddc <__sinit>
 800d524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d526:	07d9      	lsls	r1, r3, #31
 800d528:	d405      	bmi.n	800d536 <_vfiprintf_r+0x2a>
 800d52a:	89ab      	ldrh	r3, [r5, #12]
 800d52c:	059a      	lsls	r2, r3, #22
 800d52e:	d402      	bmi.n	800d536 <_vfiprintf_r+0x2a>
 800d530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d532:	f7fe fd5c 	bl	800bfee <__retarget_lock_acquire_recursive>
 800d536:	89ab      	ldrh	r3, [r5, #12]
 800d538:	071b      	lsls	r3, r3, #28
 800d53a:	d501      	bpl.n	800d540 <_vfiprintf_r+0x34>
 800d53c:	692b      	ldr	r3, [r5, #16]
 800d53e:	b99b      	cbnz	r3, 800d568 <_vfiprintf_r+0x5c>
 800d540:	4629      	mov	r1, r5
 800d542:	4630      	mov	r0, r6
 800d544:	f000 f9e4 	bl	800d910 <__swsetup_r>
 800d548:	b170      	cbz	r0, 800d568 <_vfiprintf_r+0x5c>
 800d54a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d54c:	07dc      	lsls	r4, r3, #31
 800d54e:	d504      	bpl.n	800d55a <_vfiprintf_r+0x4e>
 800d550:	f04f 30ff 	mov.w	r0, #4294967295
 800d554:	b01d      	add	sp, #116	@ 0x74
 800d556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d55a:	89ab      	ldrh	r3, [r5, #12]
 800d55c:	0598      	lsls	r0, r3, #22
 800d55e:	d4f7      	bmi.n	800d550 <_vfiprintf_r+0x44>
 800d560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d562:	f7fe fd45 	bl	800bff0 <__retarget_lock_release_recursive>
 800d566:	e7f3      	b.n	800d550 <_vfiprintf_r+0x44>
 800d568:	2300      	movs	r3, #0
 800d56a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d56c:	2320      	movs	r3, #32
 800d56e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d572:	f8cd 800c 	str.w	r8, [sp, #12]
 800d576:	2330      	movs	r3, #48	@ 0x30
 800d578:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d728 <_vfiprintf_r+0x21c>
 800d57c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d580:	f04f 0901 	mov.w	r9, #1
 800d584:	4623      	mov	r3, r4
 800d586:	469a      	mov	sl, r3
 800d588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d58c:	b10a      	cbz	r2, 800d592 <_vfiprintf_r+0x86>
 800d58e:	2a25      	cmp	r2, #37	@ 0x25
 800d590:	d1f9      	bne.n	800d586 <_vfiprintf_r+0x7a>
 800d592:	ebba 0b04 	subs.w	fp, sl, r4
 800d596:	d00b      	beq.n	800d5b0 <_vfiprintf_r+0xa4>
 800d598:	465b      	mov	r3, fp
 800d59a:	4622      	mov	r2, r4
 800d59c:	4629      	mov	r1, r5
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f7ff ffa1 	bl	800d4e6 <__sfputs_r>
 800d5a4:	3001      	adds	r0, #1
 800d5a6:	f000 80a7 	beq.w	800d6f8 <_vfiprintf_r+0x1ec>
 800d5aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5ac:	445a      	add	r2, fp
 800d5ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 809f 	beq.w	800d6f8 <_vfiprintf_r+0x1ec>
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d5c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5c4:	f10a 0a01 	add.w	sl, sl, #1
 800d5c8:	9304      	str	r3, [sp, #16]
 800d5ca:	9307      	str	r3, [sp, #28]
 800d5cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5d2:	4654      	mov	r4, sl
 800d5d4:	2205      	movs	r2, #5
 800d5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5da:	4853      	ldr	r0, [pc, #332]	@ (800d728 <_vfiprintf_r+0x21c>)
 800d5dc:	f7f2 fe88 	bl	80002f0 <memchr>
 800d5e0:	9a04      	ldr	r2, [sp, #16]
 800d5e2:	b9d8      	cbnz	r0, 800d61c <_vfiprintf_r+0x110>
 800d5e4:	06d1      	lsls	r1, r2, #27
 800d5e6:	bf44      	itt	mi
 800d5e8:	2320      	movmi	r3, #32
 800d5ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5ee:	0713      	lsls	r3, r2, #28
 800d5f0:	bf44      	itt	mi
 800d5f2:	232b      	movmi	r3, #43	@ 0x2b
 800d5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d5fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5fe:	d015      	beq.n	800d62c <_vfiprintf_r+0x120>
 800d600:	9a07      	ldr	r2, [sp, #28]
 800d602:	4654      	mov	r4, sl
 800d604:	2000      	movs	r0, #0
 800d606:	f04f 0c0a 	mov.w	ip, #10
 800d60a:	4621      	mov	r1, r4
 800d60c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d610:	3b30      	subs	r3, #48	@ 0x30
 800d612:	2b09      	cmp	r3, #9
 800d614:	d94b      	bls.n	800d6ae <_vfiprintf_r+0x1a2>
 800d616:	b1b0      	cbz	r0, 800d646 <_vfiprintf_r+0x13a>
 800d618:	9207      	str	r2, [sp, #28]
 800d61a:	e014      	b.n	800d646 <_vfiprintf_r+0x13a>
 800d61c:	eba0 0308 	sub.w	r3, r0, r8
 800d620:	fa09 f303 	lsl.w	r3, r9, r3
 800d624:	4313      	orrs	r3, r2
 800d626:	9304      	str	r3, [sp, #16]
 800d628:	46a2      	mov	sl, r4
 800d62a:	e7d2      	b.n	800d5d2 <_vfiprintf_r+0xc6>
 800d62c:	9b03      	ldr	r3, [sp, #12]
 800d62e:	1d19      	adds	r1, r3, #4
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	9103      	str	r1, [sp, #12]
 800d634:	2b00      	cmp	r3, #0
 800d636:	bfbb      	ittet	lt
 800d638:	425b      	neglt	r3, r3
 800d63a:	f042 0202 	orrlt.w	r2, r2, #2
 800d63e:	9307      	strge	r3, [sp, #28]
 800d640:	9307      	strlt	r3, [sp, #28]
 800d642:	bfb8      	it	lt
 800d644:	9204      	strlt	r2, [sp, #16]
 800d646:	7823      	ldrb	r3, [r4, #0]
 800d648:	2b2e      	cmp	r3, #46	@ 0x2e
 800d64a:	d10a      	bne.n	800d662 <_vfiprintf_r+0x156>
 800d64c:	7863      	ldrb	r3, [r4, #1]
 800d64e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d650:	d132      	bne.n	800d6b8 <_vfiprintf_r+0x1ac>
 800d652:	9b03      	ldr	r3, [sp, #12]
 800d654:	1d1a      	adds	r2, r3, #4
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	9203      	str	r2, [sp, #12]
 800d65a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d65e:	3402      	adds	r4, #2
 800d660:	9305      	str	r3, [sp, #20]
 800d662:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d738 <_vfiprintf_r+0x22c>
 800d666:	7821      	ldrb	r1, [r4, #0]
 800d668:	2203      	movs	r2, #3
 800d66a:	4650      	mov	r0, sl
 800d66c:	f7f2 fe40 	bl	80002f0 <memchr>
 800d670:	b138      	cbz	r0, 800d682 <_vfiprintf_r+0x176>
 800d672:	9b04      	ldr	r3, [sp, #16]
 800d674:	eba0 000a 	sub.w	r0, r0, sl
 800d678:	2240      	movs	r2, #64	@ 0x40
 800d67a:	4082      	lsls	r2, r0
 800d67c:	4313      	orrs	r3, r2
 800d67e:	3401      	adds	r4, #1
 800d680:	9304      	str	r3, [sp, #16]
 800d682:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d686:	4829      	ldr	r0, [pc, #164]	@ (800d72c <_vfiprintf_r+0x220>)
 800d688:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d68c:	2206      	movs	r2, #6
 800d68e:	f7f2 fe2f 	bl	80002f0 <memchr>
 800d692:	2800      	cmp	r0, #0
 800d694:	d03f      	beq.n	800d716 <_vfiprintf_r+0x20a>
 800d696:	4b26      	ldr	r3, [pc, #152]	@ (800d730 <_vfiprintf_r+0x224>)
 800d698:	bb1b      	cbnz	r3, 800d6e2 <_vfiprintf_r+0x1d6>
 800d69a:	9b03      	ldr	r3, [sp, #12]
 800d69c:	3307      	adds	r3, #7
 800d69e:	f023 0307 	bic.w	r3, r3, #7
 800d6a2:	3308      	adds	r3, #8
 800d6a4:	9303      	str	r3, [sp, #12]
 800d6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6a8:	443b      	add	r3, r7
 800d6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6ac:	e76a      	b.n	800d584 <_vfiprintf_r+0x78>
 800d6ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6b2:	460c      	mov	r4, r1
 800d6b4:	2001      	movs	r0, #1
 800d6b6:	e7a8      	b.n	800d60a <_vfiprintf_r+0xfe>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	3401      	adds	r4, #1
 800d6bc:	9305      	str	r3, [sp, #20]
 800d6be:	4619      	mov	r1, r3
 800d6c0:	f04f 0c0a 	mov.w	ip, #10
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6ca:	3a30      	subs	r2, #48	@ 0x30
 800d6cc:	2a09      	cmp	r2, #9
 800d6ce:	d903      	bls.n	800d6d8 <_vfiprintf_r+0x1cc>
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d0c6      	beq.n	800d662 <_vfiprintf_r+0x156>
 800d6d4:	9105      	str	r1, [sp, #20]
 800d6d6:	e7c4      	b.n	800d662 <_vfiprintf_r+0x156>
 800d6d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6dc:	4604      	mov	r4, r0
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e7f0      	b.n	800d6c4 <_vfiprintf_r+0x1b8>
 800d6e2:	ab03      	add	r3, sp, #12
 800d6e4:	9300      	str	r3, [sp, #0]
 800d6e6:	462a      	mov	r2, r5
 800d6e8:	4b12      	ldr	r3, [pc, #72]	@ (800d734 <_vfiprintf_r+0x228>)
 800d6ea:	a904      	add	r1, sp, #16
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f7fd ff43 	bl	800b578 <_printf_float>
 800d6f2:	4607      	mov	r7, r0
 800d6f4:	1c78      	adds	r0, r7, #1
 800d6f6:	d1d6      	bne.n	800d6a6 <_vfiprintf_r+0x19a>
 800d6f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6fa:	07d9      	lsls	r1, r3, #31
 800d6fc:	d405      	bmi.n	800d70a <_vfiprintf_r+0x1fe>
 800d6fe:	89ab      	ldrh	r3, [r5, #12]
 800d700:	059a      	lsls	r2, r3, #22
 800d702:	d402      	bmi.n	800d70a <_vfiprintf_r+0x1fe>
 800d704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d706:	f7fe fc73 	bl	800bff0 <__retarget_lock_release_recursive>
 800d70a:	89ab      	ldrh	r3, [r5, #12]
 800d70c:	065b      	lsls	r3, r3, #25
 800d70e:	f53f af1f 	bmi.w	800d550 <_vfiprintf_r+0x44>
 800d712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d714:	e71e      	b.n	800d554 <_vfiprintf_r+0x48>
 800d716:	ab03      	add	r3, sp, #12
 800d718:	9300      	str	r3, [sp, #0]
 800d71a:	462a      	mov	r2, r5
 800d71c:	4b05      	ldr	r3, [pc, #20]	@ (800d734 <_vfiprintf_r+0x228>)
 800d71e:	a904      	add	r1, sp, #16
 800d720:	4630      	mov	r0, r6
 800d722:	f7fe f9b1 	bl	800ba88 <_printf_i>
 800d726:	e7e4      	b.n	800d6f2 <_vfiprintf_r+0x1e6>
 800d728:	0800dde6 	.word	0x0800dde6
 800d72c:	0800ddf0 	.word	0x0800ddf0
 800d730:	0800b579 	.word	0x0800b579
 800d734:	0800d4e7 	.word	0x0800d4e7
 800d738:	0800ddec 	.word	0x0800ddec

0800d73c <__sflush_r>:
 800d73c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d744:	0716      	lsls	r6, r2, #28
 800d746:	4605      	mov	r5, r0
 800d748:	460c      	mov	r4, r1
 800d74a:	d454      	bmi.n	800d7f6 <__sflush_r+0xba>
 800d74c:	684b      	ldr	r3, [r1, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	dc02      	bgt.n	800d758 <__sflush_r+0x1c>
 800d752:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d754:	2b00      	cmp	r3, #0
 800d756:	dd48      	ble.n	800d7ea <__sflush_r+0xae>
 800d758:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d75a:	2e00      	cmp	r6, #0
 800d75c:	d045      	beq.n	800d7ea <__sflush_r+0xae>
 800d75e:	2300      	movs	r3, #0
 800d760:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d764:	682f      	ldr	r7, [r5, #0]
 800d766:	6a21      	ldr	r1, [r4, #32]
 800d768:	602b      	str	r3, [r5, #0]
 800d76a:	d030      	beq.n	800d7ce <__sflush_r+0x92>
 800d76c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d76e:	89a3      	ldrh	r3, [r4, #12]
 800d770:	0759      	lsls	r1, r3, #29
 800d772:	d505      	bpl.n	800d780 <__sflush_r+0x44>
 800d774:	6863      	ldr	r3, [r4, #4]
 800d776:	1ad2      	subs	r2, r2, r3
 800d778:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d77a:	b10b      	cbz	r3, 800d780 <__sflush_r+0x44>
 800d77c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d77e:	1ad2      	subs	r2, r2, r3
 800d780:	2300      	movs	r3, #0
 800d782:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d784:	6a21      	ldr	r1, [r4, #32]
 800d786:	4628      	mov	r0, r5
 800d788:	47b0      	blx	r6
 800d78a:	1c43      	adds	r3, r0, #1
 800d78c:	89a3      	ldrh	r3, [r4, #12]
 800d78e:	d106      	bne.n	800d79e <__sflush_r+0x62>
 800d790:	6829      	ldr	r1, [r5, #0]
 800d792:	291d      	cmp	r1, #29
 800d794:	d82b      	bhi.n	800d7ee <__sflush_r+0xb2>
 800d796:	4a2a      	ldr	r2, [pc, #168]	@ (800d840 <__sflush_r+0x104>)
 800d798:	40ca      	lsrs	r2, r1
 800d79a:	07d6      	lsls	r6, r2, #31
 800d79c:	d527      	bpl.n	800d7ee <__sflush_r+0xb2>
 800d79e:	2200      	movs	r2, #0
 800d7a0:	6062      	str	r2, [r4, #4]
 800d7a2:	04d9      	lsls	r1, r3, #19
 800d7a4:	6922      	ldr	r2, [r4, #16]
 800d7a6:	6022      	str	r2, [r4, #0]
 800d7a8:	d504      	bpl.n	800d7b4 <__sflush_r+0x78>
 800d7aa:	1c42      	adds	r2, r0, #1
 800d7ac:	d101      	bne.n	800d7b2 <__sflush_r+0x76>
 800d7ae:	682b      	ldr	r3, [r5, #0]
 800d7b0:	b903      	cbnz	r3, 800d7b4 <__sflush_r+0x78>
 800d7b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7b6:	602f      	str	r7, [r5, #0]
 800d7b8:	b1b9      	cbz	r1, 800d7ea <__sflush_r+0xae>
 800d7ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7be:	4299      	cmp	r1, r3
 800d7c0:	d002      	beq.n	800d7c8 <__sflush_r+0x8c>
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	f7ff f9fe 	bl	800cbc4 <_free_r>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7cc:	e00d      	b.n	800d7ea <__sflush_r+0xae>
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	47b0      	blx	r6
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	1c50      	adds	r0, r2, #1
 800d7d8:	d1c9      	bne.n	800d76e <__sflush_r+0x32>
 800d7da:	682b      	ldr	r3, [r5, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d0c6      	beq.n	800d76e <__sflush_r+0x32>
 800d7e0:	2b1d      	cmp	r3, #29
 800d7e2:	d001      	beq.n	800d7e8 <__sflush_r+0xac>
 800d7e4:	2b16      	cmp	r3, #22
 800d7e6:	d11e      	bne.n	800d826 <__sflush_r+0xea>
 800d7e8:	602f      	str	r7, [r5, #0]
 800d7ea:	2000      	movs	r0, #0
 800d7ec:	e022      	b.n	800d834 <__sflush_r+0xf8>
 800d7ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7f2:	b21b      	sxth	r3, r3
 800d7f4:	e01b      	b.n	800d82e <__sflush_r+0xf2>
 800d7f6:	690f      	ldr	r7, [r1, #16]
 800d7f8:	2f00      	cmp	r7, #0
 800d7fa:	d0f6      	beq.n	800d7ea <__sflush_r+0xae>
 800d7fc:	0793      	lsls	r3, r2, #30
 800d7fe:	680e      	ldr	r6, [r1, #0]
 800d800:	bf08      	it	eq
 800d802:	694b      	ldreq	r3, [r1, #20]
 800d804:	600f      	str	r7, [r1, #0]
 800d806:	bf18      	it	ne
 800d808:	2300      	movne	r3, #0
 800d80a:	eba6 0807 	sub.w	r8, r6, r7
 800d80e:	608b      	str	r3, [r1, #8]
 800d810:	f1b8 0f00 	cmp.w	r8, #0
 800d814:	dde9      	ble.n	800d7ea <__sflush_r+0xae>
 800d816:	6a21      	ldr	r1, [r4, #32]
 800d818:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d81a:	4643      	mov	r3, r8
 800d81c:	463a      	mov	r2, r7
 800d81e:	4628      	mov	r0, r5
 800d820:	47b0      	blx	r6
 800d822:	2800      	cmp	r0, #0
 800d824:	dc08      	bgt.n	800d838 <__sflush_r+0xfc>
 800d826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d82a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d82e:	81a3      	strh	r3, [r4, #12]
 800d830:	f04f 30ff 	mov.w	r0, #4294967295
 800d834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d838:	4407      	add	r7, r0
 800d83a:	eba8 0800 	sub.w	r8, r8, r0
 800d83e:	e7e7      	b.n	800d810 <__sflush_r+0xd4>
 800d840:	20400001 	.word	0x20400001

0800d844 <_fflush_r>:
 800d844:	b538      	push	{r3, r4, r5, lr}
 800d846:	690b      	ldr	r3, [r1, #16]
 800d848:	4605      	mov	r5, r0
 800d84a:	460c      	mov	r4, r1
 800d84c:	b913      	cbnz	r3, 800d854 <_fflush_r+0x10>
 800d84e:	2500      	movs	r5, #0
 800d850:	4628      	mov	r0, r5
 800d852:	bd38      	pop	{r3, r4, r5, pc}
 800d854:	b118      	cbz	r0, 800d85e <_fflush_r+0x1a>
 800d856:	6a03      	ldr	r3, [r0, #32]
 800d858:	b90b      	cbnz	r3, 800d85e <_fflush_r+0x1a>
 800d85a:	f7fe fabf 	bl	800bddc <__sinit>
 800d85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d0f3      	beq.n	800d84e <_fflush_r+0xa>
 800d866:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d868:	07d0      	lsls	r0, r2, #31
 800d86a:	d404      	bmi.n	800d876 <_fflush_r+0x32>
 800d86c:	0599      	lsls	r1, r3, #22
 800d86e:	d402      	bmi.n	800d876 <_fflush_r+0x32>
 800d870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d872:	f7fe fbbc 	bl	800bfee <__retarget_lock_acquire_recursive>
 800d876:	4628      	mov	r0, r5
 800d878:	4621      	mov	r1, r4
 800d87a:	f7ff ff5f 	bl	800d73c <__sflush_r>
 800d87e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d880:	07da      	lsls	r2, r3, #31
 800d882:	4605      	mov	r5, r0
 800d884:	d4e4      	bmi.n	800d850 <_fflush_r+0xc>
 800d886:	89a3      	ldrh	r3, [r4, #12]
 800d888:	059b      	lsls	r3, r3, #22
 800d88a:	d4e1      	bmi.n	800d850 <_fflush_r+0xc>
 800d88c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d88e:	f7fe fbaf 	bl	800bff0 <__retarget_lock_release_recursive>
 800d892:	e7dd      	b.n	800d850 <_fflush_r+0xc>

0800d894 <__swbuf_r>:
 800d894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d896:	460e      	mov	r6, r1
 800d898:	4614      	mov	r4, r2
 800d89a:	4605      	mov	r5, r0
 800d89c:	b118      	cbz	r0, 800d8a6 <__swbuf_r+0x12>
 800d89e:	6a03      	ldr	r3, [r0, #32]
 800d8a0:	b90b      	cbnz	r3, 800d8a6 <__swbuf_r+0x12>
 800d8a2:	f7fe fa9b 	bl	800bddc <__sinit>
 800d8a6:	69a3      	ldr	r3, [r4, #24]
 800d8a8:	60a3      	str	r3, [r4, #8]
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	071a      	lsls	r2, r3, #28
 800d8ae:	d501      	bpl.n	800d8b4 <__swbuf_r+0x20>
 800d8b0:	6923      	ldr	r3, [r4, #16]
 800d8b2:	b943      	cbnz	r3, 800d8c6 <__swbuf_r+0x32>
 800d8b4:	4621      	mov	r1, r4
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	f000 f82a 	bl	800d910 <__swsetup_r>
 800d8bc:	b118      	cbz	r0, 800d8c6 <__swbuf_r+0x32>
 800d8be:	f04f 37ff 	mov.w	r7, #4294967295
 800d8c2:	4638      	mov	r0, r7
 800d8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8c6:	6823      	ldr	r3, [r4, #0]
 800d8c8:	6922      	ldr	r2, [r4, #16]
 800d8ca:	1a98      	subs	r0, r3, r2
 800d8cc:	6963      	ldr	r3, [r4, #20]
 800d8ce:	b2f6      	uxtb	r6, r6
 800d8d0:	4283      	cmp	r3, r0
 800d8d2:	4637      	mov	r7, r6
 800d8d4:	dc05      	bgt.n	800d8e2 <__swbuf_r+0x4e>
 800d8d6:	4621      	mov	r1, r4
 800d8d8:	4628      	mov	r0, r5
 800d8da:	f7ff ffb3 	bl	800d844 <_fflush_r>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d1ed      	bne.n	800d8be <__swbuf_r+0x2a>
 800d8e2:	68a3      	ldr	r3, [r4, #8]
 800d8e4:	3b01      	subs	r3, #1
 800d8e6:	60a3      	str	r3, [r4, #8]
 800d8e8:	6823      	ldr	r3, [r4, #0]
 800d8ea:	1c5a      	adds	r2, r3, #1
 800d8ec:	6022      	str	r2, [r4, #0]
 800d8ee:	701e      	strb	r6, [r3, #0]
 800d8f0:	6962      	ldr	r2, [r4, #20]
 800d8f2:	1c43      	adds	r3, r0, #1
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d004      	beq.n	800d902 <__swbuf_r+0x6e>
 800d8f8:	89a3      	ldrh	r3, [r4, #12]
 800d8fa:	07db      	lsls	r3, r3, #31
 800d8fc:	d5e1      	bpl.n	800d8c2 <__swbuf_r+0x2e>
 800d8fe:	2e0a      	cmp	r6, #10
 800d900:	d1df      	bne.n	800d8c2 <__swbuf_r+0x2e>
 800d902:	4621      	mov	r1, r4
 800d904:	4628      	mov	r0, r5
 800d906:	f7ff ff9d 	bl	800d844 <_fflush_r>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d0d9      	beq.n	800d8c2 <__swbuf_r+0x2e>
 800d90e:	e7d6      	b.n	800d8be <__swbuf_r+0x2a>

0800d910 <__swsetup_r>:
 800d910:	b538      	push	{r3, r4, r5, lr}
 800d912:	4b29      	ldr	r3, [pc, #164]	@ (800d9b8 <__swsetup_r+0xa8>)
 800d914:	4605      	mov	r5, r0
 800d916:	6818      	ldr	r0, [r3, #0]
 800d918:	460c      	mov	r4, r1
 800d91a:	b118      	cbz	r0, 800d924 <__swsetup_r+0x14>
 800d91c:	6a03      	ldr	r3, [r0, #32]
 800d91e:	b90b      	cbnz	r3, 800d924 <__swsetup_r+0x14>
 800d920:	f7fe fa5c 	bl	800bddc <__sinit>
 800d924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d928:	0719      	lsls	r1, r3, #28
 800d92a:	d422      	bmi.n	800d972 <__swsetup_r+0x62>
 800d92c:	06da      	lsls	r2, r3, #27
 800d92e:	d407      	bmi.n	800d940 <__swsetup_r+0x30>
 800d930:	2209      	movs	r2, #9
 800d932:	602a      	str	r2, [r5, #0]
 800d934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d938:	81a3      	strh	r3, [r4, #12]
 800d93a:	f04f 30ff 	mov.w	r0, #4294967295
 800d93e:	e033      	b.n	800d9a8 <__swsetup_r+0x98>
 800d940:	0758      	lsls	r0, r3, #29
 800d942:	d512      	bpl.n	800d96a <__swsetup_r+0x5a>
 800d944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d946:	b141      	cbz	r1, 800d95a <__swsetup_r+0x4a>
 800d948:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d94c:	4299      	cmp	r1, r3
 800d94e:	d002      	beq.n	800d956 <__swsetup_r+0x46>
 800d950:	4628      	mov	r0, r5
 800d952:	f7ff f937 	bl	800cbc4 <_free_r>
 800d956:	2300      	movs	r3, #0
 800d958:	6363      	str	r3, [r4, #52]	@ 0x34
 800d95a:	89a3      	ldrh	r3, [r4, #12]
 800d95c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d960:	81a3      	strh	r3, [r4, #12]
 800d962:	2300      	movs	r3, #0
 800d964:	6063      	str	r3, [r4, #4]
 800d966:	6923      	ldr	r3, [r4, #16]
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	89a3      	ldrh	r3, [r4, #12]
 800d96c:	f043 0308 	orr.w	r3, r3, #8
 800d970:	81a3      	strh	r3, [r4, #12]
 800d972:	6923      	ldr	r3, [r4, #16]
 800d974:	b94b      	cbnz	r3, 800d98a <__swsetup_r+0x7a>
 800d976:	89a3      	ldrh	r3, [r4, #12]
 800d978:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d97c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d980:	d003      	beq.n	800d98a <__swsetup_r+0x7a>
 800d982:	4621      	mov	r1, r4
 800d984:	4628      	mov	r0, r5
 800d986:	f000 f8c1 	bl	800db0c <__smakebuf_r>
 800d98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d98e:	f013 0201 	ands.w	r2, r3, #1
 800d992:	d00a      	beq.n	800d9aa <__swsetup_r+0x9a>
 800d994:	2200      	movs	r2, #0
 800d996:	60a2      	str	r2, [r4, #8]
 800d998:	6962      	ldr	r2, [r4, #20]
 800d99a:	4252      	negs	r2, r2
 800d99c:	61a2      	str	r2, [r4, #24]
 800d99e:	6922      	ldr	r2, [r4, #16]
 800d9a0:	b942      	cbnz	r2, 800d9b4 <__swsetup_r+0xa4>
 800d9a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d9a6:	d1c5      	bne.n	800d934 <__swsetup_r+0x24>
 800d9a8:	bd38      	pop	{r3, r4, r5, pc}
 800d9aa:	0799      	lsls	r1, r3, #30
 800d9ac:	bf58      	it	pl
 800d9ae:	6962      	ldrpl	r2, [r4, #20]
 800d9b0:	60a2      	str	r2, [r4, #8]
 800d9b2:	e7f4      	b.n	800d99e <__swsetup_r+0x8e>
 800d9b4:	2000      	movs	r0, #0
 800d9b6:	e7f7      	b.n	800d9a8 <__swsetup_r+0x98>
 800d9b8:	24000020 	.word	0x24000020

0800d9bc <_sbrk_r>:
 800d9bc:	b538      	push	{r3, r4, r5, lr}
 800d9be:	4d06      	ldr	r5, [pc, #24]	@ (800d9d8 <_sbrk_r+0x1c>)
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	4608      	mov	r0, r1
 800d9c6:	602b      	str	r3, [r5, #0]
 800d9c8:	f7f3 fccc 	bl	8001364 <_sbrk>
 800d9cc:	1c43      	adds	r3, r0, #1
 800d9ce:	d102      	bne.n	800d9d6 <_sbrk_r+0x1a>
 800d9d0:	682b      	ldr	r3, [r5, #0]
 800d9d2:	b103      	cbz	r3, 800d9d6 <_sbrk_r+0x1a>
 800d9d4:	6023      	str	r3, [r4, #0]
 800d9d6:	bd38      	pop	{r3, r4, r5, pc}
 800d9d8:	24000524 	.word	0x24000524

0800d9dc <memcpy>:
 800d9dc:	440a      	add	r2, r1
 800d9de:	4291      	cmp	r1, r2
 800d9e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9e4:	d100      	bne.n	800d9e8 <memcpy+0xc>
 800d9e6:	4770      	bx	lr
 800d9e8:	b510      	push	{r4, lr}
 800d9ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9f2:	4291      	cmp	r1, r2
 800d9f4:	d1f9      	bne.n	800d9ea <memcpy+0xe>
 800d9f6:	bd10      	pop	{r4, pc}

0800d9f8 <__assert_func>:
 800d9f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9fa:	4614      	mov	r4, r2
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	4b09      	ldr	r3, [pc, #36]	@ (800da24 <__assert_func+0x2c>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4605      	mov	r5, r0
 800da04:	68d8      	ldr	r0, [r3, #12]
 800da06:	b14c      	cbz	r4, 800da1c <__assert_func+0x24>
 800da08:	4b07      	ldr	r3, [pc, #28]	@ (800da28 <__assert_func+0x30>)
 800da0a:	9100      	str	r1, [sp, #0]
 800da0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da10:	4906      	ldr	r1, [pc, #24]	@ (800da2c <__assert_func+0x34>)
 800da12:	462b      	mov	r3, r5
 800da14:	f000 f842 	bl	800da9c <fiprintf>
 800da18:	f000 f8d6 	bl	800dbc8 <abort>
 800da1c:	4b04      	ldr	r3, [pc, #16]	@ (800da30 <__assert_func+0x38>)
 800da1e:	461c      	mov	r4, r3
 800da20:	e7f3      	b.n	800da0a <__assert_func+0x12>
 800da22:	bf00      	nop
 800da24:	24000020 	.word	0x24000020
 800da28:	0800de01 	.word	0x0800de01
 800da2c:	0800de0e 	.word	0x0800de0e
 800da30:	0800de3c 	.word	0x0800de3c

0800da34 <_calloc_r>:
 800da34:	b570      	push	{r4, r5, r6, lr}
 800da36:	fba1 5402 	umull	r5, r4, r1, r2
 800da3a:	b934      	cbnz	r4, 800da4a <_calloc_r+0x16>
 800da3c:	4629      	mov	r1, r5
 800da3e:	f7ff f935 	bl	800ccac <_malloc_r>
 800da42:	4606      	mov	r6, r0
 800da44:	b928      	cbnz	r0, 800da52 <_calloc_r+0x1e>
 800da46:	4630      	mov	r0, r6
 800da48:	bd70      	pop	{r4, r5, r6, pc}
 800da4a:	220c      	movs	r2, #12
 800da4c:	6002      	str	r2, [r0, #0]
 800da4e:	2600      	movs	r6, #0
 800da50:	e7f9      	b.n	800da46 <_calloc_r+0x12>
 800da52:	462a      	mov	r2, r5
 800da54:	4621      	mov	r1, r4
 800da56:	f7fe fa4c 	bl	800bef2 <memset>
 800da5a:	e7f4      	b.n	800da46 <_calloc_r+0x12>

0800da5c <__ascii_mbtowc>:
 800da5c:	b082      	sub	sp, #8
 800da5e:	b901      	cbnz	r1, 800da62 <__ascii_mbtowc+0x6>
 800da60:	a901      	add	r1, sp, #4
 800da62:	b142      	cbz	r2, 800da76 <__ascii_mbtowc+0x1a>
 800da64:	b14b      	cbz	r3, 800da7a <__ascii_mbtowc+0x1e>
 800da66:	7813      	ldrb	r3, [r2, #0]
 800da68:	600b      	str	r3, [r1, #0]
 800da6a:	7812      	ldrb	r2, [r2, #0]
 800da6c:	1e10      	subs	r0, r2, #0
 800da6e:	bf18      	it	ne
 800da70:	2001      	movne	r0, #1
 800da72:	b002      	add	sp, #8
 800da74:	4770      	bx	lr
 800da76:	4610      	mov	r0, r2
 800da78:	e7fb      	b.n	800da72 <__ascii_mbtowc+0x16>
 800da7a:	f06f 0001 	mvn.w	r0, #1
 800da7e:	e7f8      	b.n	800da72 <__ascii_mbtowc+0x16>

0800da80 <__ascii_wctomb>:
 800da80:	4603      	mov	r3, r0
 800da82:	4608      	mov	r0, r1
 800da84:	b141      	cbz	r1, 800da98 <__ascii_wctomb+0x18>
 800da86:	2aff      	cmp	r2, #255	@ 0xff
 800da88:	d904      	bls.n	800da94 <__ascii_wctomb+0x14>
 800da8a:	228a      	movs	r2, #138	@ 0x8a
 800da8c:	601a      	str	r2, [r3, #0]
 800da8e:	f04f 30ff 	mov.w	r0, #4294967295
 800da92:	4770      	bx	lr
 800da94:	700a      	strb	r2, [r1, #0]
 800da96:	2001      	movs	r0, #1
 800da98:	4770      	bx	lr
	...

0800da9c <fiprintf>:
 800da9c:	b40e      	push	{r1, r2, r3}
 800da9e:	b503      	push	{r0, r1, lr}
 800daa0:	4601      	mov	r1, r0
 800daa2:	ab03      	add	r3, sp, #12
 800daa4:	4805      	ldr	r0, [pc, #20]	@ (800dabc <fiprintf+0x20>)
 800daa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800daaa:	6800      	ldr	r0, [r0, #0]
 800daac:	9301      	str	r3, [sp, #4]
 800daae:	f7ff fd2d 	bl	800d50c <_vfiprintf_r>
 800dab2:	b002      	add	sp, #8
 800dab4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dab8:	b003      	add	sp, #12
 800daba:	4770      	bx	lr
 800dabc:	24000020 	.word	0x24000020

0800dac0 <__swhatbuf_r>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	460c      	mov	r4, r1
 800dac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dac8:	2900      	cmp	r1, #0
 800daca:	b096      	sub	sp, #88	@ 0x58
 800dacc:	4615      	mov	r5, r2
 800dace:	461e      	mov	r6, r3
 800dad0:	da0d      	bge.n	800daee <__swhatbuf_r+0x2e>
 800dad2:	89a3      	ldrh	r3, [r4, #12]
 800dad4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dad8:	f04f 0100 	mov.w	r1, #0
 800dadc:	bf14      	ite	ne
 800dade:	2340      	movne	r3, #64	@ 0x40
 800dae0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dae4:	2000      	movs	r0, #0
 800dae6:	6031      	str	r1, [r6, #0]
 800dae8:	602b      	str	r3, [r5, #0]
 800daea:	b016      	add	sp, #88	@ 0x58
 800daec:	bd70      	pop	{r4, r5, r6, pc}
 800daee:	466a      	mov	r2, sp
 800daf0:	f000 f848 	bl	800db84 <_fstat_r>
 800daf4:	2800      	cmp	r0, #0
 800daf6:	dbec      	blt.n	800dad2 <__swhatbuf_r+0x12>
 800daf8:	9901      	ldr	r1, [sp, #4]
 800dafa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dafe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db02:	4259      	negs	r1, r3
 800db04:	4159      	adcs	r1, r3
 800db06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db0a:	e7eb      	b.n	800dae4 <__swhatbuf_r+0x24>

0800db0c <__smakebuf_r>:
 800db0c:	898b      	ldrh	r3, [r1, #12]
 800db0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db10:	079d      	lsls	r5, r3, #30
 800db12:	4606      	mov	r6, r0
 800db14:	460c      	mov	r4, r1
 800db16:	d507      	bpl.n	800db28 <__smakebuf_r+0x1c>
 800db18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800db1c:	6023      	str	r3, [r4, #0]
 800db1e:	6123      	str	r3, [r4, #16]
 800db20:	2301      	movs	r3, #1
 800db22:	6163      	str	r3, [r4, #20]
 800db24:	b003      	add	sp, #12
 800db26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db28:	ab01      	add	r3, sp, #4
 800db2a:	466a      	mov	r2, sp
 800db2c:	f7ff ffc8 	bl	800dac0 <__swhatbuf_r>
 800db30:	9f00      	ldr	r7, [sp, #0]
 800db32:	4605      	mov	r5, r0
 800db34:	4639      	mov	r1, r7
 800db36:	4630      	mov	r0, r6
 800db38:	f7ff f8b8 	bl	800ccac <_malloc_r>
 800db3c:	b948      	cbnz	r0, 800db52 <__smakebuf_r+0x46>
 800db3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db42:	059a      	lsls	r2, r3, #22
 800db44:	d4ee      	bmi.n	800db24 <__smakebuf_r+0x18>
 800db46:	f023 0303 	bic.w	r3, r3, #3
 800db4a:	f043 0302 	orr.w	r3, r3, #2
 800db4e:	81a3      	strh	r3, [r4, #12]
 800db50:	e7e2      	b.n	800db18 <__smakebuf_r+0xc>
 800db52:	89a3      	ldrh	r3, [r4, #12]
 800db54:	6020      	str	r0, [r4, #0]
 800db56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db5a:	81a3      	strh	r3, [r4, #12]
 800db5c:	9b01      	ldr	r3, [sp, #4]
 800db5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800db62:	b15b      	cbz	r3, 800db7c <__smakebuf_r+0x70>
 800db64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db68:	4630      	mov	r0, r6
 800db6a:	f000 f81d 	bl	800dba8 <_isatty_r>
 800db6e:	b128      	cbz	r0, 800db7c <__smakebuf_r+0x70>
 800db70:	89a3      	ldrh	r3, [r4, #12]
 800db72:	f023 0303 	bic.w	r3, r3, #3
 800db76:	f043 0301 	orr.w	r3, r3, #1
 800db7a:	81a3      	strh	r3, [r4, #12]
 800db7c:	89a3      	ldrh	r3, [r4, #12]
 800db7e:	431d      	orrs	r5, r3
 800db80:	81a5      	strh	r5, [r4, #12]
 800db82:	e7cf      	b.n	800db24 <__smakebuf_r+0x18>

0800db84 <_fstat_r>:
 800db84:	b538      	push	{r3, r4, r5, lr}
 800db86:	4d07      	ldr	r5, [pc, #28]	@ (800dba4 <_fstat_r+0x20>)
 800db88:	2300      	movs	r3, #0
 800db8a:	4604      	mov	r4, r0
 800db8c:	4608      	mov	r0, r1
 800db8e:	4611      	mov	r1, r2
 800db90:	602b      	str	r3, [r5, #0]
 800db92:	f7f3 fbbf 	bl	8001314 <_fstat>
 800db96:	1c43      	adds	r3, r0, #1
 800db98:	d102      	bne.n	800dba0 <_fstat_r+0x1c>
 800db9a:	682b      	ldr	r3, [r5, #0]
 800db9c:	b103      	cbz	r3, 800dba0 <_fstat_r+0x1c>
 800db9e:	6023      	str	r3, [r4, #0]
 800dba0:	bd38      	pop	{r3, r4, r5, pc}
 800dba2:	bf00      	nop
 800dba4:	24000524 	.word	0x24000524

0800dba8 <_isatty_r>:
 800dba8:	b538      	push	{r3, r4, r5, lr}
 800dbaa:	4d06      	ldr	r5, [pc, #24]	@ (800dbc4 <_isatty_r+0x1c>)
 800dbac:	2300      	movs	r3, #0
 800dbae:	4604      	mov	r4, r0
 800dbb0:	4608      	mov	r0, r1
 800dbb2:	602b      	str	r3, [r5, #0]
 800dbb4:	f7f3 fbbe 	bl	8001334 <_isatty>
 800dbb8:	1c43      	adds	r3, r0, #1
 800dbba:	d102      	bne.n	800dbc2 <_isatty_r+0x1a>
 800dbbc:	682b      	ldr	r3, [r5, #0]
 800dbbe:	b103      	cbz	r3, 800dbc2 <_isatty_r+0x1a>
 800dbc0:	6023      	str	r3, [r4, #0]
 800dbc2:	bd38      	pop	{r3, r4, r5, pc}
 800dbc4:	24000524 	.word	0x24000524

0800dbc8 <abort>:
 800dbc8:	b508      	push	{r3, lr}
 800dbca:	2006      	movs	r0, #6
 800dbcc:	f000 f82c 	bl	800dc28 <raise>
 800dbd0:	2001      	movs	r0, #1
 800dbd2:	f7f3 fb4f 	bl	8001274 <_exit>

0800dbd6 <_raise_r>:
 800dbd6:	291f      	cmp	r1, #31
 800dbd8:	b538      	push	{r3, r4, r5, lr}
 800dbda:	4605      	mov	r5, r0
 800dbdc:	460c      	mov	r4, r1
 800dbde:	d904      	bls.n	800dbea <_raise_r+0x14>
 800dbe0:	2316      	movs	r3, #22
 800dbe2:	6003      	str	r3, [r0, #0]
 800dbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe8:	bd38      	pop	{r3, r4, r5, pc}
 800dbea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dbec:	b112      	cbz	r2, 800dbf4 <_raise_r+0x1e>
 800dbee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbf2:	b94b      	cbnz	r3, 800dc08 <_raise_r+0x32>
 800dbf4:	4628      	mov	r0, r5
 800dbf6:	f000 f831 	bl	800dc5c <_getpid_r>
 800dbfa:	4622      	mov	r2, r4
 800dbfc:	4601      	mov	r1, r0
 800dbfe:	4628      	mov	r0, r5
 800dc00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc04:	f000 b818 	b.w	800dc38 <_kill_r>
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d00a      	beq.n	800dc22 <_raise_r+0x4c>
 800dc0c:	1c59      	adds	r1, r3, #1
 800dc0e:	d103      	bne.n	800dc18 <_raise_r+0x42>
 800dc10:	2316      	movs	r3, #22
 800dc12:	6003      	str	r3, [r0, #0]
 800dc14:	2001      	movs	r0, #1
 800dc16:	e7e7      	b.n	800dbe8 <_raise_r+0x12>
 800dc18:	2100      	movs	r1, #0
 800dc1a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc1e:	4620      	mov	r0, r4
 800dc20:	4798      	blx	r3
 800dc22:	2000      	movs	r0, #0
 800dc24:	e7e0      	b.n	800dbe8 <_raise_r+0x12>
	...

0800dc28 <raise>:
 800dc28:	4b02      	ldr	r3, [pc, #8]	@ (800dc34 <raise+0xc>)
 800dc2a:	4601      	mov	r1, r0
 800dc2c:	6818      	ldr	r0, [r3, #0]
 800dc2e:	f7ff bfd2 	b.w	800dbd6 <_raise_r>
 800dc32:	bf00      	nop
 800dc34:	24000020 	.word	0x24000020

0800dc38 <_kill_r>:
 800dc38:	b538      	push	{r3, r4, r5, lr}
 800dc3a:	4d07      	ldr	r5, [pc, #28]	@ (800dc58 <_kill_r+0x20>)
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	4604      	mov	r4, r0
 800dc40:	4608      	mov	r0, r1
 800dc42:	4611      	mov	r1, r2
 800dc44:	602b      	str	r3, [r5, #0]
 800dc46:	f7f3 fb05 	bl	8001254 <_kill>
 800dc4a:	1c43      	adds	r3, r0, #1
 800dc4c:	d102      	bne.n	800dc54 <_kill_r+0x1c>
 800dc4e:	682b      	ldr	r3, [r5, #0]
 800dc50:	b103      	cbz	r3, 800dc54 <_kill_r+0x1c>
 800dc52:	6023      	str	r3, [r4, #0]
 800dc54:	bd38      	pop	{r3, r4, r5, pc}
 800dc56:	bf00      	nop
 800dc58:	24000524 	.word	0x24000524

0800dc5c <_getpid_r>:
 800dc5c:	f7f3 baf2 	b.w	8001244 <_getpid>

0800dc60 <_init>:
 800dc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc62:	bf00      	nop
 800dc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc66:	bc08      	pop	{r3}
 800dc68:	469e      	mov	lr, r3
 800dc6a:	4770      	bx	lr

0800dc6c <_fini>:
 800dc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc6e:	bf00      	nop
 800dc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc72:	bc08      	pop	{r3}
 800dc74:	469e      	mov	lr, r3
 800dc76:	4770      	bx	lr
