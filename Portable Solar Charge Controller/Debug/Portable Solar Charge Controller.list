
Portable Solar Charge Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de8  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005098  08005098  00006098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080050c0  080050c0  000060c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080050c8  080050c8  000060c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080050cc  080050cc  000060cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  080050d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000114  24000014  080050e4  00007014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000128  080050e4  00007128  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014358  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000265e  00000000  00000000  0001b39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001058  00000000  00000000  0001d9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cb8  00000000  00000000  0001ea50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003133d  00000000  00000000  0001f708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001634b  00000000  00000000  00050a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140a2b  00000000  00000000  00066d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a77bb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004470  00000000  00000000  001a7800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000085  00000000  00000000  001abc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000014 	.word	0x24000014
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08005080 	.word	0x08005080

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000018 	.word	0x24000018
 80002ec:	08005080 	.word	0x08005080

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <SystemClock_Config>:
 *      Author: adeel.akhtar
 */

#include "Clock_Config.h"
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b09c      	sub	sp, #112	@ 0x70
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000626:	224c      	movs	r2, #76	@ 0x4c
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fcfc 	bl	8005028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2220      	movs	r2, #32
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 fcf6 	bl	8005028 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800063c:	4b2f      	ldr	r3, [pc, #188]	@ (80006fc <SystemClock_Config+0xe0>)
 800063e:	f04f 32ff 	mov.w	r2, #4294967295
 8000642:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000646:	2004      	movs	r0, #4
 8000648:	f001 f80c 	bl	8001664 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	4b2b      	ldr	r3, [pc, #172]	@ (8000700 <SystemClock_Config+0xe4>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a2a      	ldr	r2, [pc, #168]	@ (8000700 <SystemClock_Config+0xe4>)
 8000656:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <SystemClock_Config+0xe4>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000668:	bf00      	nop
 800066a:	4b25      	ldr	r3, [pc, #148]	@ (8000700 <SystemClock_Config+0xe4>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000676:	d1f8      	bne.n	800066a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800067c:	2301      	movs	r3, #1
 800067e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000680:	2340      	movs	r3, #64	@ 0x40
 8000682:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000690:	2309      	movs	r3, #9
 8000692:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006a0:	230c      	movs	r3, #12
 80006a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 f831 	bl	8001718 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006bc:	f000 f9d2 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	233f      	movs	r3, #63	@ 0x3f
 80006c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2303      	movs	r3, #3
 80006c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2101      	movs	r1, #1
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fc49 	bl	8001f7c <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80006f0:	f000 f9b8 	bl	8000a64 <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3770      	adds	r7, #112	@ 0x70
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	58024400 	.word	0x58024400
 8000700:	58024800 	.word	0x58024800

08000704 <MX_GPIO_Init>:




void MX_GPIO_Init(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_GPIO_Init+0x50>)
 800070c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000710:	4a10      	ldr	r2, [pc, #64]	@ (8000754 <MX_GPIO_Init+0x50>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_GPIO_Init+0x50>)
 800071c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000720:	f003 0304 	and.w	r3, r3, #4
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <MX_GPIO_Init+0x50>)
 800072a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800072e:	4a09      	ldr	r2, [pc, #36]	@ (8000754 <MX_GPIO_Init+0x50>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000734:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_GPIO_Init+0x50>)
 800073a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800073e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	58024400 	.word	0x58024400

08000758 <set_duty_cycle>:
 *  Created on: Mar 27, 2025
 *      Author: adeel.akhtar
 */
#include <Pwm_Operations.h>
int dutycycle=0;
void set_duty_cycle(int duty_percent){
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	dutycycle=(duty_percent/100.0)*3590;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	ee07 3a90 	vmov	s15, r3
 8000766:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800076a:	ed9f 5b15 	vldr	d5, [pc, #84]	@ 80007c0 <set_duty_cycle+0x68>
 800076e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000772:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 80007c8 <set_duty_cycle+0x70>
 8000776:	ee27 7b06 	vmul.f64	d7, d7, d6
 800077a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800077e:	ee17 2a90 	vmov	r2, s15
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <set_duty_cycle+0x78>)
 8000784:	601a      	str	r2, [r3, #0]

	if (dutycycle < min_ticks)
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <set_duty_cycle+0x78>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da02      	bge.n	8000794 <set_duty_cycle+0x3c>
		{
	        dutycycle = min_ticks;
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <set_duty_cycle+0x78>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
	    }

	if (dutycycle > max_ticks)
 8000794:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <set_duty_cycle+0x78>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f5b3 6f4a 	cmp.w	r3, #3232	@ 0xca0
 800079c:	db03      	blt.n	80007a6 <set_duty_cycle+0x4e>
		{
	        dutycycle = max_ticks;
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <set_duty_cycle+0x78>)
 80007a0:	f640 429f 	movw	r2, #3231	@ 0xc9f
 80007a4:	601a      	str	r2, [r3, #0]
	    }


	TIM1->CCR1 = dutycycle;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <set_duty_cycle+0x78>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <set_duty_cycle+0x7c>)
 80007ac:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	f3af 8000 	nop.w
 80007c0:	00000000 	.word	0x00000000
 80007c4:	40590000 	.word	0x40590000
 80007c8:	00000000 	.word	0x00000000
 80007cc:	40ac0c00 	.word	0x40ac0c00
 80007d0:	24000030 	.word	0x24000030
 80007d4:	40010000 	.word	0x40010000

080007d8 <decrement_duty_cycle>:

void decrement_duty_cycle(){
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

    dutycycle -= IDD_ticks;
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <decrement_duty_cycle+0x60>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	ee07 3a90 	vmov	s15, r3
 80007e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80007e8:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8000830 <decrement_duty_cycle+0x58>
 80007ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80007f0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007f4:	ee17 2a90 	vmov	r2, s15
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <decrement_duty_cycle+0x60>)
 80007fa:	601a      	str	r2, [r3, #0]
    if (dutycycle < min_ticks)
 80007fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <decrement_duty_cycle+0x60>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	da02      	bge.n	800080a <decrement_duty_cycle+0x32>
    {
        dutycycle = min_ticks;
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <decrement_duty_cycle+0x60>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
    }

    if (dutycycle > max_ticks)
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <decrement_duty_cycle+0x60>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f5b3 6f4a 	cmp.w	r3, #3232	@ 0xca0
 8000812:	db03      	blt.n	800081c <decrement_duty_cycle+0x44>
    {
        dutycycle = max_ticks;
 8000814:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <decrement_duty_cycle+0x60>)
 8000816:	f640 429f 	movw	r2, #3231	@ 0xc9f
 800081a:	601a      	str	r2, [r3, #0]
    }

    TIM1->CCR1=dutycycle;
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <decrement_duty_cycle+0x60>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <decrement_duty_cycle+0x64>)
 8000822:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	cccccccd 	.word	0xcccccccd
 8000834:	401ccccc 	.word	0x401ccccc
 8000838:	24000030 	.word	0x24000030
 800083c:	40010000 	.word	0x40010000

08000840 <MX_TIM1_Init>:
#include "Timer.h"

TIM_HandleTypeDef htim1;

 void MX_TIM1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b09c      	sub	sp, #112	@ 0x70
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000860:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
 8000870:	615a      	str	r2, [r3, #20]
 8000872:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2234      	movs	r2, #52	@ 0x34
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f004 fbd4 	bl	8005028 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000880:	4b47      	ldr	r3, [pc, #284]	@ (80009a0 <MX_TIM1_Init+0x160>)
 8000882:	4a48      	ldr	r2, [pc, #288]	@ (80009a4 <MX_TIM1_Init+0x164>)
 8000884:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000886:	4b46      	ldr	r3, [pc, #280]	@ (80009a0 <MX_TIM1_Init+0x160>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b44      	ldr	r3, [pc, #272]	@ (80009a0 <MX_TIM1_Init+0x160>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3590;
 8000892:	4b43      	ldr	r3, [pc, #268]	@ (80009a0 <MX_TIM1_Init+0x160>)
 8000894:	f640 6206 	movw	r2, #3590	@ 0xe06
 8000898:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089a:	4b41      	ldr	r3, [pc, #260]	@ (80009a0 <MX_TIM1_Init+0x160>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008a0:	4b3f      	ldr	r3, [pc, #252]	@ (80009a0 <MX_TIM1_Init+0x160>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a6:	4b3e      	ldr	r3, [pc, #248]	@ (80009a0 <MX_TIM1_Init+0x160>)
 80008a8:	2280      	movs	r2, #128	@ 0x80
 80008aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ac:	483c      	ldr	r0, [pc, #240]	@ (80009a0 <MX_TIM1_Init+0x160>)
 80008ae:	f002 f9af 	bl	8002c10 <HAL_TIM_Base_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008b8:	f000 f8d4 	bl	8000a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008c6:	4619      	mov	r1, r3
 80008c8:	4835      	ldr	r0, [pc, #212]	@ (80009a0 <MX_TIM1_Init+0x160>)
 80008ca:	f002 fc7b 	bl	80031c4 <HAL_TIM_ConfigClockSource>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008d4:	f000 f8c6 	bl	8000a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008d8:	4831      	ldr	r0, [pc, #196]	@ (80009a0 <MX_TIM1_Init+0x160>)
 80008da:	f002 f9f0 	bl	8002cbe <HAL_TIM_PWM_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008e4:	f000 f8be 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008f8:	4619      	mov	r1, r3
 80008fa:	4829      	ldr	r0, [pc, #164]	@ (80009a0 <MX_TIM1_Init+0x160>)
 80008fc:	f003 f994 	bl	8003c28 <HAL_TIMEx_MasterConfigSynchronization>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000906:	f000 f8ad 	bl	8000a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090a:	2360      	movs	r3, #96	@ 0x60
 800090c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000912:	2300      	movs	r3, #0
 8000914:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000916:	2300      	movs	r3, #0
 8000918:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000926:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800092a:	2200      	movs	r2, #0
 800092c:	4619      	mov	r1, r3
 800092e:	481c      	ldr	r0, [pc, #112]	@ (80009a0 <MX_TIM1_Init+0x160>)
 8000930:	f002 fb34 	bl	8002f9c <HAL_TIM_PWM_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800093a:	f000 f893 	bl	8000a64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000952:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000956:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000960:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4619      	mov	r1, r3
 8000972:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <MX_TIM1_Init+0x160>)
 8000974:	f003 f9e6 	bl	8003d44 <HAL_TIMEx_ConfigBreakDeadTime>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800097e:	f000 f871 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000982:	4807      	ldr	r0, [pc, #28]	@ (80009a0 <MX_TIM1_Init+0x160>)
 8000984:	f000 f8b2 	bl	8000aec <HAL_TIM_MspPostInit>
  TIM1->CCR1 = 0;
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_TIM1_Init+0x164>)
 800098a:	2200      	movs	r2, #0
 800098c:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800098e:	2100      	movs	r1, #0
 8000990:	4803      	ldr	r0, [pc, #12]	@ (80009a0 <MX_TIM1_Init+0x160>)
 8000992:	f002 f9f5 	bl	8002d80 <HAL_TIM_PWM_Start>
}
 8000996:	bf00      	nop
 8000998:	3770      	adds	r7, #112	@ 0x70
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	24000034 	.word	0x24000034
 80009a4:	40010000 	.word	0x40010000

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009ac:	f000 f82e 	bl	8000a0c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f000 fa96 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f7ff fe32 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f7ff fea4 	bl	8000704 <MX_GPIO_Init>
  MX_TIM1_Init();
 80009bc:	f7ff ff40 	bl	8000840 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80009c0:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <main+0x60>)
 80009c2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c6:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <main+0x60>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <main+0x60>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <main+0x60>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <main+0x60>)
 80009dc:	2200      	movs	r2, #0
 80009de:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80009e0:	4909      	ldr	r1, [pc, #36]	@ (8000a08 <main+0x60>)
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f9c2 	bl	8000d6c <BSP_COM_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <main+0x4a>
  {
    Error_Handler();
 80009ee:	f000 f839 	bl	8000a64 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  set_duty_cycle(100);
 80009f2:	2064      	movs	r0, #100	@ 0x64
 80009f4:	f7ff feb0 	bl	8000758 <set_duty_cycle>
  while (1)
  {
	 decrement_duty_cycle();
 80009f8:	f7ff feee 	bl	80007d8 <decrement_duty_cycle>
	 HAL_Delay(10);
 80009fc:	200a      	movs	r0, #10
 80009fe:	f000 fb01 	bl	8001004 <HAL_Delay>
	 decrement_duty_cycle();
 8000a02:	bf00      	nop
 8000a04:	e7f8      	b.n	80009f8 <main+0x50>
 8000a06:	bf00      	nop
 8000a08:	24000080 	.word	0x24000080

08000a0c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a12:	463b      	mov	r3, r7
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a1e:	f000 fbf9 	bl	8001214 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a22:	2301      	movs	r3, #1
 8000a24:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a2e:	231f      	movs	r3, #31
 8000a30:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a32:	2387      	movs	r3, #135	@ 0x87
 8000a34:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a42:	2301      	movs	r3, #1
 8000a44:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a4e:	463b      	mov	r3, r7
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 fc17 	bl	8001284 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a56:	2004      	movs	r0, #4
 8000a58:	f000 fbf4 	bl	8001244 <HAL_MPU_Enable>

}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <HAL_MspInit+0x30>)
 8000a7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a80:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x30>)
 8000a82:	f043 0302 	orr.w	r3, r3, #2
 8000a86:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_MspInit+0x30>)
 8000a8c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	58024400 	.word	0x58024400

08000aa8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10e      	bne.n	8000ad8 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <HAL_TIM_Base_MspInit+0x40>)
 8000abc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ac0:	4a09      	ldr	r2, [pc, #36]	@ (8000ae8 <HAL_TIM_Base_MspInit+0x40>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000aca:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <HAL_TIM_Base_MspInit+0x40>)
 8000acc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	40010000 	.word	0x40010000
 8000ae8:	58024400 	.word	0x58024400

08000aec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a13      	ldr	r2, [pc, #76]	@ (8000b58 <HAL_TIM_MspPostInit+0x6c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d11f      	bne.n	8000b4e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <HAL_TIM_MspPostInit+0x70>)
 8000b10:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b14:	4a11      	ldr	r2, [pc, #68]	@ (8000b5c <HAL_TIM_MspPostInit+0x70>)
 8000b16:	f043 0310 	orr.w	r3, r3, #16
 8000b1a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <HAL_TIM_MspPostInit+0x70>)
 8000b20:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b24:	f003 0310 	and.w	r3, r3, #16
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <HAL_TIM_MspPostInit+0x74>)
 8000b4a:	f000 fbdb 	bl	8001304 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40010000 	.word	0x40010000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58021000 	.word	0x58021000

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <NMI_Handler+0x4>

08000b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bba:	f000 fa03 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc4 <SystemInit+0x100>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bce:	4a3d      	ldr	r2, [pc, #244]	@ (8000cc4 <SystemInit+0x100>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc8 <SystemInit+0x104>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 030f 	and.w	r3, r3, #15
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d807      	bhi.n	8000bf4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000be4:	4b38      	ldr	r3, [pc, #224]	@ (8000cc8 <SystemInit+0x104>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f023 030f 	bic.w	r3, r3, #15
 8000bec:	4a36      	ldr	r2, [pc, #216]	@ (8000cc8 <SystemInit+0x104>)
 8000bee:	f043 0303 	orr.w	r3, r3, #3
 8000bf2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bf4:	4b35      	ldr	r3, [pc, #212]	@ (8000ccc <SystemInit+0x108>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a34      	ldr	r2, [pc, #208]	@ (8000ccc <SystemInit+0x108>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c00:	4b32      	ldr	r3, [pc, #200]	@ (8000ccc <SystemInit+0x108>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c06:	4b31      	ldr	r3, [pc, #196]	@ (8000ccc <SystemInit+0x108>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4930      	ldr	r1, [pc, #192]	@ (8000ccc <SystemInit+0x108>)
 8000c0c:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <SystemInit+0x10c>)
 8000c0e:	4013      	ands	r3, r2
 8000c10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c12:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc8 <SystemInit+0x104>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 030c 	and.w	r3, r3, #12
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d007      	beq.n	8000c2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc8 <SystemInit+0x104>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f023 030f 	bic.w	r3, r3, #15
 8000c26:	4a28      	ldr	r2, [pc, #160]	@ (8000cc8 <SystemInit+0x104>)
 8000c28:	f043 0303 	orr.w	r3, r3, #3
 8000c2c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000c2e:	4b27      	ldr	r3, [pc, #156]	@ (8000ccc <SystemInit+0x108>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000c34:	4b25      	ldr	r3, [pc, #148]	@ (8000ccc <SystemInit+0x108>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000c3a:	4b24      	ldr	r3, [pc, #144]	@ (8000ccc <SystemInit+0x108>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c40:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <SystemInit+0x108>)
 8000c42:	4a24      	ldr	r2, [pc, #144]	@ (8000cd4 <SystemInit+0x110>)
 8000c44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c46:	4b21      	ldr	r3, [pc, #132]	@ (8000ccc <SystemInit+0x108>)
 8000c48:	4a23      	ldr	r2, [pc, #140]	@ (8000cd8 <SystemInit+0x114>)
 8000c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <SystemInit+0x108>)
 8000c4e:	4a23      	ldr	r2, [pc, #140]	@ (8000cdc <SystemInit+0x118>)
 8000c50:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <SystemInit+0x108>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <SystemInit+0x108>)
 8000c5a:	4a20      	ldr	r2, [pc, #128]	@ (8000cdc <SystemInit+0x118>)
 8000c5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <SystemInit+0x108>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c64:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <SystemInit+0x108>)
 8000c66:	4a1d      	ldr	r2, [pc, #116]	@ (8000cdc <SystemInit+0x118>)
 8000c68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <SystemInit+0x108>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c70:	4b16      	ldr	r3, [pc, #88]	@ (8000ccc <SystemInit+0x108>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a15      	ldr	r2, [pc, #84]	@ (8000ccc <SystemInit+0x108>)
 8000c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <SystemInit+0x108>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c82:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <SystemInit+0x108>)
 8000c84:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000c88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d113      	bne.n	8000cb8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <SystemInit+0x108>)
 8000c92:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000c96:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <SystemInit+0x108>)
 8000c98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c9c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <SystemInit+0x11c>)
 8000ca2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ca6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <SystemInit+0x108>)
 8000caa:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000cae:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <SystemInit+0x108>)
 8000cb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cb4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00
 8000cc8:	52002000 	.word	0x52002000
 8000ccc:	58024400 	.word	0x58024400
 8000cd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cd4:	02020200 	.word	0x02020200
 8000cd8:	01ff0000 	.word	0x01ff0000
 8000cdc:	01010280 	.word	0x01010280
 8000ce0:	52004000 	.word	0x52004000

08000ce4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <ExitRun0Mode+0x2c>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	4a08      	ldr	r2, [pc, #32]	@ (8000d10 <ExitRun0Mode+0x2c>)
 8000cee:	f023 0302 	bic.w	r3, r3, #2
 8000cf2:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000cf4:	bf00      	nop
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <ExitRun0Mode+0x2c>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f9      	beq.n	8000cf6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	58024800 	.word	0x58024800

08000d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d14:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000d50 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000d18:	f7ff ffe4 	bl	8000ce4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d1c:	f7ff ff52 	bl	8000bc4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d20:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d22:	490d      	ldr	r1, [pc, #52]	@ (8000d58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d24:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d38:	4c0a      	ldr	r4, [pc, #40]	@ (8000d64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d46:	f004 f977 	bl	8005038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fe2d 	bl	80009a8 <main>
  bx  lr
 8000d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d50:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000d54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d58:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000d5c:	080050d0 	.word	0x080050d0
  ldr r2, =_sbss
 8000d60:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000d64:	24000128 	.word	0x24000128

08000d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC_IRQHandler>
	...

08000d6c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d82:	f06f 0301 	mvn.w	r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	e018      	b.n	8000dbc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2294      	movs	r2, #148	@ 0x94
 8000d8e:	fb02 f303 	mul.w	r3, r2, r3
 8000d92:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc8 <BSP_COM_Init+0x5c>)
 8000d94:	4413      	add	r3, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f84a 	bl	8000e30 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2294      	movs	r2, #148	@ 0x94
 8000da0:	fb02 f303 	mul.w	r3, r2, r3
 8000da4:	4a08      	ldr	r2, [pc, #32]	@ (8000dc8 <BSP_COM_Init+0x5c>)
 8000da6:	4413      	add	r3, r2
 8000da8:	6839      	ldr	r1, [r7, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f80e 	bl	8000dcc <MX_USART3_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000db6:	f06f 0303 	mvn.w	r3, #3
 8000dba:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	24000090 	.word	0x24000090

08000dcc <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <MX_USART3_Init+0x60>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	220c      	movs	r2, #12
 8000dea:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	895b      	ldrh	r3, [r3, #10]
 8000df0:	461a      	mov	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	891b      	ldrh	r3, [r3, #8]
 8000e02:	461a      	mov	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	899b      	ldrh	r3, [r3, #12]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e18:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f003 f81e 	bl	8003e5c <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	24000008 	.word	0x24000008

08000e30 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e3e:	4a26      	ldr	r2, [pc, #152]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e40:	f043 0308 	orr.w	r3, r3, #8
 8000e44:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e48:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000e56:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e76:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e7a:	4a17      	ldr	r2, [pc, #92]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e80:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000e84:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <COM1_MspInit+0xa8>)
 8000e86:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8000e92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e96:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	480b      	ldr	r0, [pc, #44]	@ (8000edc <COM1_MspInit+0xac>)
 8000eb0:	f000 fa28 	bl	8001304 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000eb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4804      	ldr	r0, [pc, #16]	@ (8000edc <COM1_MspInit+0xac>)
 8000eca:	f000 fa1b 	bl	8001304 <HAL_GPIO_Init>
}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	@ 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58020c00 	.word	0x58020c00

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f000 f962 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000eec:	f001 f9fc 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <HAL_Init+0x68>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	f003 030f 	and.w	r3, r3, #15
 8000efc:	4913      	ldr	r1, [pc, #76]	@ (8000f4c <HAL_Init+0x6c>)
 8000efe:	5ccb      	ldrb	r3, [r1, r3]
 8000f00:	f003 031f 	and.w	r3, r3, #31
 8000f04:	fa22 f303 	lsr.w	r3, r2, r3
 8000f08:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <HAL_Init+0x68>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	4a0e      	ldr	r2, [pc, #56]	@ (8000f4c <HAL_Init+0x6c>)
 8000f14:	5cd3      	ldrb	r3, [r2, r3]
 8000f16:	f003 031f 	and.w	r3, r3, #31
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f20:	4a0b      	ldr	r2, [pc, #44]	@ (8000f50 <HAL_Init+0x70>)
 8000f22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f24:	4a0b      	ldr	r2, [pc, #44]	@ (8000f54 <HAL_Init+0x74>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f814 	bl	8000f58 <HAL_InitTick>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e002      	b.n	8000f40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3a:	f7ff fd9b 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	08005098 	.word	0x08005098
 8000f50:	24000004 	.word	0x24000004
 8000f54:	24000000 	.word	0x24000000

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <HAL_InitTick+0x60>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e021      	b.n	8000fb0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <HAL_InitTick+0x64>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_InitTick+0x60>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f939 	bl	80011fa <HAL_SYSTICK_Config>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00e      	b.n	8000fb0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d80a      	bhi.n	8000fae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f000 f911 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4a06      	ldr	r2, [pc, #24]	@ (8000fc0 <HAL_InitTick+0x68>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	24000010 	.word	0x24000010
 8000fbc:	24000000 	.word	0x24000000
 8000fc0:	2400000c 	.word	0x2400000c

08000fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_IncTick+0x20>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <HAL_IncTick+0x24>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <HAL_IncTick+0x24>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	24000010 	.word	0x24000010
 8000fe8:	24000124 	.word	0x24000124

08000fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	@ (8001000 <HAL_GetTick+0x14>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	24000124 	.word	0x24000124

08001004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff ffee 	bl	8000fec <HAL_GetTick>
 8001010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800101c:	d005      	beq.n	800102a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <HAL_Delay+0x44>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102a:	bf00      	nop
 800102c:	f7ff ffde 	bl	8000fec <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	429a      	cmp	r2, r3
 800103a:	d8f7      	bhi.n	800102c <HAL_Delay+0x28>
  {
  }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	24000010 	.word	0x24000010

0800104c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <__NVIC_SetPriorityGrouping+0x40>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	4313      	orrs	r3, r2
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	@ (800108c <__NVIC_SetPriorityGrouping+0x40>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00
 8001090:	05fa0000 	.word	0x05fa0000

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	@ (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	@ (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	@ 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	@ 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff8e 	bl	80010b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff47 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff5e 	bl	8001094 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff90 	bl	8001104 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5f 	bl	80010b0 <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffb2 	bl	800116c <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001218:	f3bf 8f5f 	dmb	sy
}
 800121c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800121e:	4b07      	ldr	r3, [pc, #28]	@ (800123c <HAL_MPU_Disable+0x28>)
 8001220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001222:	4a06      	ldr	r2, [pc, #24]	@ (800123c <HAL_MPU_Disable+0x28>)
 8001224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001228:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800122a:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <HAL_MPU_Disable+0x2c>)
 800122c:	2200      	movs	r2, #0
 800122e:	605a      	str	r2, [r3, #4]
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	e000ed90 	.word	0xe000ed90

08001244 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800124c:	4a0b      	ldr	r2, [pc, #44]	@ (800127c <HAL_MPU_Enable+0x38>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_MPU_Enable+0x3c>)
 8001258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125a:	4a09      	ldr	r2, [pc, #36]	@ (8001280 <HAL_MPU_Enable+0x3c>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001260:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001262:	f3bf 8f4f 	dsb	sy
}
 8001266:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001268:	f3bf 8f6f 	isb	sy
}
 800126c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed90 	.word	0xe000ed90
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	785a      	ldrb	r2, [r3, #1]
 8001290:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <HAL_MPU_ConfigRegion+0x7c>)
 8001292:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <HAL_MPU_ConfigRegion+0x7c>)
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	4a19      	ldr	r2, [pc, #100]	@ (8001300 <HAL_MPU_ConfigRegion+0x7c>)
 800129a:	f023 0301 	bic.w	r3, r3, #1
 800129e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80012a0:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <HAL_MPU_ConfigRegion+0x7c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7b1b      	ldrb	r3, [r3, #12]
 80012ac:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7adb      	ldrb	r3, [r3, #11]
 80012b2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7a9b      	ldrb	r3, [r3, #10]
 80012ba:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7b5b      	ldrb	r3, [r3, #13]
 80012c2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7b9b      	ldrb	r3, [r3, #14]
 80012ca:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	7bdb      	ldrb	r3, [r3, #15]
 80012d2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7a5b      	ldrb	r3, [r3, #9]
 80012da:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7a1b      	ldrb	r3, [r3, #8]
 80012e2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012e4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	7812      	ldrb	r2, [r2, #0]
 80012ea:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012ec:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012ee:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012f0:	6113      	str	r3, [r2, #16]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed90 	.word	0xe000ed90

08001304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	@ 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001312:	4b89      	ldr	r3, [pc, #548]	@ (8001538 <HAL_GPIO_Init+0x234>)
 8001314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001316:	e194      	b.n	8001642 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2101      	movs	r1, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8186 	beq.w	800163c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b01      	cmp	r3, #1
 800133a:	d005      	beq.n	8001348 <HAL_GPIO_Init+0x44>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d130      	bne.n	80013aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800137e:	2201      	movs	r2, #1
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	f003 0201 	and.w	r2, r3, #1
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d017      	beq.n	80013e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d123      	bne.n	800143a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	220f      	movs	r2, #15
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	691a      	ldr	r2, [r3, #16]
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	69b9      	ldr	r1, [r7, #24]
 8001436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0203 	and.w	r2, r3, #3
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 80e0 	beq.w	800163c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147c:	4b2f      	ldr	r3, [pc, #188]	@ (800153c <HAL_GPIO_Init+0x238>)
 800147e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001482:	4a2e      	ldr	r2, [pc, #184]	@ (800153c <HAL_GPIO_Init+0x238>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800148c:	4b2b      	ldr	r3, [pc, #172]	@ (800153c <HAL_GPIO_Init+0x238>)
 800148e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800149a:	4a29      	ldr	r2, [pc, #164]	@ (8001540 <HAL_GPIO_Init+0x23c>)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a20      	ldr	r2, [pc, #128]	@ (8001544 <HAL_GPIO_Init+0x240>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d052      	beq.n	800156c <HAL_GPIO_Init+0x268>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001548 <HAL_GPIO_Init+0x244>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d031      	beq.n	8001532 <HAL_GPIO_Init+0x22e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a1e      	ldr	r2, [pc, #120]	@ (800154c <HAL_GPIO_Init+0x248>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d02b      	beq.n	800152e <HAL_GPIO_Init+0x22a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001550 <HAL_GPIO_Init+0x24c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d025      	beq.n	800152a <HAL_GPIO_Init+0x226>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001554 <HAL_GPIO_Init+0x250>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01f      	beq.n	8001526 <HAL_GPIO_Init+0x222>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001558 <HAL_GPIO_Init+0x254>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d019      	beq.n	8001522 <HAL_GPIO_Init+0x21e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a1a      	ldr	r2, [pc, #104]	@ (800155c <HAL_GPIO_Init+0x258>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x21a>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a19      	ldr	r2, [pc, #100]	@ (8001560 <HAL_GPIO_Init+0x25c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x216>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a18      	ldr	r2, [pc, #96]	@ (8001564 <HAL_GPIO_Init+0x260>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x212>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a17      	ldr	r2, [pc, #92]	@ (8001568 <HAL_GPIO_Init+0x264>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x20e>
 800150e:	2309      	movs	r3, #9
 8001510:	e02d      	b.n	800156e <HAL_GPIO_Init+0x26a>
 8001512:	230a      	movs	r3, #10
 8001514:	e02b      	b.n	800156e <HAL_GPIO_Init+0x26a>
 8001516:	2308      	movs	r3, #8
 8001518:	e029      	b.n	800156e <HAL_GPIO_Init+0x26a>
 800151a:	2307      	movs	r3, #7
 800151c:	e027      	b.n	800156e <HAL_GPIO_Init+0x26a>
 800151e:	2306      	movs	r3, #6
 8001520:	e025      	b.n	800156e <HAL_GPIO_Init+0x26a>
 8001522:	2305      	movs	r3, #5
 8001524:	e023      	b.n	800156e <HAL_GPIO_Init+0x26a>
 8001526:	2304      	movs	r3, #4
 8001528:	e021      	b.n	800156e <HAL_GPIO_Init+0x26a>
 800152a:	2303      	movs	r3, #3
 800152c:	e01f      	b.n	800156e <HAL_GPIO_Init+0x26a>
 800152e:	2302      	movs	r3, #2
 8001530:	e01d      	b.n	800156e <HAL_GPIO_Init+0x26a>
 8001532:	2301      	movs	r3, #1
 8001534:	e01b      	b.n	800156e <HAL_GPIO_Init+0x26a>
 8001536:	bf00      	nop
 8001538:	58000080 	.word	0x58000080
 800153c:	58024400 	.word	0x58024400
 8001540:	58000400 	.word	0x58000400
 8001544:	58020000 	.word	0x58020000
 8001548:	58020400 	.word	0x58020400
 800154c:	58020800 	.word	0x58020800
 8001550:	58020c00 	.word	0x58020c00
 8001554:	58021000 	.word	0x58021000
 8001558:	58021400 	.word	0x58021400
 800155c:	58021800 	.word	0x58021800
 8001560:	58021c00 	.word	0x58021c00
 8001564:	58022000 	.word	0x58022000
 8001568:	58022400 	.word	0x58022400
 800156c:	2300      	movs	r3, #0
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	f002 0203 	and.w	r2, r2, #3
 8001574:	0092      	lsls	r2, r2, #2
 8001576:	4093      	lsls	r3, r2
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800157e:	4938      	ldr	r1, [pc, #224]	@ (8001660 <HAL_GPIO_Init+0x35c>)
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	3301      	adds	r3, #1
 8001640:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	f47f ae63 	bne.w	8001318 <HAL_GPIO_Init+0x14>
  }
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	3724      	adds	r7, #36	@ 0x24
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	58000400 	.word	0x58000400

08001664 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800166c:	4b29      	ldr	r3, [pc, #164]	@ (8001714 <HAL_PWREx_ConfigSupply+0xb0>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	2b06      	cmp	r3, #6
 8001676:	d00a      	beq.n	800168e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001678:	4b26      	ldr	r3, [pc, #152]	@ (8001714 <HAL_PWREx_ConfigSupply+0xb0>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	429a      	cmp	r2, r3
 8001684:	d001      	beq.n	800168a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e040      	b.n	800170c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e03e      	b.n	800170c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800168e:	4b21      	ldr	r3, [pc, #132]	@ (8001714 <HAL_PWREx_ConfigSupply+0xb0>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001696:	491f      	ldr	r1, [pc, #124]	@ (8001714 <HAL_PWREx_ConfigSupply+0xb0>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4313      	orrs	r3, r2
 800169c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800169e:	f7ff fca5 	bl	8000fec <HAL_GetTick>
 80016a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016a4:	e009      	b.n	80016ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016a6:	f7ff fca1 	bl	8000fec <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016b4:	d901      	bls.n	80016ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e028      	b.n	800170c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016ba:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <HAL_PWREx_ConfigSupply+0xb0>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016c6:	d1ee      	bne.n	80016a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b1e      	cmp	r3, #30
 80016cc:	d008      	beq.n	80016e0 <HAL_PWREx_ConfigSupply+0x7c>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80016d2:	d005      	beq.n	80016e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b1d      	cmp	r3, #29
 80016d8:	d002      	beq.n	80016e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b2d      	cmp	r3, #45	@ 0x2d
 80016de:	d114      	bne.n	800170a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80016e0:	f7ff fc84 	bl	8000fec <HAL_GetTick>
 80016e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016e6:	e009      	b.n	80016fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016e8:	f7ff fc80 	bl	8000fec <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016f6:	d901      	bls.n	80016fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e007      	b.n	800170c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016fc:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <HAL_PWREx_ConfigSupply+0xb0>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001708:	d1ee      	bne.n	80016e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	58024800 	.word	0x58024800

08001718 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	@ 0x30
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	f000 bc1f 	b.w	8001f6a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80b3 	beq.w	80018a0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800173a:	4b95      	ldr	r3, [pc, #596]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001744:	4b92      	ldr	r3, [pc, #584]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800174a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800174c:	2b10      	cmp	r3, #16
 800174e:	d007      	beq.n	8001760 <HAL_RCC_OscConfig+0x48>
 8001750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001752:	2b18      	cmp	r3, #24
 8001754:	d112      	bne.n	800177c <HAL_RCC_OscConfig+0x64>
 8001756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d10d      	bne.n	800177c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	4b8b      	ldr	r3, [pc, #556]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8098 	beq.w	800189e <HAL_RCC_OscConfig+0x186>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 8093 	bne.w	800189e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e3f6      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001784:	d106      	bne.n	8001794 <HAL_RCC_OscConfig+0x7c>
 8001786:	4b82      	ldr	r3, [pc, #520]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a81      	ldr	r2, [pc, #516]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e058      	b.n	8001846 <HAL_RCC_OscConfig+0x12e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d112      	bne.n	80017c2 <HAL_RCC_OscConfig+0xaa>
 800179c:	4b7c      	ldr	r3, [pc, #496]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a7b      	ldr	r2, [pc, #492]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b79      	ldr	r3, [pc, #484]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a78      	ldr	r2, [pc, #480]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80017ae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b76      	ldr	r3, [pc, #472]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a75      	ldr	r2, [pc, #468]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e041      	b.n	8001846 <HAL_RCC_OscConfig+0x12e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017ca:	d112      	bne.n	80017f2 <HAL_RCC_OscConfig+0xda>
 80017cc:	4b70      	ldr	r3, [pc, #448]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a6f      	ldr	r2, [pc, #444]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80017d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b6d      	ldr	r3, [pc, #436]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a6c      	ldr	r2, [pc, #432]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80017de:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a69      	ldr	r2, [pc, #420]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80017ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	e029      	b.n	8001846 <HAL_RCC_OscConfig+0x12e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80017fa:	d112      	bne.n	8001822 <HAL_RCC_OscConfig+0x10a>
 80017fc:	4b64      	ldr	r3, [pc, #400]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a63      	ldr	r2, [pc, #396]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001802:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b61      	ldr	r3, [pc, #388]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a60      	ldr	r2, [pc, #384]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 800180e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b5e      	ldr	r3, [pc, #376]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a5d      	ldr	r2, [pc, #372]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 800181a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	e011      	b.n	8001846 <HAL_RCC_OscConfig+0x12e>
 8001822:	4b5b      	ldr	r3, [pc, #364]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a5a      	ldr	r2, [pc, #360]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b58      	ldr	r3, [pc, #352]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a57      	ldr	r2, [pc, #348]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001834:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b55      	ldr	r3, [pc, #340]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a54      	ldr	r2, [pc, #336]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001840:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001844:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d013      	beq.n	8001876 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff fbcd 	bl	8000fec <HAL_GetTick>
 8001852:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001856:	f7ff fbc9 	bl	8000fec <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b64      	cmp	r3, #100	@ 0x64
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e380      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001868:	4b49      	ldr	r3, [pc, #292]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x13e>
 8001874:	e014      	b.n	80018a0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001876:	f7ff fbb9 	bl	8000fec <HAL_GetTick>
 800187a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800187e:	f7ff fbb5 	bl	8000fec <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b64      	cmp	r3, #100	@ 0x64
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e36c      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001890:	4b3f      	ldr	r3, [pc, #252]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f0      	bne.n	800187e <HAL_RCC_OscConfig+0x166>
 800189c:	e000      	b.n	80018a0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 808c 	beq.w	80019c6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ae:	4b38      	ldr	r3, [pc, #224]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018b8:	4b35      	ldr	r3, [pc, #212]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80018ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018bc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <HAL_RCC_OscConfig+0x1bc>
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	2b18      	cmp	r3, #24
 80018c8:	d137      	bne.n	800193a <HAL_RCC_OscConfig+0x222>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d132      	bne.n	800193a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_OscConfig+0x1d4>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e33e      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018ec:	4b28      	ldr	r3, [pc, #160]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f023 0219 	bic.w	r2, r3, #25
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4925      	ldr	r1, [pc, #148]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff fb75 	bl	8000fec <HAL_GetTick>
 8001902:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff fb71 	bl	8000fec <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e328      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001918:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	061b      	lsls	r3, r3, #24
 8001932:	4917      	ldr	r1, [pc, #92]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001938:	e045      	b.n	80019c6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d028      	beq.n	8001994 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001942:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 0219 	bic.w	r2, r3, #25
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	4910      	ldr	r1, [pc, #64]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fb4a 	bl	8000fec <HAL_GetTick>
 8001958:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195c:	f7ff fb46 	bl	8000fec <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e2fd      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800196e:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	061b      	lsls	r3, r3, #24
 8001988:	4901      	ldr	r1, [pc, #4]	@ (8001990 <HAL_RCC_OscConfig+0x278>)
 800198a:	4313      	orrs	r3, r2
 800198c:	604b      	str	r3, [r1, #4]
 800198e:	e01a      	b.n	80019c6 <HAL_RCC_OscConfig+0x2ae>
 8001990:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001994:	4b97      	ldr	r3, [pc, #604]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a96      	ldr	r2, [pc, #600]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 800199a:	f023 0301 	bic.w	r3, r3, #1
 800199e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7ff fb24 	bl	8000fec <HAL_GetTick>
 80019a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a8:	f7ff fb20 	bl	8000fec <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e2d7      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019ba:	4b8e      	ldr	r3, [pc, #568]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d06a      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d2:	4b88      	ldr	r3, [pc, #544]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019dc:	4b85      	ldr	r3, [pc, #532]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 80019de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d007      	beq.n	80019f8 <HAL_RCC_OscConfig+0x2e0>
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b18      	cmp	r3, #24
 80019ec:	d11b      	bne.n	8001a26 <HAL_RCC_OscConfig+0x30e>
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d116      	bne.n	8001a26 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019f8:	4b7e      	ldr	r3, [pc, #504]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_OscConfig+0x2f8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	2b80      	cmp	r3, #128	@ 0x80
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e2ac      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a10:	4b78      	ldr	r3, [pc, #480]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	061b      	lsls	r3, r3, #24
 8001a1e:	4975      	ldr	r1, [pc, #468]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a24:	e040      	b.n	8001aa8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d023      	beq.n	8001a76 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a2e:	4b71      	ldr	r3, [pc, #452]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a70      	ldr	r2, [pc, #448]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3a:	f7ff fad7 	bl	8000fec <HAL_GetTick>
 8001a3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a42:	f7ff fad3 	bl	8000fec <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e28a      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a54:	4b67      	ldr	r3, [pc, #412]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a60:	4b64      	ldr	r3, [pc, #400]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	061b      	lsls	r3, r3, #24
 8001a6e:	4961      	ldr	r1, [pc, #388]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	60cb      	str	r3, [r1, #12]
 8001a74:	e018      	b.n	8001aa8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a76:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a5e      	ldr	r2, [pc, #376]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001a7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7ff fab3 	bl	8000fec <HAL_GetTick>
 8001a86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a8a:	f7ff faaf 	bl	8000fec <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e266      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a9c:	4b55      	ldr	r3, [pc, #340]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d036      	beq.n	8001b22 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d019      	beq.n	8001af0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001abc:	4b4d      	ldr	r3, [pc, #308]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fa90 	bl	8000fec <HAL_GetTick>
 8001acc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fa8c 	bl	8000fec <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e243      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ae2:	4b44      	ldr	r3, [pc, #272]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x3b8>
 8001aee:	e018      	b.n	8001b22 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af0:	4b40      	ldr	r3, [pc, #256]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001af4:	4a3f      	ldr	r2, [pc, #252]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001af6:	f023 0301 	bic.w	r3, r3, #1
 8001afa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afc:	f7ff fa76 	bl	8000fec <HAL_GetTick>
 8001b00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b04:	f7ff fa72 	bl	8000fec <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e229      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b16:	4b37      	ldr	r3, [pc, #220]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0320 	and.w	r3, r3, #32
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d036      	beq.n	8001b9c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d019      	beq.n	8001b6a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b36:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a2e      	ldr	r2, [pc, #184]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001b3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b42:	f7ff fa53 	bl	8000fec <HAL_GetTick>
 8001b46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b4a:	f7ff fa4f 	bl	8000fec <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e206      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b5c:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x432>
 8001b68:	e018      	b.n	8001b9c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b6a:	4b22      	ldr	r3, [pc, #136]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a21      	ldr	r2, [pc, #132]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001b70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fa39 	bl	8000fec <HAL_GetTick>
 8001b7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b7e:	f7ff fa35 	bl	8000fec <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e1ec      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b90:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80af 	beq.w	8001d08 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001baa:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <HAL_RCC_OscConfig+0x4e0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a12      	ldr	r2, [pc, #72]	@ (8001bf8 <HAL_RCC_OscConfig+0x4e0>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bb6:	f7ff fa19 	bl	8000fec <HAL_GetTick>
 8001bba:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbe:	f7ff fa15 	bl	8000fec <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b64      	cmp	r3, #100	@ 0x64
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e1cc      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bd0:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <HAL_RCC_OscConfig+0x4e0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d10b      	bne.n	8001bfc <HAL_RCC_OscConfig+0x4e4>
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be8:	4a02      	ldr	r2, [pc, #8]	@ (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bf0:	e05b      	b.n	8001caa <HAL_RCC_OscConfig+0x592>
 8001bf2:	bf00      	nop
 8001bf4:	58024400 	.word	0x58024400
 8001bf8:	58024800 	.word	0x58024800
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d112      	bne.n	8001c2a <HAL_RCC_OscConfig+0x512>
 8001c04:	4b9d      	ldr	r3, [pc, #628]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c08:	4a9c      	ldr	r2, [pc, #624]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c10:	4b9a      	ldr	r3, [pc, #616]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c14:	4a99      	ldr	r2, [pc, #612]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c1c:	4b97      	ldr	r3, [pc, #604]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c20:	4a96      	ldr	r2, [pc, #600]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c22:	f023 0304 	bic.w	r3, r3, #4
 8001c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c28:	e03f      	b.n	8001caa <HAL_RCC_OscConfig+0x592>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b05      	cmp	r3, #5
 8001c30:	d112      	bne.n	8001c58 <HAL_RCC_OscConfig+0x540>
 8001c32:	4b92      	ldr	r3, [pc, #584]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c36:	4a91      	ldr	r2, [pc, #580]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c3e:	4b8f      	ldr	r3, [pc, #572]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c42:	4a8e      	ldr	r2, [pc, #568]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c4a:	4b8c      	ldr	r3, [pc, #560]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4e:	4a8b      	ldr	r2, [pc, #556]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c56:	e028      	b.n	8001caa <HAL_RCC_OscConfig+0x592>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b85      	cmp	r3, #133	@ 0x85
 8001c5e:	d112      	bne.n	8001c86 <HAL_RCC_OscConfig+0x56e>
 8001c60:	4b86      	ldr	r3, [pc, #536]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c64:	4a85      	ldr	r2, [pc, #532]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c66:	f043 0304 	orr.w	r3, r3, #4
 8001c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c6c:	4b83      	ldr	r3, [pc, #524]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c70:	4a82      	ldr	r2, [pc, #520]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c78:	4b80      	ldr	r3, [pc, #512]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c84:	e011      	b.n	8001caa <HAL_RCC_OscConfig+0x592>
 8001c86:	4b7d      	ldr	r3, [pc, #500]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8a:	4a7c      	ldr	r2, [pc, #496]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c92:	4b7a      	ldr	r3, [pc, #488]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c96:	4a79      	ldr	r2, [pc, #484]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001c98:	f023 0304 	bic.w	r3, r3, #4
 8001c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c9e:	4b77      	ldr	r3, [pc, #476]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca2:	4a76      	ldr	r2, [pc, #472]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001ca4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ca8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d015      	beq.n	8001cde <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7ff f99b 	bl	8000fec <HAL_GetTick>
 8001cb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7ff f997 	bl	8000fec <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e14c      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ee      	beq.n	8001cba <HAL_RCC_OscConfig+0x5a2>
 8001cdc:	e014      	b.n	8001d08 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7ff f985 	bl	8000fec <HAL_GetTick>
 8001ce2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7ff f981 	bl	8000fec <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e136      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cfc:	4b5f      	ldr	r3, [pc, #380]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1ee      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 812b 	beq.w	8001f68 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d12:	4b5a      	ldr	r3, [pc, #360]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d1a:	2b18      	cmp	r3, #24
 8001d1c:	f000 80bb 	beq.w	8001e96 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	f040 8095 	bne.w	8001e54 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b54      	ldr	r3, [pc, #336]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a53      	ldr	r2, [pc, #332]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001d30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff f959 	bl	8000fec <HAL_GetTick>
 8001d3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7ff f955 	bl	8000fec <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e10c      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d50:	4b4a      	ldr	r3, [pc, #296]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5c:	4b47      	ldr	r3, [pc, #284]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001d5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d60:	4b47      	ldr	r3, [pc, #284]	@ (8001e80 <HAL_RCC_OscConfig+0x768>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	4942      	ldr	r1, [pc, #264]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	628b      	str	r3, [r1, #40]	@ 0x28
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d84:	3b01      	subs	r3, #1
 8001d86:	025b      	lsls	r3, r3, #9
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d90:	3b01      	subs	r3, #1
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001da6:	4935      	ldr	r1, [pc, #212]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001dac:	4b33      	ldr	r3, [pc, #204]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db0:	4a32      	ldr	r2, [pc, #200]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001db8:	4b30      	ldr	r3, [pc, #192]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dbc:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <HAL_RCC_OscConfig+0x76c>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001dc4:	00d2      	lsls	r2, r2, #3
 8001dc6:	492d      	ldr	r1, [pc, #180]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd0:	f023 020c 	bic.w	r2, r3, #12
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	4928      	ldr	r1, [pc, #160]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001dde:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de2:	f023 0202 	bic.w	r2, r3, #2
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	4924      	ldr	r1, [pc, #144]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001df0:	4b22      	ldr	r3, [pc, #136]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df4:	4a21      	ldr	r2, [pc, #132]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e00:	4a1e      	ldr	r2, [pc, #120]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e08:	4b1c      	ldr	r3, [pc, #112]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001e0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001e14:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e18:	4a18      	ldr	r2, [pc, #96]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e20:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a15      	ldr	r2, [pc, #84]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001e26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f8de 	bl	8000fec <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff f8da 	bl	8000fec <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e091      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e46:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x71c>
 8001e52:	e089      	b.n	8001f68 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e54:	4b09      	ldr	r3, [pc, #36]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a08      	ldr	r2, [pc, #32]	@ (8001e7c <HAL_RCC_OscConfig+0x764>)
 8001e5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff f8c4 	bl	8000fec <HAL_GetTick>
 8001e64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e66:	e00f      	b.n	8001e88 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e68:	f7ff f8c0 	bl	8000fec <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d908      	bls.n	8001e88 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e077      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
 8001e7a:	bf00      	nop
 8001e7c:	58024400 	.word	0x58024400
 8001e80:	fffffc0c 	.word	0xfffffc0c
 8001e84:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e88:	4b3a      	ldr	r3, [pc, #232]	@ (8001f74 <HAL_RCC_OscConfig+0x85c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e9      	bne.n	8001e68 <HAL_RCC_OscConfig+0x750>
 8001e94:	e068      	b.n	8001f68 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e96:	4b37      	ldr	r3, [pc, #220]	@ (8001f74 <HAL_RCC_OscConfig+0x85c>)
 8001e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e9c:	4b35      	ldr	r3, [pc, #212]	@ (8001f74 <HAL_RCC_OscConfig+0x85c>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d031      	beq.n	8001f0e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d12a      	bne.n	8001f0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d122      	bne.n	8001f0e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d11a      	bne.n	8001f0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	0a5b      	lsrs	r3, r3, #9
 8001edc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d111      	bne.n	8001f0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d108      	bne.n	8001f0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	0e1b      	lsrs	r3, r3, #24
 8001f00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e02b      	b.n	8001f6a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001f12:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <HAL_RCC_OscConfig+0x85c>)
 8001f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f16:	08db      	lsrs	r3, r3, #3
 8001f18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f1c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d01f      	beq.n	8001f68 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001f28:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <HAL_RCC_OscConfig+0x85c>)
 8001f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2c:	4a11      	ldr	r2, [pc, #68]	@ (8001f74 <HAL_RCC_OscConfig+0x85c>)
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f34:	f7ff f85a 	bl	8000fec <HAL_GetTick>
 8001f38:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001f3a:	bf00      	nop
 8001f3c:	f7ff f856 	bl	8000fec <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d0f9      	beq.n	8001f3c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f48:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_RCC_OscConfig+0x85c>)
 8001f4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_RCC_OscConfig+0x860>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f54:	00d2      	lsls	r2, r2, #3
 8001f56:	4907      	ldr	r1, [pc, #28]	@ (8001f74 <HAL_RCC_OscConfig+0x85c>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <HAL_RCC_OscConfig+0x85c>)
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	4a04      	ldr	r2, [pc, #16]	@ (8001f74 <HAL_RCC_OscConfig+0x85c>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3730      	adds	r7, #48	@ 0x30
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	58024400 	.word	0x58024400
 8001f78:	ffff0007 	.word	0xffff0007

08001f7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e19c      	b.n	80022ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b8a      	ldr	r3, [pc, #552]	@ (80021bc <HAL_RCC_ClockConfig+0x240>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d910      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b87      	ldr	r3, [pc, #540]	@ (80021bc <HAL_RCC_ClockConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 020f 	bic.w	r2, r3, #15
 8001fa6:	4985      	ldr	r1, [pc, #532]	@ (80021bc <HAL_RCC_ClockConfig+0x240>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b83      	ldr	r3, [pc, #524]	@ (80021bc <HAL_RCC_ClockConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e184      	b.n	80022ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d010      	beq.n	8001fee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	4b7b      	ldr	r3, [pc, #492]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d908      	bls.n	8001fee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fdc:	4b78      	ldr	r3, [pc, #480]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	4975      	ldr	r1, [pc, #468]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d010      	beq.n	800201c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	4b70      	ldr	r3, [pc, #448]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002006:	429a      	cmp	r2, r3
 8002008:	d908      	bls.n	800201c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800200a:	4b6d      	ldr	r3, [pc, #436]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	496a      	ldr	r1, [pc, #424]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 8002018:	4313      	orrs	r3, r2
 800201a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d010      	beq.n	800204a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	4b64      	ldr	r3, [pc, #400]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002034:	429a      	cmp	r2, r3
 8002036:	d908      	bls.n	800204a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002038:	4b61      	ldr	r3, [pc, #388]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	495e      	ldr	r1, [pc, #376]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 8002046:	4313      	orrs	r3, r2
 8002048:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d010      	beq.n	8002078 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69da      	ldr	r2, [r3, #28]
 800205a:	4b59      	ldr	r3, [pc, #356]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002062:	429a      	cmp	r2, r3
 8002064:	d908      	bls.n	8002078 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002066:	4b56      	ldr	r3, [pc, #344]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4953      	ldr	r1, [pc, #332]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 8002074:	4313      	orrs	r3, r2
 8002076:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d010      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	4b4d      	ldr	r3, [pc, #308]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	429a      	cmp	r2, r3
 8002092:	d908      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002094:	4b4a      	ldr	r3, [pc, #296]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f023 020f 	bic.w	r2, r3, #15
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4947      	ldr	r1, [pc, #284]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d055      	beq.n	800215e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020b2:	4b43      	ldr	r3, [pc, #268]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	4940      	ldr	r1, [pc, #256]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020cc:	4b3c      	ldr	r3, [pc, #240]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d121      	bne.n	800211c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0f6      	b.n	80022ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020e4:	4b36      	ldr	r3, [pc, #216]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d115      	bne.n	800211c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0ea      	b.n	80022ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d107      	bne.n	800210c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020fc:	4b30      	ldr	r3, [pc, #192]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0de      	b.n	80022ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800210c:	4b2c      	ldr	r3, [pc, #176]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0d6      	b.n	80022ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800211c:	4b28      	ldr	r3, [pc, #160]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	f023 0207 	bic.w	r2, r3, #7
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4925      	ldr	r1, [pc, #148]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 800212a:	4313      	orrs	r3, r2
 800212c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800212e:	f7fe ff5d 	bl	8000fec <HAL_GetTick>
 8002132:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002134:	e00a      	b.n	800214c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002136:	f7fe ff59 	bl	8000fec <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0be      	b.n	80022ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214c:	4b1c      	ldr	r3, [pc, #112]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	429a      	cmp	r2, r3
 800215c:	d1eb      	bne.n	8002136 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d010      	beq.n	800218c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	4b14      	ldr	r3, [pc, #80]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	429a      	cmp	r2, r3
 8002178:	d208      	bcs.n	800218c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800217a:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f023 020f 	bic.w	r2, r3, #15
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	490e      	ldr	r1, [pc, #56]	@ (80021c0 <HAL_RCC_ClockConfig+0x244>)
 8002188:	4313      	orrs	r3, r2
 800218a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <HAL_RCC_ClockConfig+0x240>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d214      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <HAL_RCC_ClockConfig+0x240>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 020f 	bic.w	r2, r3, #15
 80021a2:	4906      	ldr	r1, [pc, #24]	@ (80021bc <HAL_RCC_ClockConfig+0x240>)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b04      	ldr	r3, [pc, #16]	@ (80021bc <HAL_RCC_ClockConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e086      	b.n	80022ca <HAL_RCC_ClockConfig+0x34e>
 80021bc:	52002000 	.word	0x52002000
 80021c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d010      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	4b3f      	ldr	r3, [pc, #252]	@ (80022d4 <HAL_RCC_ClockConfig+0x358>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021dc:	429a      	cmp	r2, r3
 80021de:	d208      	bcs.n	80021f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021e0:	4b3c      	ldr	r3, [pc, #240]	@ (80022d4 <HAL_RCC_ClockConfig+0x358>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	4939      	ldr	r1, [pc, #228]	@ (80022d4 <HAL_RCC_ClockConfig+0x358>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d010      	beq.n	8002220 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	4b34      	ldr	r3, [pc, #208]	@ (80022d4 <HAL_RCC_ClockConfig+0x358>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800220a:	429a      	cmp	r2, r3
 800220c:	d208      	bcs.n	8002220 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800220e:	4b31      	ldr	r3, [pc, #196]	@ (80022d4 <HAL_RCC_ClockConfig+0x358>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	492e      	ldr	r1, [pc, #184]	@ (80022d4 <HAL_RCC_ClockConfig+0x358>)
 800221c:	4313      	orrs	r3, r2
 800221e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	d010      	beq.n	800224e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	4b28      	ldr	r3, [pc, #160]	@ (80022d4 <HAL_RCC_ClockConfig+0x358>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002238:	429a      	cmp	r2, r3
 800223a:	d208      	bcs.n	800224e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800223c:	4b25      	ldr	r3, [pc, #148]	@ (80022d4 <HAL_RCC_ClockConfig+0x358>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	4922      	ldr	r1, [pc, #136]	@ (80022d4 <HAL_RCC_ClockConfig+0x358>)
 800224a:	4313      	orrs	r3, r2
 800224c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b00      	cmp	r3, #0
 8002258:	d010      	beq.n	800227c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69da      	ldr	r2, [r3, #28]
 800225e:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <HAL_RCC_ClockConfig+0x358>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002266:	429a      	cmp	r2, r3
 8002268:	d208      	bcs.n	800227c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800226a:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <HAL_RCC_ClockConfig+0x358>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4917      	ldr	r1, [pc, #92]	@ (80022d4 <HAL_RCC_ClockConfig+0x358>)
 8002278:	4313      	orrs	r3, r2
 800227a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800227c:	f000 f834 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 8002280:	4602      	mov	r2, r0
 8002282:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <HAL_RCC_ClockConfig+0x358>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	4912      	ldr	r1, [pc, #72]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 800228e:	5ccb      	ldrb	r3, [r1, r3]
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
 8002298:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <HAL_RCC_ClockConfig+0x358>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	4a0d      	ldr	r2, [pc, #52]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 80022a4:	5cd3      	ldrb	r3, [r2, r3]
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <HAL_RCC_ClockConfig+0x360>)
 80022b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022b4:	4a0a      	ldr	r2, [pc, #40]	@ (80022e0 <HAL_RCC_ClockConfig+0x364>)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80022ba:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <HAL_RCC_ClockConfig+0x368>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe fe4a 	bl	8000f58 <HAL_InitTick>
 80022c4:	4603      	mov	r3, r0
 80022c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	58024400 	.word	0x58024400
 80022d8:	08005098 	.word	0x08005098
 80022dc:	24000004 	.word	0x24000004
 80022e0:	24000000 	.word	0x24000000
 80022e4:	2400000c 	.word	0x2400000c

080022e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	@ 0x24
 80022ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ee:	4bb3      	ldr	r3, [pc, #716]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022f6:	2b18      	cmp	r3, #24
 80022f8:	f200 8155 	bhi.w	80025a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80022fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002304 <HAL_RCC_GetSysClockFreq+0x1c>)
 80022fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002302:	bf00      	nop
 8002304:	08002369 	.word	0x08002369
 8002308:	080025a7 	.word	0x080025a7
 800230c:	080025a7 	.word	0x080025a7
 8002310:	080025a7 	.word	0x080025a7
 8002314:	080025a7 	.word	0x080025a7
 8002318:	080025a7 	.word	0x080025a7
 800231c:	080025a7 	.word	0x080025a7
 8002320:	080025a7 	.word	0x080025a7
 8002324:	0800238f 	.word	0x0800238f
 8002328:	080025a7 	.word	0x080025a7
 800232c:	080025a7 	.word	0x080025a7
 8002330:	080025a7 	.word	0x080025a7
 8002334:	080025a7 	.word	0x080025a7
 8002338:	080025a7 	.word	0x080025a7
 800233c:	080025a7 	.word	0x080025a7
 8002340:	080025a7 	.word	0x080025a7
 8002344:	08002395 	.word	0x08002395
 8002348:	080025a7 	.word	0x080025a7
 800234c:	080025a7 	.word	0x080025a7
 8002350:	080025a7 	.word	0x080025a7
 8002354:	080025a7 	.word	0x080025a7
 8002358:	080025a7 	.word	0x080025a7
 800235c:	080025a7 	.word	0x080025a7
 8002360:	080025a7 	.word	0x080025a7
 8002364:	0800239b 	.word	0x0800239b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002368:	4b94      	ldr	r3, [pc, #592]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	2b00      	cmp	r3, #0
 8002372:	d009      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002374:	4b91      	ldr	r3, [pc, #580]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	08db      	lsrs	r3, r3, #3
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	4a90      	ldr	r2, [pc, #576]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002386:	e111      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002388:	4b8d      	ldr	r3, [pc, #564]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800238a:	61bb      	str	r3, [r7, #24]
      break;
 800238c:	e10e      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800238e:	4b8d      	ldr	r3, [pc, #564]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002390:	61bb      	str	r3, [r7, #24]
      break;
 8002392:	e10b      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002394:	4b8c      	ldr	r3, [pc, #560]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002396:	61bb      	str	r3, [r7, #24]
      break;
 8002398:	e108      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800239a:	4b88      	ldr	r3, [pc, #544]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800239c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80023a4:	4b85      	ldr	r3, [pc, #532]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023b0:	4b82      	ldr	r3, [pc, #520]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80023ba:	4b80      	ldr	r3, [pc, #512]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023be:	08db      	lsrs	r3, r3, #3
 80023c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80e1 	beq.w	80025a0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	f000 8083 	beq.w	80024ec <HAL_RCC_GetSysClockFreq+0x204>
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	f200 80a1 	bhi.w	8002530 <HAL_RCC_GetSysClockFreq+0x248>
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x114>
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d056      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80023fa:	e099      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023fc:	4b6f      	ldr	r3, [pc, #444]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b00      	cmp	r3, #0
 8002406:	d02d      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002408:	4b6c      	ldr	r3, [pc, #432]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	08db      	lsrs	r3, r3, #3
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	4a6b      	ldr	r2, [pc, #428]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
 8002418:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	ee07 3a90 	vmov	s15, r3
 8002420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800242e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002432:	4b62      	ldr	r3, [pc, #392]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002442:	ed97 6a02 	vldr	s12, [r7, #8]
 8002446:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80025cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800244a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800244e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800245a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002462:	e087      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80025d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002476:	4b51      	ldr	r3, [pc, #324]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002486:	ed97 6a02 	vldr	s12, [r7, #8]
 800248a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80025cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800248e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800249a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800249e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024a6:	e065      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80025d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ba:	4b40      	ldr	r3, [pc, #256]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80025cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80024d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024ea:	e043      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80025d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80024fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024fe:	4b2f      	ldr	r3, [pc, #188]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002506:	ee07 3a90 	vmov	s15, r3
 800250a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800250e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002512:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80025cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800251a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800251e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800252e:	e021      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80025d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800253e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002542:	4b1e      	ldr	r3, [pc, #120]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002552:	ed97 6a02 	vldr	s12, [r7, #8]
 8002556:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80025cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800255a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800255e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800256a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002572:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002578:	0a5b      	lsrs	r3, r3, #9
 800257a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800257e:	3301      	adds	r3, #1
 8002580:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800258c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002598:	ee17 3a90 	vmov	r3, s15
 800259c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800259e:	e005      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
      break;
 80025a4:	e002      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80025a6:	4b07      	ldr	r3, [pc, #28]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025a8:	61bb      	str	r3, [r7, #24]
      break;
 80025aa:	bf00      	nop
  }

  return sysclockfreq;
 80025ac:	69bb      	ldr	r3, [r7, #24]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3724      	adds	r7, #36	@ 0x24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	58024400 	.word	0x58024400
 80025c0:	03d09000 	.word	0x03d09000
 80025c4:	003d0900 	.word	0x003d0900
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	46000000 	.word	0x46000000
 80025d0:	4c742400 	.word	0x4c742400
 80025d4:	4a742400 	.word	0x4a742400
 80025d8:	4af42400 	.word	0x4af42400

080025dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80025e2:	f7ff fe81 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 80025e6:	4602      	mov	r2, r0
 80025e8:	4b10      	ldr	r3, [pc, #64]	@ (800262c <HAL_RCC_GetHCLKFreq+0x50>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	490f      	ldr	r1, [pc, #60]	@ (8002630 <HAL_RCC_GetHCLKFreq+0x54>)
 80025f4:	5ccb      	ldrb	r3, [r1, r3]
 80025f6:	f003 031f 	and.w	r3, r3, #31
 80025fa:	fa22 f303 	lsr.w	r3, r2, r3
 80025fe:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002600:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <HAL_RCC_GetHCLKFreq+0x50>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	4a09      	ldr	r2, [pc, #36]	@ (8002630 <HAL_RCC_GetHCLKFreq+0x54>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	fa22 f303 	lsr.w	r3, r2, r3
 8002616:	4a07      	ldr	r2, [pc, #28]	@ (8002634 <HAL_RCC_GetHCLKFreq+0x58>)
 8002618:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800261a:	4a07      	ldr	r2, [pc, #28]	@ (8002638 <HAL_RCC_GetHCLKFreq+0x5c>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002620:	4b04      	ldr	r3, [pc, #16]	@ (8002634 <HAL_RCC_GetHCLKFreq+0x58>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	58024400 	.word	0x58024400
 8002630:	08005098 	.word	0x08005098
 8002634:	24000004 	.word	0x24000004
 8002638:	24000000 	.word	0x24000000

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002640:	f7ff ffcc 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4904      	ldr	r1, [pc, #16]	@ (8002664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	58024400 	.word	0x58024400
 8002664:	08005098 	.word	0x08005098

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800266c:	f7ff ffb6 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	@ (8002690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	58024400 	.word	0x58024400
 8002690:	08005098 	.word	0x08005098

08002694 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8002698:	f7ff ffa0 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4904      	ldr	r1, [pc, #16]	@ (80026bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	58024400 	.word	0x58024400
 80026bc:	08005098 	.word	0x08005098

080026c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	@ 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026c8:	4ba1      	ldr	r3, [pc, #644]	@ (8002950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80026ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80026d2:	4b9f      	ldr	r3, [pc, #636]	@ (8002950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80026d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d6:	0b1b      	lsrs	r3, r3, #12
 80026d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80026de:	4b9c      	ldr	r3, [pc, #624]	@ (8002950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80026e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80026ea:	4b99      	ldr	r3, [pc, #612]	@ (8002950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80026ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ee:	08db      	lsrs	r3, r3, #3
 80026f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002702:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8111 	beq.w	8002930 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b02      	cmp	r3, #2
 8002712:	f000 8083 	beq.w	800281c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	2b02      	cmp	r3, #2
 800271a:	f200 80a1 	bhi.w	8002860 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d056      	beq.n	80027d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800272a:	e099      	b.n	8002860 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800272c:	4b88      	ldr	r3, [pc, #544]	@ (8002950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d02d      	beq.n	8002794 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002738:	4b85      	ldr	r3, [pc, #532]	@ (8002950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	08db      	lsrs	r3, r3, #3
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	4a84      	ldr	r2, [pc, #528]	@ (8002954 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
 8002748:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	ee07 3a90 	vmov	s15, r3
 8002750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800275e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002762:	4b7b      	ldr	r3, [pc, #492]	@ (8002950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002772:	ed97 6a03 	vldr	s12, [r7, #12]
 8002776:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800277a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800277e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002792:	e087      	b.n	80028a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800295c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80027a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80027a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80027ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80027be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027d6:	e065      	b.n	80028a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002960 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80027e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ea:	4b59      	ldr	r3, [pc, #356]	@ (8002950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80027ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80027fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800280a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800280e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800281a:	e043      	b.n	80028a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	ee07 3a90 	vmov	s15, r3
 8002822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002826:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002964 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800282a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800282e:	4b48      	ldr	r3, [pc, #288]	@ (8002950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002836:	ee07 3a90 	vmov	s15, r3
 800283a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800283e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002842:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800284a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800284e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800285e:	e021      	b.n	80028a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	ee07 3a90 	vmov	s15, r3
 8002866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800286a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002960 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800286e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002872:	4b37      	ldr	r3, [pc, #220]	@ (8002950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002882:	ed97 6a03 	vldr	s12, [r7, #12]
 8002886:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800288a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800288e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800289a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80028a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80028a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a8:	0a5b      	lsrs	r3, r3, #9
 80028aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80028ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80028be:	edd7 6a07 	vldr	s13, [r7, #28]
 80028c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ca:	ee17 2a90 	vmov	r2, s15
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80028d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80028d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d6:	0c1b      	lsrs	r3, r3, #16
 80028d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80028e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80028ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80028f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f8:	ee17 2a90 	vmov	r2, s15
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002900:	4b13      	ldr	r3, [pc, #76]	@ (8002950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002904:	0e1b      	lsrs	r3, r3, #24
 8002906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002912:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800291a:	edd7 6a07 	vldr	s13, [r7, #28]
 800291e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002926:	ee17 2a90 	vmov	r2, s15
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800292e:	e008      	b.n	8002942 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
}
 8002942:	bf00      	nop
 8002944:	3724      	adds	r7, #36	@ 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	58024400 	.word	0x58024400
 8002954:	03d09000 	.word	0x03d09000
 8002958:	46000000 	.word	0x46000000
 800295c:	4c742400 	.word	0x4c742400
 8002960:	4a742400 	.word	0x4a742400
 8002964:	4af42400 	.word	0x4af42400

08002968 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	@ 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002970:	4ba1      	ldr	r3, [pc, #644]	@ (8002bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800297a:	4b9f      	ldr	r3, [pc, #636]	@ (8002bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800297c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297e:	0d1b      	lsrs	r3, r3, #20
 8002980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002984:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002986:	4b9c      	ldr	r3, [pc, #624]	@ (8002bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002992:	4b99      	ldr	r3, [pc, #612]	@ (8002bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	08db      	lsrs	r3, r3, #3
 8002998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8111 	beq.w	8002bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	f000 8083 	beq.w	8002ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	f200 80a1 	bhi.w	8002b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d056      	beq.n	8002a80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80029d2:	e099      	b.n	8002b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029d4:	4b88      	ldr	r3, [pc, #544]	@ (8002bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d02d      	beq.n	8002a3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029e0:	4b85      	ldr	r3, [pc, #532]	@ (8002bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	4a84      	ldr	r2, [pc, #528]	@ (8002bfc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
 80029f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	ee07 3a90 	vmov	s15, r3
 80029f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	ee07 3a90 	vmov	s15, r3
 8002a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002a3a:	e087      	b.n	8002b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002c04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a7e:	e065      	b.n	8002b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a92:	4b59      	ldr	r3, [pc, #356]	@ (8002bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002aa6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ac2:	e043      	b.n	8002b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	ee07 3a90 	vmov	s15, r3
 8002aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ace:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002c0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ad6:	4b48      	ldr	r3, [pc, #288]	@ (8002bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002aea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b06:	e021      	b.n	8002b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b1a:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b22:	ee07 3a90 	vmov	s15, r3
 8002b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	0a5b      	lsrs	r3, r3, #9
 8002b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b72:	ee17 2a90 	vmov	r2, s15
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	0c1b      	lsrs	r3, r3, #16
 8002b80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b84:	ee07 3a90 	vmov	s15, r3
 8002b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b94:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ba0:	ee17 2a90 	vmov	r2, s15
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002ba8:	4b13      	ldr	r3, [pc, #76]	@ (8002bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	0e1b      	lsrs	r3, r3, #24
 8002bae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bce:	ee17 2a90 	vmov	r2, s15
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002bd6:	e008      	b.n	8002bea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
}
 8002bea:	bf00      	nop
 8002bec:	3724      	adds	r7, #36	@ 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	58024400 	.word	0x58024400
 8002bfc:	03d09000 	.word	0x03d09000
 8002c00:	46000000 	.word	0x46000000
 8002c04:	4c742400 	.word	0x4c742400
 8002c08:	4a742400 	.word	0x4a742400
 8002c0c:	4af42400 	.word	0x4af42400

08002c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e049      	b.n	8002cb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd ff36 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f000 fbb0 	bl	80033b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e049      	b.n	8002d64 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f841 	bl	8002d6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	f000 fb59 	bl	80033b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_TIM_PWM_Start+0x24>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e03c      	b.n	8002e1e <HAL_TIM_PWM_Start+0x9e>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d109      	bne.n	8002dbe <HAL_TIM_PWM_Start+0x3e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	bf14      	ite	ne
 8002db6:	2301      	movne	r3, #1
 8002db8:	2300      	moveq	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	e02f      	b.n	8002e1e <HAL_TIM_PWM_Start+0x9e>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d109      	bne.n	8002dd8 <HAL_TIM_PWM_Start+0x58>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e022      	b.n	8002e1e <HAL_TIM_PWM_Start+0x9e>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	d109      	bne.n	8002df2 <HAL_TIM_PWM_Start+0x72>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	bf14      	ite	ne
 8002dea:	2301      	movne	r3, #1
 8002dec:	2300      	moveq	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	e015      	b.n	8002e1e <HAL_TIM_PWM_Start+0x9e>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d109      	bne.n	8002e0c <HAL_TIM_PWM_Start+0x8c>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e008      	b.n	8002e1e <HAL_TIM_PWM_Start+0x9e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	bf14      	ite	ne
 8002e18:	2301      	movne	r3, #1
 8002e1a:	2300      	moveq	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e0a1      	b.n	8002f6a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d104      	bne.n	8002e36 <HAL_TIM_PWM_Start+0xb6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e34:	e023      	b.n	8002e7e <HAL_TIM_PWM_Start+0xfe>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d104      	bne.n	8002e46 <HAL_TIM_PWM_Start+0xc6>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e44:	e01b      	b.n	8002e7e <HAL_TIM_PWM_Start+0xfe>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d104      	bne.n	8002e56 <HAL_TIM_PWM_Start+0xd6>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e54:	e013      	b.n	8002e7e <HAL_TIM_PWM_Start+0xfe>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b0c      	cmp	r3, #12
 8002e5a:	d104      	bne.n	8002e66 <HAL_TIM_PWM_Start+0xe6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e64:	e00b      	b.n	8002e7e <HAL_TIM_PWM_Start+0xfe>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d104      	bne.n	8002e76 <HAL_TIM_PWM_Start+0xf6>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e74:	e003      	b.n	8002e7e <HAL_TIM_PWM_Start+0xfe>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2201      	movs	r2, #1
 8002e84:	6839      	ldr	r1, [r7, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fea8 	bl	8003bdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a38      	ldr	r2, [pc, #224]	@ (8002f74 <HAL_TIM_PWM_Start+0x1f4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_TIM_PWM_Start+0x13e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a37      	ldr	r2, [pc, #220]	@ (8002f78 <HAL_TIM_PWM_Start+0x1f8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00e      	beq.n	8002ebe <HAL_TIM_PWM_Start+0x13e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a35      	ldr	r2, [pc, #212]	@ (8002f7c <HAL_TIM_PWM_Start+0x1fc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d009      	beq.n	8002ebe <HAL_TIM_PWM_Start+0x13e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a34      	ldr	r2, [pc, #208]	@ (8002f80 <HAL_TIM_PWM_Start+0x200>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d004      	beq.n	8002ebe <HAL_TIM_PWM_Start+0x13e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a32      	ldr	r2, [pc, #200]	@ (8002f84 <HAL_TIM_PWM_Start+0x204>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d101      	bne.n	8002ec2 <HAL_TIM_PWM_Start+0x142>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_TIM_PWM_Start+0x144>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ed6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a25      	ldr	r2, [pc, #148]	@ (8002f74 <HAL_TIM_PWM_Start+0x1f4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d022      	beq.n	8002f28 <HAL_TIM_PWM_Start+0x1a8>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eea:	d01d      	beq.n	8002f28 <HAL_TIM_PWM_Start+0x1a8>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a25      	ldr	r2, [pc, #148]	@ (8002f88 <HAL_TIM_PWM_Start+0x208>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d018      	beq.n	8002f28 <HAL_TIM_PWM_Start+0x1a8>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a24      	ldr	r2, [pc, #144]	@ (8002f8c <HAL_TIM_PWM_Start+0x20c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d013      	beq.n	8002f28 <HAL_TIM_PWM_Start+0x1a8>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a22      	ldr	r2, [pc, #136]	@ (8002f90 <HAL_TIM_PWM_Start+0x210>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00e      	beq.n	8002f28 <HAL_TIM_PWM_Start+0x1a8>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8002f78 <HAL_TIM_PWM_Start+0x1f8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d009      	beq.n	8002f28 <HAL_TIM_PWM_Start+0x1a8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1e      	ldr	r2, [pc, #120]	@ (8002f94 <HAL_TIM_PWM_Start+0x214>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d004      	beq.n	8002f28 <HAL_TIM_PWM_Start+0x1a8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a16      	ldr	r2, [pc, #88]	@ (8002f7c <HAL_TIM_PWM_Start+0x1fc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d115      	bne.n	8002f54 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f98 <HAL_TIM_PWM_Start+0x218>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d015      	beq.n	8002f66 <HAL_TIM_PWM_Start+0x1e6>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f40:	d011      	beq.n	8002f66 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f52:	e008      	b.n	8002f66 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e000      	b.n	8002f68 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40010000 	.word	0x40010000
 8002f78:	40010400 	.word	0x40010400
 8002f7c:	40014000 	.word	0x40014000
 8002f80:	40014400 	.word	0x40014400
 8002f84:	40014800 	.word	0x40014800
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800
 8002f90:	40000c00 	.word	0x40000c00
 8002f94:	40001800 	.word	0x40001800
 8002f98:	00010007 	.word	0x00010007

08002f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e0ff      	b.n	80031ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b14      	cmp	r3, #20
 8002fc6:	f200 80f0 	bhi.w	80031aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002fca:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd0:	08003025 	.word	0x08003025
 8002fd4:	080031ab 	.word	0x080031ab
 8002fd8:	080031ab 	.word	0x080031ab
 8002fdc:	080031ab 	.word	0x080031ab
 8002fe0:	08003065 	.word	0x08003065
 8002fe4:	080031ab 	.word	0x080031ab
 8002fe8:	080031ab 	.word	0x080031ab
 8002fec:	080031ab 	.word	0x080031ab
 8002ff0:	080030a7 	.word	0x080030a7
 8002ff4:	080031ab 	.word	0x080031ab
 8002ff8:	080031ab 	.word	0x080031ab
 8002ffc:	080031ab 	.word	0x080031ab
 8003000:	080030e7 	.word	0x080030e7
 8003004:	080031ab 	.word	0x080031ab
 8003008:	080031ab 	.word	0x080031ab
 800300c:	080031ab 	.word	0x080031ab
 8003010:	08003129 	.word	0x08003129
 8003014:	080031ab 	.word	0x080031ab
 8003018:	080031ab 	.word	0x080031ab
 800301c:	080031ab 	.word	0x080031ab
 8003020:	08003169 	.word	0x08003169
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fa62 	bl	80034f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0208 	orr.w	r2, r2, #8
 800303e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0204 	bic.w	r2, r2, #4
 800304e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6999      	ldr	r1, [r3, #24]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	619a      	str	r2, [r3, #24]
      break;
 8003062:	e0a5      	b.n	80031b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fad2 	bl	8003614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800307e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800308e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6999      	ldr	r1, [r3, #24]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	021a      	lsls	r2, r3, #8
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	619a      	str	r2, [r3, #24]
      break;
 80030a4:	e084      	b.n	80031b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fb3b 	bl	8003728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69da      	ldr	r2, [r3, #28]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 0208 	orr.w	r2, r2, #8
 80030c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69da      	ldr	r2, [r3, #28]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0204 	bic.w	r2, r2, #4
 80030d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69d9      	ldr	r1, [r3, #28]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	61da      	str	r2, [r3, #28]
      break;
 80030e4:	e064      	b.n	80031b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fba3 	bl	8003838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69d9      	ldr	r1, [r3, #28]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	021a      	lsls	r2, r3, #8
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	61da      	str	r2, [r3, #28]
      break;
 8003126:	e043      	b.n	80031b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fbec 	bl	800390c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0208 	orr.w	r2, r2, #8
 8003142:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0204 	bic.w	r2, r2, #4
 8003152:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003166:	e023      	b.n	80031b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fc30 	bl	80039d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003182:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003192:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	021a      	lsls	r2, r3, #8
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80031a8:	e002      	b.n	80031b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75fb      	strb	r3, [r7, #23]
      break;
 80031ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop

080031c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_TIM_ConfigClockSource+0x1c>
 80031dc:	2302      	movs	r3, #2
 80031de:	e0dc      	b.n	800339a <HAL_TIM_ConfigClockSource+0x1d6>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	4b6a      	ldr	r3, [pc, #424]	@ (80033a4 <HAL_TIM_ConfigClockSource+0x1e0>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a64      	ldr	r2, [pc, #400]	@ (80033a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	f000 80a9 	beq.w	800336e <HAL_TIM_ConfigClockSource+0x1aa>
 800321c:	4a62      	ldr	r2, [pc, #392]	@ (80033a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	f200 80ae 	bhi.w	8003380 <HAL_TIM_ConfigClockSource+0x1bc>
 8003224:	4a61      	ldr	r2, [pc, #388]	@ (80033ac <HAL_TIM_ConfigClockSource+0x1e8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	f000 80a1 	beq.w	800336e <HAL_TIM_ConfigClockSource+0x1aa>
 800322c:	4a5f      	ldr	r2, [pc, #380]	@ (80033ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	f200 80a6 	bhi.w	8003380 <HAL_TIM_ConfigClockSource+0x1bc>
 8003234:	4a5e      	ldr	r2, [pc, #376]	@ (80033b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003236:	4293      	cmp	r3, r2
 8003238:	f000 8099 	beq.w	800336e <HAL_TIM_ConfigClockSource+0x1aa>
 800323c:	4a5c      	ldr	r2, [pc, #368]	@ (80033b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800323e:	4293      	cmp	r3, r2
 8003240:	f200 809e 	bhi.w	8003380 <HAL_TIM_ConfigClockSource+0x1bc>
 8003244:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003248:	f000 8091 	beq.w	800336e <HAL_TIM_ConfigClockSource+0x1aa>
 800324c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003250:	f200 8096 	bhi.w	8003380 <HAL_TIM_ConfigClockSource+0x1bc>
 8003254:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003258:	f000 8089 	beq.w	800336e <HAL_TIM_ConfigClockSource+0x1aa>
 800325c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003260:	f200 808e 	bhi.w	8003380 <HAL_TIM_ConfigClockSource+0x1bc>
 8003264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003268:	d03e      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0x124>
 800326a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800326e:	f200 8087 	bhi.w	8003380 <HAL_TIM_ConfigClockSource+0x1bc>
 8003272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003276:	f000 8086 	beq.w	8003386 <HAL_TIM_ConfigClockSource+0x1c2>
 800327a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800327e:	d87f      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x1bc>
 8003280:	2b70      	cmp	r3, #112	@ 0x70
 8003282:	d01a      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0xf6>
 8003284:	2b70      	cmp	r3, #112	@ 0x70
 8003286:	d87b      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x1bc>
 8003288:	2b60      	cmp	r3, #96	@ 0x60
 800328a:	d050      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x16a>
 800328c:	2b60      	cmp	r3, #96	@ 0x60
 800328e:	d877      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x1bc>
 8003290:	2b50      	cmp	r3, #80	@ 0x50
 8003292:	d03c      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x14a>
 8003294:	2b50      	cmp	r3, #80	@ 0x50
 8003296:	d873      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x1bc>
 8003298:	2b40      	cmp	r3, #64	@ 0x40
 800329a:	d058      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x18a>
 800329c:	2b40      	cmp	r3, #64	@ 0x40
 800329e:	d86f      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x1bc>
 80032a0:	2b30      	cmp	r3, #48	@ 0x30
 80032a2:	d064      	beq.n	800336e <HAL_TIM_ConfigClockSource+0x1aa>
 80032a4:	2b30      	cmp	r3, #48	@ 0x30
 80032a6:	d86b      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x1bc>
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d060      	beq.n	800336e <HAL_TIM_ConfigClockSource+0x1aa>
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d867      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x1bc>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d05c      	beq.n	800336e <HAL_TIM_ConfigClockSource+0x1aa>
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d05a      	beq.n	800336e <HAL_TIM_ConfigClockSource+0x1aa>
 80032b8:	e062      	b.n	8003380 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ca:	f000 fc67 	bl	8003b9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	609a      	str	r2, [r3, #8]
      break;
 80032e6:	e04f      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032f8:	f000 fc50 	bl	8003b9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800330a:	609a      	str	r2, [r3, #8]
      break;
 800330c:	e03c      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800331a:	461a      	mov	r2, r3
 800331c:	f000 fbc0 	bl	8003aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2150      	movs	r1, #80	@ 0x50
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fc1a 	bl	8003b60 <TIM_ITRx_SetConfig>
      break;
 800332c:	e02c      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800333a:	461a      	mov	r2, r3
 800333c:	f000 fbdf 	bl	8003afe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2160      	movs	r1, #96	@ 0x60
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fc0a 	bl	8003b60 <TIM_ITRx_SetConfig>
      break;
 800334c:	e01c      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800335a:	461a      	mov	r2, r3
 800335c:	f000 fba0 	bl	8003aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2140      	movs	r1, #64	@ 0x40
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fbfa 	bl	8003b60 <TIM_ITRx_SetConfig>
      break;
 800336c:	e00c      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4619      	mov	r1, r3
 8003378:	4610      	mov	r0, r2
 800337a:	f000 fbf1 	bl	8003b60 <TIM_ITRx_SetConfig>
      break;
 800337e:	e003      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      break;
 8003384:	e000      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8003386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003398:	7bfb      	ldrb	r3, [r7, #15]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	ffceff88 	.word	0xffceff88
 80033a8:	00100040 	.word	0x00100040
 80033ac:	00100030 	.word	0x00100030
 80033b0:	00100020 	.word	0x00100020

080033b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a43      	ldr	r2, [pc, #268]	@ (80034d4 <TIM_Base_SetConfig+0x120>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d2:	d00f      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a40      	ldr	r2, [pc, #256]	@ (80034d8 <TIM_Base_SetConfig+0x124>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00b      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a3f      	ldr	r2, [pc, #252]	@ (80034dc <TIM_Base_SetConfig+0x128>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a3e      	ldr	r2, [pc, #248]	@ (80034e0 <TIM_Base_SetConfig+0x12c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_Base_SetConfig+0x40>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a3d      	ldr	r2, [pc, #244]	@ (80034e4 <TIM_Base_SetConfig+0x130>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d108      	bne.n	8003406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a32      	ldr	r2, [pc, #200]	@ (80034d4 <TIM_Base_SetConfig+0x120>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01f      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003414:	d01b      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a2f      	ldr	r2, [pc, #188]	@ (80034d8 <TIM_Base_SetConfig+0x124>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d017      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a2e      	ldr	r2, [pc, #184]	@ (80034dc <TIM_Base_SetConfig+0x128>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a2d      	ldr	r2, [pc, #180]	@ (80034e0 <TIM_Base_SetConfig+0x12c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00f      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a2c      	ldr	r2, [pc, #176]	@ (80034e4 <TIM_Base_SetConfig+0x130>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00b      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a2b      	ldr	r2, [pc, #172]	@ (80034e8 <TIM_Base_SetConfig+0x134>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d007      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a2a      	ldr	r2, [pc, #168]	@ (80034ec <TIM_Base_SetConfig+0x138>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d003      	beq.n	800344e <TIM_Base_SetConfig+0x9a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a29      	ldr	r2, [pc, #164]	@ (80034f0 <TIM_Base_SetConfig+0x13c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d108      	bne.n	8003460 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a14      	ldr	r2, [pc, #80]	@ (80034d4 <TIM_Base_SetConfig+0x120>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00f      	beq.n	80034a6 <TIM_Base_SetConfig+0xf2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a16      	ldr	r2, [pc, #88]	@ (80034e4 <TIM_Base_SetConfig+0x130>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00b      	beq.n	80034a6 <TIM_Base_SetConfig+0xf2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a15      	ldr	r2, [pc, #84]	@ (80034e8 <TIM_Base_SetConfig+0x134>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d007      	beq.n	80034a6 <TIM_Base_SetConfig+0xf2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a14      	ldr	r2, [pc, #80]	@ (80034ec <TIM_Base_SetConfig+0x138>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_Base_SetConfig+0xf2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a13      	ldr	r2, [pc, #76]	@ (80034f0 <TIM_Base_SetConfig+0x13c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d103      	bne.n	80034ae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f043 0204 	orr.w	r2, r3, #4
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	601a      	str	r2, [r3, #0]
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40010000 	.word	0x40010000
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800
 80034e0:	40000c00 	.word	0x40000c00
 80034e4:	40010400 	.word	0x40010400
 80034e8:	40014000 	.word	0x40014000
 80034ec:	40014400 	.word	0x40014400
 80034f0:	40014800 	.word	0x40014800

080034f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f023 0201 	bic.w	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4b37      	ldr	r3, [pc, #220]	@ (80035fc <TIM_OC1_SetConfig+0x108>)
 8003520:	4013      	ands	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f023 0302 	bic.w	r3, r3, #2
 800353c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a2d      	ldr	r2, [pc, #180]	@ (8003600 <TIM_OC1_SetConfig+0x10c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00f      	beq.n	8003570 <TIM_OC1_SetConfig+0x7c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a2c      	ldr	r2, [pc, #176]	@ (8003604 <TIM_OC1_SetConfig+0x110>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00b      	beq.n	8003570 <TIM_OC1_SetConfig+0x7c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a2b      	ldr	r2, [pc, #172]	@ (8003608 <TIM_OC1_SetConfig+0x114>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d007      	beq.n	8003570 <TIM_OC1_SetConfig+0x7c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a2a      	ldr	r2, [pc, #168]	@ (800360c <TIM_OC1_SetConfig+0x118>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d003      	beq.n	8003570 <TIM_OC1_SetConfig+0x7c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a29      	ldr	r2, [pc, #164]	@ (8003610 <TIM_OC1_SetConfig+0x11c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d10c      	bne.n	800358a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f023 0308 	bic.w	r3, r3, #8
 8003576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f023 0304 	bic.w	r3, r3, #4
 8003588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a1c      	ldr	r2, [pc, #112]	@ (8003600 <TIM_OC1_SetConfig+0x10c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00f      	beq.n	80035b2 <TIM_OC1_SetConfig+0xbe>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1b      	ldr	r2, [pc, #108]	@ (8003604 <TIM_OC1_SetConfig+0x110>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00b      	beq.n	80035b2 <TIM_OC1_SetConfig+0xbe>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a1a      	ldr	r2, [pc, #104]	@ (8003608 <TIM_OC1_SetConfig+0x114>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d007      	beq.n	80035b2 <TIM_OC1_SetConfig+0xbe>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a19      	ldr	r2, [pc, #100]	@ (800360c <TIM_OC1_SetConfig+0x118>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d003      	beq.n	80035b2 <TIM_OC1_SetConfig+0xbe>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a18      	ldr	r2, [pc, #96]	@ (8003610 <TIM_OC1_SetConfig+0x11c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d111      	bne.n	80035d6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	621a      	str	r2, [r3, #32]
}
 80035f0:	bf00      	nop
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	fffeff8f 	.word	0xfffeff8f
 8003600:	40010000 	.word	0x40010000
 8003604:	40010400 	.word	0x40010400
 8003608:	40014000 	.word	0x40014000
 800360c:	40014400 	.word	0x40014400
 8003610:	40014800 	.word	0x40014800

08003614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f023 0210 	bic.w	r2, r3, #16
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4b34      	ldr	r3, [pc, #208]	@ (8003710 <TIM_OC2_SetConfig+0xfc>)
 8003640:	4013      	ands	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800364a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0320 	bic.w	r3, r3, #32
 800365e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a29      	ldr	r2, [pc, #164]	@ (8003714 <TIM_OC2_SetConfig+0x100>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d003      	beq.n	800367c <TIM_OC2_SetConfig+0x68>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a28      	ldr	r2, [pc, #160]	@ (8003718 <TIM_OC2_SetConfig+0x104>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d10d      	bne.n	8003698 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003696:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1e      	ldr	r2, [pc, #120]	@ (8003714 <TIM_OC2_SetConfig+0x100>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00f      	beq.n	80036c0 <TIM_OC2_SetConfig+0xac>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003718 <TIM_OC2_SetConfig+0x104>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00b      	beq.n	80036c0 <TIM_OC2_SetConfig+0xac>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a1c      	ldr	r2, [pc, #112]	@ (800371c <TIM_OC2_SetConfig+0x108>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d007      	beq.n	80036c0 <TIM_OC2_SetConfig+0xac>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003720 <TIM_OC2_SetConfig+0x10c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d003      	beq.n	80036c0 <TIM_OC2_SetConfig+0xac>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003724 <TIM_OC2_SetConfig+0x110>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d113      	bne.n	80036e8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	feff8fff 	.word	0xfeff8fff
 8003714:	40010000 	.word	0x40010000
 8003718:	40010400 	.word	0x40010400
 800371c:	40014000 	.word	0x40014000
 8003720:	40014400 	.word	0x40014400
 8003724:	40014800 	.word	0x40014800

08003728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4b33      	ldr	r3, [pc, #204]	@ (8003820 <TIM_OC3_SetConfig+0xf8>)
 8003754:	4013      	ands	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0303 	bic.w	r3, r3, #3
 800375e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a28      	ldr	r2, [pc, #160]	@ (8003824 <TIM_OC3_SetConfig+0xfc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d003      	beq.n	800378e <TIM_OC3_SetConfig+0x66>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a27      	ldr	r2, [pc, #156]	@ (8003828 <TIM_OC3_SetConfig+0x100>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10d      	bne.n	80037aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003824 <TIM_OC3_SetConfig+0xfc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00f      	beq.n	80037d2 <TIM_OC3_SetConfig+0xaa>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003828 <TIM_OC3_SetConfig+0x100>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00b      	beq.n	80037d2 <TIM_OC3_SetConfig+0xaa>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a1b      	ldr	r2, [pc, #108]	@ (800382c <TIM_OC3_SetConfig+0x104>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d007      	beq.n	80037d2 <TIM_OC3_SetConfig+0xaa>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003830 <TIM_OC3_SetConfig+0x108>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d003      	beq.n	80037d2 <TIM_OC3_SetConfig+0xaa>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a19      	ldr	r2, [pc, #100]	@ (8003834 <TIM_OC3_SetConfig+0x10c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d113      	bne.n	80037fa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	621a      	str	r2, [r3, #32]
}
 8003814:	bf00      	nop
 8003816:	371c      	adds	r7, #28
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	fffeff8f 	.word	0xfffeff8f
 8003824:	40010000 	.word	0x40010000
 8003828:	40010400 	.word	0x40010400
 800382c:	40014000 	.word	0x40014000
 8003830:	40014400 	.word	0x40014400
 8003834:	40014800 	.word	0x40014800

08003838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4b24      	ldr	r3, [pc, #144]	@ (80038f4 <TIM_OC4_SetConfig+0xbc>)
 8003864:	4013      	ands	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800386e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	031b      	lsls	r3, r3, #12
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a19      	ldr	r2, [pc, #100]	@ (80038f8 <TIM_OC4_SetConfig+0xc0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00f      	beq.n	80038b8 <TIM_OC4_SetConfig+0x80>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a18      	ldr	r2, [pc, #96]	@ (80038fc <TIM_OC4_SetConfig+0xc4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_OC4_SetConfig+0x80>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a17      	ldr	r2, [pc, #92]	@ (8003900 <TIM_OC4_SetConfig+0xc8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <TIM_OC4_SetConfig+0x80>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a16      	ldr	r2, [pc, #88]	@ (8003904 <TIM_OC4_SetConfig+0xcc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_OC4_SetConfig+0x80>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a15      	ldr	r2, [pc, #84]	@ (8003908 <TIM_OC4_SetConfig+0xd0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d109      	bne.n	80038cc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	019b      	lsls	r3, r3, #6
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	feff8fff 	.word	0xfeff8fff
 80038f8:	40010000 	.word	0x40010000
 80038fc:	40010400 	.word	0x40010400
 8003900:	40014000 	.word	0x40014000
 8003904:	40014400 	.word	0x40014400
 8003908:	40014800 	.word	0x40014800

0800390c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4b21      	ldr	r3, [pc, #132]	@ (80039bc <TIM_OC5_SetConfig+0xb0>)
 8003938:	4013      	ands	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800394c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	041b      	lsls	r3, r3, #16
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a18      	ldr	r2, [pc, #96]	@ (80039c0 <TIM_OC5_SetConfig+0xb4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00f      	beq.n	8003982 <TIM_OC5_SetConfig+0x76>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a17      	ldr	r2, [pc, #92]	@ (80039c4 <TIM_OC5_SetConfig+0xb8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00b      	beq.n	8003982 <TIM_OC5_SetConfig+0x76>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a16      	ldr	r2, [pc, #88]	@ (80039c8 <TIM_OC5_SetConfig+0xbc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d007      	beq.n	8003982 <TIM_OC5_SetConfig+0x76>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a15      	ldr	r2, [pc, #84]	@ (80039cc <TIM_OC5_SetConfig+0xc0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_OC5_SetConfig+0x76>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a14      	ldr	r2, [pc, #80]	@ (80039d0 <TIM_OC5_SetConfig+0xc4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d109      	bne.n	8003996 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003988:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	021b      	lsls	r3, r3, #8
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	621a      	str	r2, [r3, #32]
}
 80039b0:	bf00      	nop
 80039b2:	371c      	adds	r7, #28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	fffeff8f 	.word	0xfffeff8f
 80039c0:	40010000 	.word	0x40010000
 80039c4:	40010400 	.word	0x40010400
 80039c8:	40014000 	.word	0x40014000
 80039cc:	40014400 	.word	0x40014400
 80039d0:	40014800 	.word	0x40014800

080039d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4b22      	ldr	r3, [pc, #136]	@ (8003a88 <TIM_OC6_SetConfig+0xb4>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	051b      	lsls	r3, r3, #20
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a19      	ldr	r2, [pc, #100]	@ (8003a8c <TIM_OC6_SetConfig+0xb8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00f      	beq.n	8003a4c <TIM_OC6_SetConfig+0x78>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a18      	ldr	r2, [pc, #96]	@ (8003a90 <TIM_OC6_SetConfig+0xbc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00b      	beq.n	8003a4c <TIM_OC6_SetConfig+0x78>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a17      	ldr	r2, [pc, #92]	@ (8003a94 <TIM_OC6_SetConfig+0xc0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_OC6_SetConfig+0x78>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a16      	ldr	r2, [pc, #88]	@ (8003a98 <TIM_OC6_SetConfig+0xc4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_OC6_SetConfig+0x78>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a15      	ldr	r2, [pc, #84]	@ (8003a9c <TIM_OC6_SetConfig+0xc8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d109      	bne.n	8003a60 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	029b      	lsls	r3, r3, #10
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	feff8fff 	.word	0xfeff8fff
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40010400 	.word	0x40010400
 8003a94:	40014000 	.word	0x40014000
 8003a98:	40014400 	.word	0x40014400
 8003a9c:	40014800 	.word	0x40014800

08003aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f023 0201 	bic.w	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f023 030a 	bic.w	r3, r3, #10
 8003adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	621a      	str	r2, [r3, #32]
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b087      	sub	sp, #28
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f023 0210 	bic.w	r2, r3, #16
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	031b      	lsls	r3, r3, #12
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
	...

08003b60 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <TIM_ITRx_SetConfig+0x38>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f043 0307 	orr.w	r3, r3, #7
 8003b82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	609a      	str	r2, [r3, #8]
}
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	ffcfff8f 	.word	0xffcfff8f

08003b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	021a      	lsls	r2, r3, #8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	609a      	str	r2, [r3, #8]
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	2201      	movs	r2, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a1a      	ldr	r2, [r3, #32]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	401a      	ands	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a1a      	ldr	r2, [r3, #32]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	431a      	orrs	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	621a      	str	r2, [r3, #32]
}
 8003c1a:	bf00      	nop
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e06d      	b.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a30      	ldr	r2, [pc, #192]	@ (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d108      	bne.n	8003c86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a20      	ldr	r2, [pc, #128]	@ (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d022      	beq.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb2:	d01d      	beq.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d018      	beq.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a15      	ldr	r2, [pc, #84]	@ (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d009      	beq.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a15      	ldr	r2, [pc, #84]	@ (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d10c      	bne.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	40010000 	.word	0x40010000
 8003d2c:	40010400 	.word	0x40010400
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800
 8003d38:	40000c00 	.word	0x40000c00
 8003d3c:	40001800 	.word	0x40001800
 8003d40:	40014000 	.word	0x40014000

08003d44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e073      	b.n	8003e48 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a19      	ldr	r2, [pc, #100]	@ (8003e54 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d004      	beq.n	8003dfc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a18      	ldr	r2, [pc, #96]	@ (8003e58 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d11c      	bne.n	8003e36 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e06:	051b      	lsls	r3, r3, #20
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40010000 	.word	0x40010000
 8003e58:	40010400 	.word	0x40010400

08003e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e042      	b.n	8003ef4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d106      	bne.n	8003e86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f83b 	bl	8003efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2224      	movs	r2, #36	@ 0x24
 8003e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0201 	bic.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fe9e 	bl	8004be8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f82f 	bl	8003f10 <UART_SetConfig>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e01b      	b.n	8003ef4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 ff1d 	bl	8004d2c <UART_CheckIdleState>
 8003ef2:	4603      	mov	r3, r0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f14:	b092      	sub	sp, #72	@ 0x48
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4bbe      	ldr	r3, [pc, #760]	@ (8004238 <UART_SetConfig+0x328>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4ab3      	ldr	r2, [pc, #716]	@ (800423c <UART_SetConfig+0x32c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d004      	beq.n	8003f7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	4baf      	ldr	r3, [pc, #700]	@ (8004240 <UART_SetConfig+0x330>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f96:	f023 010f 	bic.w	r1, r3, #15
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4aa6      	ldr	r2, [pc, #664]	@ (8004244 <UART_SetConfig+0x334>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d177      	bne.n	80040a0 <UART_SetConfig+0x190>
 8003fb0:	4ba5      	ldr	r3, [pc, #660]	@ (8004248 <UART_SetConfig+0x338>)
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fb8:	2b28      	cmp	r3, #40	@ 0x28
 8003fba:	d86d      	bhi.n	8004098 <UART_SetConfig+0x188>
 8003fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc4 <UART_SetConfig+0xb4>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08004069 	.word	0x08004069
 8003fc8:	08004099 	.word	0x08004099
 8003fcc:	08004099 	.word	0x08004099
 8003fd0:	08004099 	.word	0x08004099
 8003fd4:	08004099 	.word	0x08004099
 8003fd8:	08004099 	.word	0x08004099
 8003fdc:	08004099 	.word	0x08004099
 8003fe0:	08004099 	.word	0x08004099
 8003fe4:	08004071 	.word	0x08004071
 8003fe8:	08004099 	.word	0x08004099
 8003fec:	08004099 	.word	0x08004099
 8003ff0:	08004099 	.word	0x08004099
 8003ff4:	08004099 	.word	0x08004099
 8003ff8:	08004099 	.word	0x08004099
 8003ffc:	08004099 	.word	0x08004099
 8004000:	08004099 	.word	0x08004099
 8004004:	08004079 	.word	0x08004079
 8004008:	08004099 	.word	0x08004099
 800400c:	08004099 	.word	0x08004099
 8004010:	08004099 	.word	0x08004099
 8004014:	08004099 	.word	0x08004099
 8004018:	08004099 	.word	0x08004099
 800401c:	08004099 	.word	0x08004099
 8004020:	08004099 	.word	0x08004099
 8004024:	08004081 	.word	0x08004081
 8004028:	08004099 	.word	0x08004099
 800402c:	08004099 	.word	0x08004099
 8004030:	08004099 	.word	0x08004099
 8004034:	08004099 	.word	0x08004099
 8004038:	08004099 	.word	0x08004099
 800403c:	08004099 	.word	0x08004099
 8004040:	08004099 	.word	0x08004099
 8004044:	08004089 	.word	0x08004089
 8004048:	08004099 	.word	0x08004099
 800404c:	08004099 	.word	0x08004099
 8004050:	08004099 	.word	0x08004099
 8004054:	08004099 	.word	0x08004099
 8004058:	08004099 	.word	0x08004099
 800405c:	08004099 	.word	0x08004099
 8004060:	08004099 	.word	0x08004099
 8004064:	08004091 	.word	0x08004091
 8004068:	2301      	movs	r3, #1
 800406a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800406e:	e326      	b.n	80046be <UART_SetConfig+0x7ae>
 8004070:	2304      	movs	r3, #4
 8004072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004076:	e322      	b.n	80046be <UART_SetConfig+0x7ae>
 8004078:	2308      	movs	r3, #8
 800407a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800407e:	e31e      	b.n	80046be <UART_SetConfig+0x7ae>
 8004080:	2310      	movs	r3, #16
 8004082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004086:	e31a      	b.n	80046be <UART_SetConfig+0x7ae>
 8004088:	2320      	movs	r3, #32
 800408a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800408e:	e316      	b.n	80046be <UART_SetConfig+0x7ae>
 8004090:	2340      	movs	r3, #64	@ 0x40
 8004092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004096:	e312      	b.n	80046be <UART_SetConfig+0x7ae>
 8004098:	2380      	movs	r3, #128	@ 0x80
 800409a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800409e:	e30e      	b.n	80046be <UART_SetConfig+0x7ae>
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a69      	ldr	r2, [pc, #420]	@ (800424c <UART_SetConfig+0x33c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d130      	bne.n	800410c <UART_SetConfig+0x1fc>
 80040aa:	4b67      	ldr	r3, [pc, #412]	@ (8004248 <UART_SetConfig+0x338>)
 80040ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	2b05      	cmp	r3, #5
 80040b4:	d826      	bhi.n	8004104 <UART_SetConfig+0x1f4>
 80040b6:	a201      	add	r2, pc, #4	@ (adr r2, 80040bc <UART_SetConfig+0x1ac>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	080040d5 	.word	0x080040d5
 80040c0:	080040dd 	.word	0x080040dd
 80040c4:	080040e5 	.word	0x080040e5
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	080040f5 	.word	0x080040f5
 80040d0:	080040fd 	.word	0x080040fd
 80040d4:	2300      	movs	r3, #0
 80040d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040da:	e2f0      	b.n	80046be <UART_SetConfig+0x7ae>
 80040dc:	2304      	movs	r3, #4
 80040de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040e2:	e2ec      	b.n	80046be <UART_SetConfig+0x7ae>
 80040e4:	2308      	movs	r3, #8
 80040e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040ea:	e2e8      	b.n	80046be <UART_SetConfig+0x7ae>
 80040ec:	2310      	movs	r3, #16
 80040ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040f2:	e2e4      	b.n	80046be <UART_SetConfig+0x7ae>
 80040f4:	2320      	movs	r3, #32
 80040f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80040fa:	e2e0      	b.n	80046be <UART_SetConfig+0x7ae>
 80040fc:	2340      	movs	r3, #64	@ 0x40
 80040fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004102:	e2dc      	b.n	80046be <UART_SetConfig+0x7ae>
 8004104:	2380      	movs	r3, #128	@ 0x80
 8004106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800410a:	e2d8      	b.n	80046be <UART_SetConfig+0x7ae>
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a4f      	ldr	r2, [pc, #316]	@ (8004250 <UART_SetConfig+0x340>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d130      	bne.n	8004178 <UART_SetConfig+0x268>
 8004116:	4b4c      	ldr	r3, [pc, #304]	@ (8004248 <UART_SetConfig+0x338>)
 8004118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	2b05      	cmp	r3, #5
 8004120:	d826      	bhi.n	8004170 <UART_SetConfig+0x260>
 8004122:	a201      	add	r2, pc, #4	@ (adr r2, 8004128 <UART_SetConfig+0x218>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	08004141 	.word	0x08004141
 800412c:	08004149 	.word	0x08004149
 8004130:	08004151 	.word	0x08004151
 8004134:	08004159 	.word	0x08004159
 8004138:	08004161 	.word	0x08004161
 800413c:	08004169 	.word	0x08004169
 8004140:	2300      	movs	r3, #0
 8004142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004146:	e2ba      	b.n	80046be <UART_SetConfig+0x7ae>
 8004148:	2304      	movs	r3, #4
 800414a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800414e:	e2b6      	b.n	80046be <UART_SetConfig+0x7ae>
 8004150:	2308      	movs	r3, #8
 8004152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004156:	e2b2      	b.n	80046be <UART_SetConfig+0x7ae>
 8004158:	2310      	movs	r3, #16
 800415a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800415e:	e2ae      	b.n	80046be <UART_SetConfig+0x7ae>
 8004160:	2320      	movs	r3, #32
 8004162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004166:	e2aa      	b.n	80046be <UART_SetConfig+0x7ae>
 8004168:	2340      	movs	r3, #64	@ 0x40
 800416a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800416e:	e2a6      	b.n	80046be <UART_SetConfig+0x7ae>
 8004170:	2380      	movs	r3, #128	@ 0x80
 8004172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004176:	e2a2      	b.n	80046be <UART_SetConfig+0x7ae>
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a35      	ldr	r2, [pc, #212]	@ (8004254 <UART_SetConfig+0x344>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d130      	bne.n	80041e4 <UART_SetConfig+0x2d4>
 8004182:	4b31      	ldr	r3, [pc, #196]	@ (8004248 <UART_SetConfig+0x338>)
 8004184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	2b05      	cmp	r3, #5
 800418c:	d826      	bhi.n	80041dc <UART_SetConfig+0x2cc>
 800418e:	a201      	add	r2, pc, #4	@ (adr r2, 8004194 <UART_SetConfig+0x284>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041ad 	.word	0x080041ad
 8004198:	080041b5 	.word	0x080041b5
 800419c:	080041bd 	.word	0x080041bd
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	080041cd 	.word	0x080041cd
 80041a8:	080041d5 	.word	0x080041d5
 80041ac:	2300      	movs	r3, #0
 80041ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041b2:	e284      	b.n	80046be <UART_SetConfig+0x7ae>
 80041b4:	2304      	movs	r3, #4
 80041b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041ba:	e280      	b.n	80046be <UART_SetConfig+0x7ae>
 80041bc:	2308      	movs	r3, #8
 80041be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041c2:	e27c      	b.n	80046be <UART_SetConfig+0x7ae>
 80041c4:	2310      	movs	r3, #16
 80041c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041ca:	e278      	b.n	80046be <UART_SetConfig+0x7ae>
 80041cc:	2320      	movs	r3, #32
 80041ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041d2:	e274      	b.n	80046be <UART_SetConfig+0x7ae>
 80041d4:	2340      	movs	r3, #64	@ 0x40
 80041d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041da:	e270      	b.n	80046be <UART_SetConfig+0x7ae>
 80041dc:	2380      	movs	r3, #128	@ 0x80
 80041de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80041e2:	e26c      	b.n	80046be <UART_SetConfig+0x7ae>
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004258 <UART_SetConfig+0x348>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d142      	bne.n	8004274 <UART_SetConfig+0x364>
 80041ee:	4b16      	ldr	r3, [pc, #88]	@ (8004248 <UART_SetConfig+0x338>)
 80041f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d838      	bhi.n	800426c <UART_SetConfig+0x35c>
 80041fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004200 <UART_SetConfig+0x2f0>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	08004219 	.word	0x08004219
 8004204:	08004221 	.word	0x08004221
 8004208:	08004229 	.word	0x08004229
 800420c:	08004231 	.word	0x08004231
 8004210:	0800425d 	.word	0x0800425d
 8004214:	08004265 	.word	0x08004265
 8004218:	2300      	movs	r3, #0
 800421a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800421e:	e24e      	b.n	80046be <UART_SetConfig+0x7ae>
 8004220:	2304      	movs	r3, #4
 8004222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004226:	e24a      	b.n	80046be <UART_SetConfig+0x7ae>
 8004228:	2308      	movs	r3, #8
 800422a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800422e:	e246      	b.n	80046be <UART_SetConfig+0x7ae>
 8004230:	2310      	movs	r3, #16
 8004232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004236:	e242      	b.n	80046be <UART_SetConfig+0x7ae>
 8004238:	cfff69f3 	.word	0xcfff69f3
 800423c:	58000c00 	.word	0x58000c00
 8004240:	11fff4ff 	.word	0x11fff4ff
 8004244:	40011000 	.word	0x40011000
 8004248:	58024400 	.word	0x58024400
 800424c:	40004400 	.word	0x40004400
 8004250:	40004800 	.word	0x40004800
 8004254:	40004c00 	.word	0x40004c00
 8004258:	40005000 	.word	0x40005000
 800425c:	2320      	movs	r3, #32
 800425e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004262:	e22c      	b.n	80046be <UART_SetConfig+0x7ae>
 8004264:	2340      	movs	r3, #64	@ 0x40
 8004266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800426a:	e228      	b.n	80046be <UART_SetConfig+0x7ae>
 800426c:	2380      	movs	r3, #128	@ 0x80
 800426e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004272:	e224      	b.n	80046be <UART_SetConfig+0x7ae>
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4ab1      	ldr	r2, [pc, #708]	@ (8004540 <UART_SetConfig+0x630>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d176      	bne.n	800436c <UART_SetConfig+0x45c>
 800427e:	4bb1      	ldr	r3, [pc, #708]	@ (8004544 <UART_SetConfig+0x634>)
 8004280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004282:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004286:	2b28      	cmp	r3, #40	@ 0x28
 8004288:	d86c      	bhi.n	8004364 <UART_SetConfig+0x454>
 800428a:	a201      	add	r2, pc, #4	@ (adr r2, 8004290 <UART_SetConfig+0x380>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	08004335 	.word	0x08004335
 8004294:	08004365 	.word	0x08004365
 8004298:	08004365 	.word	0x08004365
 800429c:	08004365 	.word	0x08004365
 80042a0:	08004365 	.word	0x08004365
 80042a4:	08004365 	.word	0x08004365
 80042a8:	08004365 	.word	0x08004365
 80042ac:	08004365 	.word	0x08004365
 80042b0:	0800433d 	.word	0x0800433d
 80042b4:	08004365 	.word	0x08004365
 80042b8:	08004365 	.word	0x08004365
 80042bc:	08004365 	.word	0x08004365
 80042c0:	08004365 	.word	0x08004365
 80042c4:	08004365 	.word	0x08004365
 80042c8:	08004365 	.word	0x08004365
 80042cc:	08004365 	.word	0x08004365
 80042d0:	08004345 	.word	0x08004345
 80042d4:	08004365 	.word	0x08004365
 80042d8:	08004365 	.word	0x08004365
 80042dc:	08004365 	.word	0x08004365
 80042e0:	08004365 	.word	0x08004365
 80042e4:	08004365 	.word	0x08004365
 80042e8:	08004365 	.word	0x08004365
 80042ec:	08004365 	.word	0x08004365
 80042f0:	0800434d 	.word	0x0800434d
 80042f4:	08004365 	.word	0x08004365
 80042f8:	08004365 	.word	0x08004365
 80042fc:	08004365 	.word	0x08004365
 8004300:	08004365 	.word	0x08004365
 8004304:	08004365 	.word	0x08004365
 8004308:	08004365 	.word	0x08004365
 800430c:	08004365 	.word	0x08004365
 8004310:	08004355 	.word	0x08004355
 8004314:	08004365 	.word	0x08004365
 8004318:	08004365 	.word	0x08004365
 800431c:	08004365 	.word	0x08004365
 8004320:	08004365 	.word	0x08004365
 8004324:	08004365 	.word	0x08004365
 8004328:	08004365 	.word	0x08004365
 800432c:	08004365 	.word	0x08004365
 8004330:	0800435d 	.word	0x0800435d
 8004334:	2301      	movs	r3, #1
 8004336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800433a:	e1c0      	b.n	80046be <UART_SetConfig+0x7ae>
 800433c:	2304      	movs	r3, #4
 800433e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004342:	e1bc      	b.n	80046be <UART_SetConfig+0x7ae>
 8004344:	2308      	movs	r3, #8
 8004346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800434a:	e1b8      	b.n	80046be <UART_SetConfig+0x7ae>
 800434c:	2310      	movs	r3, #16
 800434e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004352:	e1b4      	b.n	80046be <UART_SetConfig+0x7ae>
 8004354:	2320      	movs	r3, #32
 8004356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800435a:	e1b0      	b.n	80046be <UART_SetConfig+0x7ae>
 800435c:	2340      	movs	r3, #64	@ 0x40
 800435e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004362:	e1ac      	b.n	80046be <UART_SetConfig+0x7ae>
 8004364:	2380      	movs	r3, #128	@ 0x80
 8004366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800436a:	e1a8      	b.n	80046be <UART_SetConfig+0x7ae>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a75      	ldr	r2, [pc, #468]	@ (8004548 <UART_SetConfig+0x638>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d130      	bne.n	80043d8 <UART_SetConfig+0x4c8>
 8004376:	4b73      	ldr	r3, [pc, #460]	@ (8004544 <UART_SetConfig+0x634>)
 8004378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	2b05      	cmp	r3, #5
 8004380:	d826      	bhi.n	80043d0 <UART_SetConfig+0x4c0>
 8004382:	a201      	add	r2, pc, #4	@ (adr r2, 8004388 <UART_SetConfig+0x478>)
 8004384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004388:	080043a1 	.word	0x080043a1
 800438c:	080043a9 	.word	0x080043a9
 8004390:	080043b1 	.word	0x080043b1
 8004394:	080043b9 	.word	0x080043b9
 8004398:	080043c1 	.word	0x080043c1
 800439c:	080043c9 	.word	0x080043c9
 80043a0:	2300      	movs	r3, #0
 80043a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043a6:	e18a      	b.n	80046be <UART_SetConfig+0x7ae>
 80043a8:	2304      	movs	r3, #4
 80043aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ae:	e186      	b.n	80046be <UART_SetConfig+0x7ae>
 80043b0:	2308      	movs	r3, #8
 80043b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043b6:	e182      	b.n	80046be <UART_SetConfig+0x7ae>
 80043b8:	2310      	movs	r3, #16
 80043ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043be:	e17e      	b.n	80046be <UART_SetConfig+0x7ae>
 80043c0:	2320      	movs	r3, #32
 80043c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043c6:	e17a      	b.n	80046be <UART_SetConfig+0x7ae>
 80043c8:	2340      	movs	r3, #64	@ 0x40
 80043ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ce:	e176      	b.n	80046be <UART_SetConfig+0x7ae>
 80043d0:	2380      	movs	r3, #128	@ 0x80
 80043d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043d6:	e172      	b.n	80046be <UART_SetConfig+0x7ae>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a5b      	ldr	r2, [pc, #364]	@ (800454c <UART_SetConfig+0x63c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d130      	bne.n	8004444 <UART_SetConfig+0x534>
 80043e2:	4b58      	ldr	r3, [pc, #352]	@ (8004544 <UART_SetConfig+0x634>)
 80043e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	d826      	bhi.n	800443c <UART_SetConfig+0x52c>
 80043ee:	a201      	add	r2, pc, #4	@ (adr r2, 80043f4 <UART_SetConfig+0x4e4>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	0800440d 	.word	0x0800440d
 80043f8:	08004415 	.word	0x08004415
 80043fc:	0800441d 	.word	0x0800441d
 8004400:	08004425 	.word	0x08004425
 8004404:	0800442d 	.word	0x0800442d
 8004408:	08004435 	.word	0x08004435
 800440c:	2300      	movs	r3, #0
 800440e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004412:	e154      	b.n	80046be <UART_SetConfig+0x7ae>
 8004414:	2304      	movs	r3, #4
 8004416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800441a:	e150      	b.n	80046be <UART_SetConfig+0x7ae>
 800441c:	2308      	movs	r3, #8
 800441e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004422:	e14c      	b.n	80046be <UART_SetConfig+0x7ae>
 8004424:	2310      	movs	r3, #16
 8004426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800442a:	e148      	b.n	80046be <UART_SetConfig+0x7ae>
 800442c:	2320      	movs	r3, #32
 800442e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004432:	e144      	b.n	80046be <UART_SetConfig+0x7ae>
 8004434:	2340      	movs	r3, #64	@ 0x40
 8004436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800443a:	e140      	b.n	80046be <UART_SetConfig+0x7ae>
 800443c:	2380      	movs	r3, #128	@ 0x80
 800443e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004442:	e13c      	b.n	80046be <UART_SetConfig+0x7ae>
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a41      	ldr	r2, [pc, #260]	@ (8004550 <UART_SetConfig+0x640>)
 800444a:	4293      	cmp	r3, r2
 800444c:	f040 8082 	bne.w	8004554 <UART_SetConfig+0x644>
 8004450:	4b3c      	ldr	r3, [pc, #240]	@ (8004544 <UART_SetConfig+0x634>)
 8004452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004454:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004458:	2b28      	cmp	r3, #40	@ 0x28
 800445a:	d86d      	bhi.n	8004538 <UART_SetConfig+0x628>
 800445c:	a201      	add	r2, pc, #4	@ (adr r2, 8004464 <UART_SetConfig+0x554>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	08004509 	.word	0x08004509
 8004468:	08004539 	.word	0x08004539
 800446c:	08004539 	.word	0x08004539
 8004470:	08004539 	.word	0x08004539
 8004474:	08004539 	.word	0x08004539
 8004478:	08004539 	.word	0x08004539
 800447c:	08004539 	.word	0x08004539
 8004480:	08004539 	.word	0x08004539
 8004484:	08004511 	.word	0x08004511
 8004488:	08004539 	.word	0x08004539
 800448c:	08004539 	.word	0x08004539
 8004490:	08004539 	.word	0x08004539
 8004494:	08004539 	.word	0x08004539
 8004498:	08004539 	.word	0x08004539
 800449c:	08004539 	.word	0x08004539
 80044a0:	08004539 	.word	0x08004539
 80044a4:	08004519 	.word	0x08004519
 80044a8:	08004539 	.word	0x08004539
 80044ac:	08004539 	.word	0x08004539
 80044b0:	08004539 	.word	0x08004539
 80044b4:	08004539 	.word	0x08004539
 80044b8:	08004539 	.word	0x08004539
 80044bc:	08004539 	.word	0x08004539
 80044c0:	08004539 	.word	0x08004539
 80044c4:	08004521 	.word	0x08004521
 80044c8:	08004539 	.word	0x08004539
 80044cc:	08004539 	.word	0x08004539
 80044d0:	08004539 	.word	0x08004539
 80044d4:	08004539 	.word	0x08004539
 80044d8:	08004539 	.word	0x08004539
 80044dc:	08004539 	.word	0x08004539
 80044e0:	08004539 	.word	0x08004539
 80044e4:	08004529 	.word	0x08004529
 80044e8:	08004539 	.word	0x08004539
 80044ec:	08004539 	.word	0x08004539
 80044f0:	08004539 	.word	0x08004539
 80044f4:	08004539 	.word	0x08004539
 80044f8:	08004539 	.word	0x08004539
 80044fc:	08004539 	.word	0x08004539
 8004500:	08004539 	.word	0x08004539
 8004504:	08004531 	.word	0x08004531
 8004508:	2301      	movs	r3, #1
 800450a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800450e:	e0d6      	b.n	80046be <UART_SetConfig+0x7ae>
 8004510:	2304      	movs	r3, #4
 8004512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004516:	e0d2      	b.n	80046be <UART_SetConfig+0x7ae>
 8004518:	2308      	movs	r3, #8
 800451a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800451e:	e0ce      	b.n	80046be <UART_SetConfig+0x7ae>
 8004520:	2310      	movs	r3, #16
 8004522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004526:	e0ca      	b.n	80046be <UART_SetConfig+0x7ae>
 8004528:	2320      	movs	r3, #32
 800452a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800452e:	e0c6      	b.n	80046be <UART_SetConfig+0x7ae>
 8004530:	2340      	movs	r3, #64	@ 0x40
 8004532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004536:	e0c2      	b.n	80046be <UART_SetConfig+0x7ae>
 8004538:	2380      	movs	r3, #128	@ 0x80
 800453a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800453e:	e0be      	b.n	80046be <UART_SetConfig+0x7ae>
 8004540:	40011400 	.word	0x40011400
 8004544:	58024400 	.word	0x58024400
 8004548:	40007800 	.word	0x40007800
 800454c:	40007c00 	.word	0x40007c00
 8004550:	40011800 	.word	0x40011800
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4aad      	ldr	r2, [pc, #692]	@ (8004810 <UART_SetConfig+0x900>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d176      	bne.n	800464c <UART_SetConfig+0x73c>
 800455e:	4bad      	ldr	r3, [pc, #692]	@ (8004814 <UART_SetConfig+0x904>)
 8004560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004566:	2b28      	cmp	r3, #40	@ 0x28
 8004568:	d86c      	bhi.n	8004644 <UART_SetConfig+0x734>
 800456a:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <UART_SetConfig+0x660>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004615 	.word	0x08004615
 8004574:	08004645 	.word	0x08004645
 8004578:	08004645 	.word	0x08004645
 800457c:	08004645 	.word	0x08004645
 8004580:	08004645 	.word	0x08004645
 8004584:	08004645 	.word	0x08004645
 8004588:	08004645 	.word	0x08004645
 800458c:	08004645 	.word	0x08004645
 8004590:	0800461d 	.word	0x0800461d
 8004594:	08004645 	.word	0x08004645
 8004598:	08004645 	.word	0x08004645
 800459c:	08004645 	.word	0x08004645
 80045a0:	08004645 	.word	0x08004645
 80045a4:	08004645 	.word	0x08004645
 80045a8:	08004645 	.word	0x08004645
 80045ac:	08004645 	.word	0x08004645
 80045b0:	08004625 	.word	0x08004625
 80045b4:	08004645 	.word	0x08004645
 80045b8:	08004645 	.word	0x08004645
 80045bc:	08004645 	.word	0x08004645
 80045c0:	08004645 	.word	0x08004645
 80045c4:	08004645 	.word	0x08004645
 80045c8:	08004645 	.word	0x08004645
 80045cc:	08004645 	.word	0x08004645
 80045d0:	0800462d 	.word	0x0800462d
 80045d4:	08004645 	.word	0x08004645
 80045d8:	08004645 	.word	0x08004645
 80045dc:	08004645 	.word	0x08004645
 80045e0:	08004645 	.word	0x08004645
 80045e4:	08004645 	.word	0x08004645
 80045e8:	08004645 	.word	0x08004645
 80045ec:	08004645 	.word	0x08004645
 80045f0:	08004635 	.word	0x08004635
 80045f4:	08004645 	.word	0x08004645
 80045f8:	08004645 	.word	0x08004645
 80045fc:	08004645 	.word	0x08004645
 8004600:	08004645 	.word	0x08004645
 8004604:	08004645 	.word	0x08004645
 8004608:	08004645 	.word	0x08004645
 800460c:	08004645 	.word	0x08004645
 8004610:	0800463d 	.word	0x0800463d
 8004614:	2301      	movs	r3, #1
 8004616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800461a:	e050      	b.n	80046be <UART_SetConfig+0x7ae>
 800461c:	2304      	movs	r3, #4
 800461e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004622:	e04c      	b.n	80046be <UART_SetConfig+0x7ae>
 8004624:	2308      	movs	r3, #8
 8004626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800462a:	e048      	b.n	80046be <UART_SetConfig+0x7ae>
 800462c:	2310      	movs	r3, #16
 800462e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004632:	e044      	b.n	80046be <UART_SetConfig+0x7ae>
 8004634:	2320      	movs	r3, #32
 8004636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800463a:	e040      	b.n	80046be <UART_SetConfig+0x7ae>
 800463c:	2340      	movs	r3, #64	@ 0x40
 800463e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004642:	e03c      	b.n	80046be <UART_SetConfig+0x7ae>
 8004644:	2380      	movs	r3, #128	@ 0x80
 8004646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800464a:	e038      	b.n	80046be <UART_SetConfig+0x7ae>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a71      	ldr	r2, [pc, #452]	@ (8004818 <UART_SetConfig+0x908>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d130      	bne.n	80046b8 <UART_SetConfig+0x7a8>
 8004656:	4b6f      	ldr	r3, [pc, #444]	@ (8004814 <UART_SetConfig+0x904>)
 8004658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	2b05      	cmp	r3, #5
 8004660:	d826      	bhi.n	80046b0 <UART_SetConfig+0x7a0>
 8004662:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <UART_SetConfig+0x758>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	08004681 	.word	0x08004681
 800466c:	08004689 	.word	0x08004689
 8004670:	08004691 	.word	0x08004691
 8004674:	08004699 	.word	0x08004699
 8004678:	080046a1 	.word	0x080046a1
 800467c:	080046a9 	.word	0x080046a9
 8004680:	2302      	movs	r3, #2
 8004682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004686:	e01a      	b.n	80046be <UART_SetConfig+0x7ae>
 8004688:	2304      	movs	r3, #4
 800468a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800468e:	e016      	b.n	80046be <UART_SetConfig+0x7ae>
 8004690:	2308      	movs	r3, #8
 8004692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004696:	e012      	b.n	80046be <UART_SetConfig+0x7ae>
 8004698:	2310      	movs	r3, #16
 800469a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800469e:	e00e      	b.n	80046be <UART_SetConfig+0x7ae>
 80046a0:	2320      	movs	r3, #32
 80046a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046a6:	e00a      	b.n	80046be <UART_SetConfig+0x7ae>
 80046a8:	2340      	movs	r3, #64	@ 0x40
 80046aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ae:	e006      	b.n	80046be <UART_SetConfig+0x7ae>
 80046b0:	2380      	movs	r3, #128	@ 0x80
 80046b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046b6:	e002      	b.n	80046be <UART_SetConfig+0x7ae>
 80046b8:	2380      	movs	r3, #128	@ 0x80
 80046ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a55      	ldr	r2, [pc, #340]	@ (8004818 <UART_SetConfig+0x908>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	f040 80f8 	bne.w	80048ba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	dc46      	bgt.n	8004760 <UART_SetConfig+0x850>
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	db75      	blt.n	80047c2 <UART_SetConfig+0x8b2>
 80046d6:	3b02      	subs	r3, #2
 80046d8:	2b1e      	cmp	r3, #30
 80046da:	d872      	bhi.n	80047c2 <UART_SetConfig+0x8b2>
 80046dc:	a201      	add	r2, pc, #4	@ (adr r2, 80046e4 <UART_SetConfig+0x7d4>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	08004767 	.word	0x08004767
 80046e8:	080047c3 	.word	0x080047c3
 80046ec:	0800476f 	.word	0x0800476f
 80046f0:	080047c3 	.word	0x080047c3
 80046f4:	080047c3 	.word	0x080047c3
 80046f8:	080047c3 	.word	0x080047c3
 80046fc:	0800477f 	.word	0x0800477f
 8004700:	080047c3 	.word	0x080047c3
 8004704:	080047c3 	.word	0x080047c3
 8004708:	080047c3 	.word	0x080047c3
 800470c:	080047c3 	.word	0x080047c3
 8004710:	080047c3 	.word	0x080047c3
 8004714:	080047c3 	.word	0x080047c3
 8004718:	080047c3 	.word	0x080047c3
 800471c:	0800478f 	.word	0x0800478f
 8004720:	080047c3 	.word	0x080047c3
 8004724:	080047c3 	.word	0x080047c3
 8004728:	080047c3 	.word	0x080047c3
 800472c:	080047c3 	.word	0x080047c3
 8004730:	080047c3 	.word	0x080047c3
 8004734:	080047c3 	.word	0x080047c3
 8004738:	080047c3 	.word	0x080047c3
 800473c:	080047c3 	.word	0x080047c3
 8004740:	080047c3 	.word	0x080047c3
 8004744:	080047c3 	.word	0x080047c3
 8004748:	080047c3 	.word	0x080047c3
 800474c:	080047c3 	.word	0x080047c3
 8004750:	080047c3 	.word	0x080047c3
 8004754:	080047c3 	.word	0x080047c3
 8004758:	080047c3 	.word	0x080047c3
 800475c:	080047b5 	.word	0x080047b5
 8004760:	2b40      	cmp	r3, #64	@ 0x40
 8004762:	d02a      	beq.n	80047ba <UART_SetConfig+0x8aa>
 8004764:	e02d      	b.n	80047c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004766:	f7fd ff95 	bl	8002694 <HAL_RCCEx_GetD3PCLK1Freq>
 800476a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800476c:	e02f      	b.n	80047ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800476e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004772:	4618      	mov	r0, r3
 8004774:	f7fd ffa4 	bl	80026c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800477c:	e027      	b.n	80047ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800477e:	f107 0318 	add.w	r3, r7, #24
 8004782:	4618      	mov	r0, r3
 8004784:	f7fe f8f0 	bl	8002968 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800478c:	e01f      	b.n	80047ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800478e:	4b21      	ldr	r3, [pc, #132]	@ (8004814 <UART_SetConfig+0x904>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800479a:	4b1e      	ldr	r3, [pc, #120]	@ (8004814 <UART_SetConfig+0x904>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	08db      	lsrs	r3, r3, #3
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	4a1d      	ldr	r2, [pc, #116]	@ (800481c <UART_SetConfig+0x90c>)
 80047a6:	fa22 f303 	lsr.w	r3, r2, r3
 80047aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047ac:	e00f      	b.n	80047ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80047ae:	4b1b      	ldr	r3, [pc, #108]	@ (800481c <UART_SetConfig+0x90c>)
 80047b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047b2:	e00c      	b.n	80047ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80047b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004820 <UART_SetConfig+0x910>)
 80047b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047b8:	e009      	b.n	80047ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047c0:	e005      	b.n	80047ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80047cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 81ee 	beq.w	8004bb2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	4a12      	ldr	r2, [pc, #72]	@ (8004824 <UART_SetConfig+0x914>)
 80047dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047e0:	461a      	mov	r2, r3
 80047e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80047e8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	4413      	add	r3, r2
 80047f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d305      	bcc.n	8004806 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004802:	429a      	cmp	r2, r3
 8004804:	d910      	bls.n	8004828 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800480c:	e1d1      	b.n	8004bb2 <UART_SetConfig+0xca2>
 800480e:	bf00      	nop
 8004810:	40011c00 	.word	0x40011c00
 8004814:	58024400 	.word	0x58024400
 8004818:	58000c00 	.word	0x58000c00
 800481c:	03d09000 	.word	0x03d09000
 8004820:	003d0900 	.word	0x003d0900
 8004824:	080050a8 	.word	0x080050a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800482a:	2200      	movs	r2, #0
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	60fa      	str	r2, [r7, #12]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	4ac0      	ldr	r2, [pc, #768]	@ (8004b38 <UART_SetConfig+0xc28>)
 8004836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800483a:	b29b      	uxth	r3, r3
 800483c:	2200      	movs	r2, #0
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	607a      	str	r2, [r7, #4]
 8004842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004846:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800484a:	f7fb fd51 	bl	80002f0 <__aeabi_uldivmod>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	020b      	lsls	r3, r1, #8
 8004860:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004864:	0202      	lsls	r2, r0, #8
 8004866:	6979      	ldr	r1, [r7, #20]
 8004868:	6849      	ldr	r1, [r1, #4]
 800486a:	0849      	lsrs	r1, r1, #1
 800486c:	2000      	movs	r0, #0
 800486e:	460c      	mov	r4, r1
 8004870:	4605      	mov	r5, r0
 8004872:	eb12 0804 	adds.w	r8, r2, r4
 8004876:	eb43 0905 	adc.w	r9, r3, r5
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	469a      	mov	sl, r3
 8004882:	4693      	mov	fp, r2
 8004884:	4652      	mov	r2, sl
 8004886:	465b      	mov	r3, fp
 8004888:	4640      	mov	r0, r8
 800488a:	4649      	mov	r1, r9
 800488c:	f7fb fd30 	bl	80002f0 <__aeabi_uldivmod>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4613      	mov	r3, r2
 8004896:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800489e:	d308      	bcc.n	80048b2 <UART_SetConfig+0x9a2>
 80048a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048a6:	d204      	bcs.n	80048b2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048ae:	60da      	str	r2, [r3, #12]
 80048b0:	e17f      	b.n	8004bb2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80048b8:	e17b      	b.n	8004bb2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048c2:	f040 80bd 	bne.w	8004a40 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80048c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	dc48      	bgt.n	8004960 <UART_SetConfig+0xa50>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	db7b      	blt.n	80049ca <UART_SetConfig+0xaba>
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d879      	bhi.n	80049ca <UART_SetConfig+0xaba>
 80048d6:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <UART_SetConfig+0x9cc>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004967 	.word	0x08004967
 80048e0:	0800496f 	.word	0x0800496f
 80048e4:	080049cb 	.word	0x080049cb
 80048e8:	080049cb 	.word	0x080049cb
 80048ec:	08004977 	.word	0x08004977
 80048f0:	080049cb 	.word	0x080049cb
 80048f4:	080049cb 	.word	0x080049cb
 80048f8:	080049cb 	.word	0x080049cb
 80048fc:	08004987 	.word	0x08004987
 8004900:	080049cb 	.word	0x080049cb
 8004904:	080049cb 	.word	0x080049cb
 8004908:	080049cb 	.word	0x080049cb
 800490c:	080049cb 	.word	0x080049cb
 8004910:	080049cb 	.word	0x080049cb
 8004914:	080049cb 	.word	0x080049cb
 8004918:	080049cb 	.word	0x080049cb
 800491c:	08004997 	.word	0x08004997
 8004920:	080049cb 	.word	0x080049cb
 8004924:	080049cb 	.word	0x080049cb
 8004928:	080049cb 	.word	0x080049cb
 800492c:	080049cb 	.word	0x080049cb
 8004930:	080049cb 	.word	0x080049cb
 8004934:	080049cb 	.word	0x080049cb
 8004938:	080049cb 	.word	0x080049cb
 800493c:	080049cb 	.word	0x080049cb
 8004940:	080049cb 	.word	0x080049cb
 8004944:	080049cb 	.word	0x080049cb
 8004948:	080049cb 	.word	0x080049cb
 800494c:	080049cb 	.word	0x080049cb
 8004950:	080049cb 	.word	0x080049cb
 8004954:	080049cb 	.word	0x080049cb
 8004958:	080049cb 	.word	0x080049cb
 800495c:	080049bd 	.word	0x080049bd
 8004960:	2b40      	cmp	r3, #64	@ 0x40
 8004962:	d02e      	beq.n	80049c2 <UART_SetConfig+0xab2>
 8004964:	e031      	b.n	80049ca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004966:	f7fd fe69 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 800496a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800496c:	e033      	b.n	80049d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800496e:	f7fd fe7b 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 8004972:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004974:	e02f      	b.n	80049d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800497a:	4618      	mov	r0, r3
 800497c:	f7fd fea0 	bl	80026c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004984:	e027      	b.n	80049d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004986:	f107 0318 	add.w	r3, r7, #24
 800498a:	4618      	mov	r0, r3
 800498c:	f7fd ffec 	bl	8002968 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004994:	e01f      	b.n	80049d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004996:	4b69      	ldr	r3, [pc, #420]	@ (8004b3c <UART_SetConfig+0xc2c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80049a2:	4b66      	ldr	r3, [pc, #408]	@ (8004b3c <UART_SetConfig+0xc2c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	08db      	lsrs	r3, r3, #3
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	4a64      	ldr	r2, [pc, #400]	@ (8004b40 <UART_SetConfig+0xc30>)
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049b4:	e00f      	b.n	80049d6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80049b6:	4b62      	ldr	r3, [pc, #392]	@ (8004b40 <UART_SetConfig+0xc30>)
 80049b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049ba:	e00c      	b.n	80049d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80049bc:	4b61      	ldr	r3, [pc, #388]	@ (8004b44 <UART_SetConfig+0xc34>)
 80049be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049c0:	e009      	b.n	80049d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049c8:	e005      	b.n	80049d6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80049d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80ea 	beq.w	8004bb2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e2:	4a55      	ldr	r2, [pc, #340]	@ (8004b38 <UART_SetConfig+0xc28>)
 80049e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049e8:	461a      	mov	r2, r3
 80049ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80049f0:	005a      	lsls	r2, r3, #1
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	441a      	add	r2, r3
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a02:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a06:	2b0f      	cmp	r3, #15
 8004a08:	d916      	bls.n	8004a38 <UART_SetConfig+0xb28>
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a10:	d212      	bcs.n	8004a38 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	f023 030f 	bic.w	r3, r3, #15
 8004a1a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1e:	085b      	lsrs	r3, r3, #1
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004a34:	60da      	str	r2, [r3, #12]
 8004a36:	e0bc      	b.n	8004bb2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004a3e:	e0b8      	b.n	8004bb2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a40:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	dc4b      	bgt.n	8004ae0 <UART_SetConfig+0xbd0>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f2c0 8087 	blt.w	8004b5c <UART_SetConfig+0xc4c>
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	f200 8084 	bhi.w	8004b5c <UART_SetConfig+0xc4c>
 8004a54:	a201      	add	r2, pc, #4	@ (adr r2, 8004a5c <UART_SetConfig+0xb4c>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004ae7 	.word	0x08004ae7
 8004a60:	08004aef 	.word	0x08004aef
 8004a64:	08004b5d 	.word	0x08004b5d
 8004a68:	08004b5d 	.word	0x08004b5d
 8004a6c:	08004af7 	.word	0x08004af7
 8004a70:	08004b5d 	.word	0x08004b5d
 8004a74:	08004b5d 	.word	0x08004b5d
 8004a78:	08004b5d 	.word	0x08004b5d
 8004a7c:	08004b07 	.word	0x08004b07
 8004a80:	08004b5d 	.word	0x08004b5d
 8004a84:	08004b5d 	.word	0x08004b5d
 8004a88:	08004b5d 	.word	0x08004b5d
 8004a8c:	08004b5d 	.word	0x08004b5d
 8004a90:	08004b5d 	.word	0x08004b5d
 8004a94:	08004b5d 	.word	0x08004b5d
 8004a98:	08004b5d 	.word	0x08004b5d
 8004a9c:	08004b17 	.word	0x08004b17
 8004aa0:	08004b5d 	.word	0x08004b5d
 8004aa4:	08004b5d 	.word	0x08004b5d
 8004aa8:	08004b5d 	.word	0x08004b5d
 8004aac:	08004b5d 	.word	0x08004b5d
 8004ab0:	08004b5d 	.word	0x08004b5d
 8004ab4:	08004b5d 	.word	0x08004b5d
 8004ab8:	08004b5d 	.word	0x08004b5d
 8004abc:	08004b5d 	.word	0x08004b5d
 8004ac0:	08004b5d 	.word	0x08004b5d
 8004ac4:	08004b5d 	.word	0x08004b5d
 8004ac8:	08004b5d 	.word	0x08004b5d
 8004acc:	08004b5d 	.word	0x08004b5d
 8004ad0:	08004b5d 	.word	0x08004b5d
 8004ad4:	08004b5d 	.word	0x08004b5d
 8004ad8:	08004b5d 	.word	0x08004b5d
 8004adc:	08004b4f 	.word	0x08004b4f
 8004ae0:	2b40      	cmp	r3, #64	@ 0x40
 8004ae2:	d037      	beq.n	8004b54 <UART_SetConfig+0xc44>
 8004ae4:	e03a      	b.n	8004b5c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae6:	f7fd fda9 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8004aea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004aec:	e03c      	b.n	8004b68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aee:	f7fd fdbb 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 8004af2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004af4:	e038      	b.n	8004b68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fd fde0 	bl	80026c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b04:	e030      	b.n	8004b68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b06:	f107 0318 	add.w	r3, r7, #24
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fd ff2c 	bl	8002968 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b14:	e028      	b.n	8004b68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b16:	4b09      	ldr	r3, [pc, #36]	@ (8004b3c <UART_SetConfig+0xc2c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d012      	beq.n	8004b48 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b22:	4b06      	ldr	r3, [pc, #24]	@ (8004b3c <UART_SetConfig+0xc2c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	08db      	lsrs	r3, r3, #3
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	4a04      	ldr	r2, [pc, #16]	@ (8004b40 <UART_SetConfig+0xc30>)
 8004b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b34:	e018      	b.n	8004b68 <UART_SetConfig+0xc58>
 8004b36:	bf00      	nop
 8004b38:	080050a8 	.word	0x080050a8
 8004b3c:	58024400 	.word	0x58024400
 8004b40:	03d09000 	.word	0x03d09000
 8004b44:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004b48:	4b24      	ldr	r3, [pc, #144]	@ (8004bdc <UART_SetConfig+0xccc>)
 8004b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b4c:	e00c      	b.n	8004b68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b4e:	4b24      	ldr	r3, [pc, #144]	@ (8004be0 <UART_SetConfig+0xcd0>)
 8004b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b52:	e009      	b.n	8004b68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b5a:	e005      	b.n	8004b68 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004b66:	bf00      	nop
    }

    if (pclk != 0U)
 8004b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d021      	beq.n	8004bb2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	4a1c      	ldr	r2, [pc, #112]	@ (8004be4 <UART_SetConfig+0xcd4>)
 8004b74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	441a      	add	r2, r3
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b94:	2b0f      	cmp	r3, #15
 8004b96:	d909      	bls.n	8004bac <UART_SetConfig+0xc9c>
 8004b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b9e:	d205      	bcs.n	8004bac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60da      	str	r2, [r3, #12]
 8004baa:	e002      	b.n	8004bb2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004bce:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3748      	adds	r7, #72	@ 0x48
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bdc:	03d09000 	.word	0x03d09000
 8004be0:	003d0900 	.word	0x003d0900
 8004be4:	080050a8 	.word	0x080050a8

08004be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ce6:	d10a      	bne.n	8004cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b098      	sub	sp, #96	@ 0x60
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d3c:	f7fc f956 	bl	8000fec <HAL_GetTick>
 8004d40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d12f      	bne.n	8004db0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f88e 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d022      	beq.n	8004db0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d8a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e6      	bne.n	8004d6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e063      	b.n	8004e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d149      	bne.n	8004e52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f857 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d03c      	beq.n	8004e52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	623b      	str	r3, [r7, #32]
   return(result);
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004df6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004df8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e6      	bne.n	8004dd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3308      	adds	r3, #8
 8004e28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e2a:	61fa      	str	r2, [r7, #28]
 8004e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	69b9      	ldr	r1, [r7, #24]
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	617b      	str	r3, [r7, #20]
   return(result);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e5      	bne.n	8004e0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e012      	b.n	8004e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3758      	adds	r7, #88	@ 0x58
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e90:	e04f      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d04b      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fc f8a7 	bl	8000fec <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e04e      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d037      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b80      	cmp	r3, #128	@ 0x80
 8004ec6:	d034      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b40      	cmp	r3, #64	@ 0x40
 8004ecc:	d031      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d110      	bne.n	8004efe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f839 	bl	8004f5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2208      	movs	r2, #8
 8004eee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e029      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f0c:	d111      	bne.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f81f 	bl	8004f5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e00f      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	bf0c      	ite	eq
 8004f42:	2301      	moveq	r3, #1
 8004f44:	2300      	movne	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d0a0      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b095      	sub	sp, #84	@ 0x54
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f82:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f84:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e6      	bne.n	8004f64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8005024 <UART_EndRxTransfer+0xc8>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e5      	bne.n	8004f96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d118      	bne.n	8005004 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f023 0310 	bic.w	r3, r3, #16
 8004fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6979      	ldr	r1, [r7, #20]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e6      	bne.n	8004fd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005018:	bf00      	nop
 800501a:	3754      	adds	r7, #84	@ 0x54
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	effffffe 	.word	0xeffffffe

08005028 <memset>:
 8005028:	4402      	add	r2, r0
 800502a:	4603      	mov	r3, r0
 800502c:	4293      	cmp	r3, r2
 800502e:	d100      	bne.n	8005032 <memset+0xa>
 8005030:	4770      	bx	lr
 8005032:	f803 1b01 	strb.w	r1, [r3], #1
 8005036:	e7f9      	b.n	800502c <memset+0x4>

08005038 <__libc_init_array>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	4d0d      	ldr	r5, [pc, #52]	@ (8005070 <__libc_init_array+0x38>)
 800503c:	4c0d      	ldr	r4, [pc, #52]	@ (8005074 <__libc_init_array+0x3c>)
 800503e:	1b64      	subs	r4, r4, r5
 8005040:	10a4      	asrs	r4, r4, #2
 8005042:	2600      	movs	r6, #0
 8005044:	42a6      	cmp	r6, r4
 8005046:	d109      	bne.n	800505c <__libc_init_array+0x24>
 8005048:	4d0b      	ldr	r5, [pc, #44]	@ (8005078 <__libc_init_array+0x40>)
 800504a:	4c0c      	ldr	r4, [pc, #48]	@ (800507c <__libc_init_array+0x44>)
 800504c:	f000 f818 	bl	8005080 <_init>
 8005050:	1b64      	subs	r4, r4, r5
 8005052:	10a4      	asrs	r4, r4, #2
 8005054:	2600      	movs	r6, #0
 8005056:	42a6      	cmp	r6, r4
 8005058:	d105      	bne.n	8005066 <__libc_init_array+0x2e>
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005060:	4798      	blx	r3
 8005062:	3601      	adds	r6, #1
 8005064:	e7ee      	b.n	8005044 <__libc_init_array+0xc>
 8005066:	f855 3b04 	ldr.w	r3, [r5], #4
 800506a:	4798      	blx	r3
 800506c:	3601      	adds	r6, #1
 800506e:	e7f2      	b.n	8005056 <__libc_init_array+0x1e>
 8005070:	080050c8 	.word	0x080050c8
 8005074:	080050c8 	.word	0x080050c8
 8005078:	080050c8 	.word	0x080050c8
 800507c:	080050cc 	.word	0x080050cc

08005080 <_init>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr

0800508c <_fini>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	bf00      	nop
 8005090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005092:	bc08      	pop	{r3}
 8005094:	469e      	mov	lr, r3
 8005096:	4770      	bx	lr
